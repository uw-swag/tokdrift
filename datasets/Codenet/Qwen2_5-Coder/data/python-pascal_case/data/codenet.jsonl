{"id": "Python/23", "code": "import heapq\nconst = 0\nleft = []\nright = []\n\nq = int(input())\ncnt = 0\nleft_sum = 0\nright_sum = 0\nfor _ in range(q):\n    t = list(map(int, input().split()))\n    if t[0] == 1:\n\n        a, b = t[1:]\n        const += b\n        if cnt % 2 == 0:\n            if not right:\n                heapq.heappush(left, -a)\n                left_sum += a\n                cnt += 1\n\n                continue\n\n            c = heapq.heappop(right)\n            right_sum -= c\n            if a <= c:\n                heapq.heappush(left, -a)\n                heapq.heappush(right, c)\n                left_sum += a\n                right_sum += c\n            else:\n                heapq.heappush(left, -c)\n                heapq.heappush(right, a)\n                left_sum += c\n                right_sum += a\n        else:\n            c = heapq.heappop(left)\n            left_sum += c\n            if a <= -c:\n                heapq.heappush(left, -a)\n                heapq.heappush(right, -c)\n                left_sum += a\n                right_sum -= c\n            else:\n                heapq.heappush(left, c)\n                heapq.heappush(right, a)\n                left_sum -= c\n                right_sum += a\n        cnt += 1\n\n    else:\n        tmp = -left[0]\n        print(tmp, const - left_sum + right_sum + tmp * (cnt % 2))\n", "test_IO": {"input": ["4\n1 4 2\n2\n1 1 -8\n2\n"], "output": ["4 2\n1 -3\n"]}, "modified_context": "import heapq\nconst = 0\nleft = []\nright = []\n\nq = int(input())\ncnt = 0\nLeftSum = 0\nRightSum = 0\nfor _ in range(q):\n    t = list(map(int, input().split()))\n    if t[0] == 1:\n\n        a, b = t[1:]\n        const += b\n        if cnt % 2 == 0:\n            if not right:\n                heapq.heappush(left, -a)\n                LeftSum += a\n                cnt += 1\n\n                continue\n\n            c = heapq.heappop(right)\n            RightSum -= c\n            if a <= c:\n                heapq.heappush(left, -a)\n                heapq.heappush(right, c)\n                LeftSum += a\n                RightSum += c\n            else:\n                heapq.heappush(left, -c)\n                heapq.heappush(right, a)\n                LeftSum += c\n                RightSum += a\n        else:\n            c = heapq.heappop(left)\n            LeftSum += c\n            if a <= -c:\n                heapq.heappush(left, -a)\n                heapq.heappush(right, -c)\n                LeftSum += a\n                RightSum -= c\n            else:\n                heapq.heappush(left, c)\n                heapq.heappush(right, a)\n                LeftSum -= c\n                RightSum += a\n        cnt += 1\n\n    else:\n        tmp = -left[0]\n        print(tmp, const - LeftSum + RightSum + tmp * (cnt % 2))\n", "token_boundary_changed": false}
{"id": "Python/25", "code": "from itertools import combinations_with_replacement\nimport sys\n\n\ndef LI(): return map(int, sys.stdin.readline().rstrip().split())\n\n\nN, M, Q = LI()\n\nQ_groups = []\nfor _ in range(Q):\n    Q_groups.append([*LI()])\n\nmax_score = 0\nfor p in combinations_with_replacement(range(1, M + 1), r=N):\n    temp_score = 0\n    for q in Q_groups:\n        if p[q[1] - 1] - p[q[0] - 1] == q[2]:\n            temp_score += q[3]\n    max_score = max(max_score, temp_score)\n\nprint(max_score)\n", "test_IO": {"input": ["3 4 3\n1 3 3 100\n1 2 2 10\n2 3 2 10\n"], "output": ["110\n"]}, "modified_context": "from itertools import combinations_with_replacement\nimport sys\n\n\ndef LI(): return map(int, sys.stdin.readline().rstrip().split())\n\n\nN, M, Q = LI()\n\nQ_groups = []\nfor _ in range(Q):\n    Q_groups.append([*LI()])\n\nMaxScore = 0\nfor p in combinations_with_replacement(range(1, M + 1), r=N):\n    TempScore = 0\n    for q in Q_groups:\n        if p[q[1] - 1] - p[q[0] - 1] == q[2]:\n            TempScore += q[3]\n    MaxScore = max(MaxScore, TempScore)\n\nprint(MaxScore)\n", "token_boundary_changed": false}
{"id": "Python/28", "code": "N = int(input())\nA = list(map(int, input().split()))\nB = [0] * N\n\nfor i in range(N - 1, -1, -1):\n    tmp_sum = 0\n    for j in range((i + 1) * 2 - 1, N, i + 1):\n        tmp_sum += B[j]\n        tmp_sum %= 2\n    B[i] = tmp_sum ^ A[i]\n\nprint(sum(B))\nprint(*[i + 1 for i, b in enumerate(B) if b == 1])\n", "test_IO": {"input": ["3\n1 0 0\n"], "output": ["1\n1\n"]}, "modified_context": "N = int(input())\nA = list(map(int, input().split()))\nB = [0] * N\n\nfor i in range(N - 1, -1, -1):\n    TmpSum = 0\n    for j in range((i + 1) * 2 - 1, N, i + 1):\n        TmpSum += B[j]\n        TmpSum %= 2\n    B[i] = TmpSum ^ A[i]\n\nprint(sum(B))\nprint(*[i + 1 for i, b in enumerate(B) if b == 1])\n", "token_boundary_changed": true}
{"id": "Python/32", "code": "import copy\n\n\ndef solve():\n    S_d = list(input())\n    T = list(input())\n\n    end = len(S_d) - 1\n    first = end - len(T) + 1\n    while first >= 0:\n        t_i = 0\n        for s_i in range(first, end+1):\n            if T[t_i] != S_d[s_i] and S_d[s_i] != '?':\n                break\n            t_i += 1\n        else:\n            break\n\n        first -= 1\n        end -= 1\n\n    else:\n        print('UNRESTORABLE')\n        exit(0)\n\n    ans = copy.deepcopy(S_d)\n    t_i = 0\n    for i in range(first, end+1):\n        ans[i] = T[t_i]\n        t_i += 1\n\n    ans = ''.join(ans).replace('?', 'a')\n    print(ans)\n\n\nif __name__ == '__main__':\n    solve()\n", "test_IO": {"input": ["?tc????\ncoder\n"], "output": ["atcoder\n"]}, "modified_context": "import copy\n\n\ndef solve():\n    S_d = list(input())\n    T = list(input())\n\n    end = len(S_d) - 1\n    first = end - len(T) + 1\n    while first >= 0:\n        TI = 0\n        for SI in range(first, end+1):\n            if T[TI] != S_d[SI] and S_d[SI] != '?':\n                break\n            TI += 1\n        else:\n            break\n\n        first -= 1\n        end -= 1\n\n    else:\n        print('UNRESTORABLE')\n        exit(0)\n\n    ans = copy.deepcopy(S_d)\n    TI = 0\n    for i in range(first, end+1):\n        ans[i] = T[TI]\n        TI += 1\n\n    ans = ''.join(ans).replace('?', 'a')\n    print(ans)\n\n\nif __name__ == '__main__':\n    solve()\n", "token_boundary_changed": true}
{"id": "Python/44", "code": "import sys\nimport math\n\nfrom collections import defaultdict\nfrom collections import deque\n\n\ndef load(vtype=int):\n    return vtype(input().strip())\n\n\ndef load_list(seplator=\" \", vtype=int):\n    return [vtype(v) for v in input().strip().split(seplator)]\n\n\ndef exit():\n    import sys\n    sys.exit(0)\n\n\ndef perm_sub(li, used):\n    if len(li) == len(used):\n        return [deque()]\n    k = []\n    for i in range(len(li)):\n        if i in used:\n            continue\n        used.add(i)\n        sub_list = perm_sub(li, used)\n        for sub in sub_list:\n            sub.appendleft(li[i])\n        k.extend(sub_list)\n        used.discard(i)\n    return k\n\n\ndef perm_li(li):\n    return perm_sub(li, set())\n\n\ndef perm_n(n):\n    return perm_sub(list(range(n)), set())\n\n\ndef join_i(li, sep=\"\"):\n    return sep.join([str(e) for e in li])\n\n\ndef li2n(li):\n    n, base = 0, 1\n    for i in range(len(li)-1, -1, -1):\n        n += li[i] * base\n        base *= 10\n    return n\n\n\ndef sli2ili(li):\n    return [int(s) for s in li]\n\n\ndef prime_list(n):\n    li = [i for i in range(2, n+1)]\n    for i in range(len(li)):\n        if li[i] >= int(math.sqrt(n)):\n            break\n        if li[i] == -1:\n            continue\n        for j in range(i+1, len(li)):\n            if li[j] % li[i] == 0:\n                li[j] = -1\n    return [n for n in li if n != -1]\n\n\ndef gcd(a, b):\n    a, b = max(a, b), min(a, b)\n    while True:\n        r = a % b\n        if r == 0:\n            return b\n        a, b = b, r\n\n\ndef lcm(a, b):\n    return int(a * b / gcd(a, b))\n\n\ndef all_subset(li):\n    s = []\n    n = len(li)\n    for bit in range(0, (1 << (n+1))):\n        ss = set()\n        for i in range(0, n):\n            if (bit & (1 << i)):\n                ss.add(li[i])\n        s.append(ss)\n    return s\n\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    return n * factorial(n-1)\n\n\ndef mCn(m, n):\n    def factorial_ntimes(m, n):\n        r = 1\n        while n:\n            r *= m\n            m -= 1\n            n -= 1\n        return r\n    return int(factorial_ntimes(m, n) / factorial(n))\n\n\nn = load()\nA = load_list()\n\nif n == len(set(A)):\n    print('YES')\nelse:\n    print('NO')\n", "test_IO": {"input": ["5\n2 6 1 4 5\n"], "output": ["YES\n"]}, "modified_context": "import sys\nimport math\n\nfrom collections import defaultdict\nfrom collections import deque\n\n\ndef load(vtype=int):\n    return vtype(input().strip())\n\n\ndef LoadList(seplator=\" \", vtype=int):\n    return [vtype(v) for v in input().strip().split(seplator)]\n\n\ndef exit():\n    import sys\n    sys.exit(0)\n\n\ndef PermSub(li, used):\n    if len(li) == len(used):\n        return [deque()]\n    k = []\n    for i in range(len(li)):\n        if i in used:\n            continue\n        used.add(i)\n        SubList = PermSub(li, used)\n        for sub in SubList:\n            sub.appendleft(li[i])\n        k.extend(SubList)\n        used.discard(i)\n    return k\n\n\ndef PermLi(li):\n    return PermSub(li, set())\n\n\ndef PermN(n):\n    return PermSub(list(range(n)), set())\n\n\ndef JoinI(li, sep=\"\"):\n    return sep.join([str(e) for e in li])\n\n\ndef li2n(li):\n    n, base = 0, 1\n    for i in range(len(li)-1, -1, -1):\n        n += li[i] * base\n        base *= 10\n    return n\n\n\ndef sli2ili(li):\n    return [int(s) for s in li]\n\n\ndef PrimeList(n):\n    li = [i for i in range(2, n+1)]\n    for i in range(len(li)):\n        if li[i] >= int(math.sqrt(n)):\n            break\n        if li[i] == -1:\n            continue\n        for j in range(i+1, len(li)):\n            if li[j] % li[i] == 0:\n                li[j] = -1\n    return [n for n in li if n != -1]\n\n\ndef gcd(a, b):\n    a, b = max(a, b), min(a, b)\n    while True:\n        r = a % b\n        if r == 0:\n            return b\n        a, b = b, r\n\n\ndef lcm(a, b):\n    return int(a * b / gcd(a, b))\n\n\ndef AllSubset(li):\n    s = []\n    n = len(li)\n    for bit in range(0, (1 << (n+1))):\n        ss = set()\n        for i in range(0, n):\n            if (bit & (1 << i)):\n                ss.add(li[i])\n        s.append(ss)\n    return s\n\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    return n * factorial(n-1)\n\n\ndef mCn(m, n):\n    def FactorialNtimes(m, n):\n        r = 1\n        while n:\n            r *= m\n            m -= 1\n            n -= 1\n        return r\n    return int(FactorialNtimes(m, n) / factorial(n))\n\n\nn = load()\nA = LoadList()\n\nif n == len(set(A)):\n    print('YES')\nelse:\n    print('NO')\n", "token_boundary_changed": true}
{"id": "Python/47", "code": "def main():\n    q, h, s, d = map(int, input().split())\n    n = int(input())\n    min_1 = min(q*4, h*2, q*2+h, s)\n    min_2 = min(min_1*2, d)\n\n    print((n % 2)*min_1 + (n // 2)*min_2)\n\n\nif __name__ == '__main__':\n    main()\n", "test_IO": {"input": ["20 30 70 90\n3\n"], "output": ["150\n"]}, "modified_context": "def main():\n    q, h, s, d = map(int, input().split())\n    n = int(input())\n    Min1 = min(q*4, h*2, q*2+h, s)\n    Min2 = min(Min1*2, d)\n\n    print((n % 2)*Min1 + (n // 2)*Min2)\n\n\nif __name__ == '__main__':\n    main()\n", "token_boundary_changed": true}
{"id": "Python/48", "code": "n = int(input())\ns = input()\n\nr_cnt = s.count('R')\ng_cnt = s.count('G')\nb_cnt = s.count('B')\n\nans = r_cnt * g_cnt * b_cnt\n\nfor i in range(n):\n    for d in range(n):\n        j = i + d\n        k = j + d\n        if k >= n:\n            break\n\n        if s[i] != s[j] and s[j] != s[k] and s[k] != s[i]:\n\n            ans -= 1\nprint(ans)\n", "test_IO": {"input": ["4\nRRGB\n"], "output": ["1\n"]}, "modified_context": "n = int(input())\ns = input()\n\nRCnt = s.count('R')\nGCnt = s.count('G')\nBCnt = s.count('B')\n\nans = RCnt * GCnt * BCnt\n\nfor i in range(n):\n    for d in range(n):\n        j = i + d\n        k = j + d\n        if k >= n:\n            break\n\n        if s[i] != s[j] and s[j] != s[k] and s[k] != s[i]:\n\n            ans -= 1\nprint(ans)\n", "token_boundary_changed": true}
{"id": "Python/50", "code": "def atc_079a(input_value: str) -> str:\n    n = 3\n    for i in range(0, len(input_value) + 1 - n):\n        for j in range(1, n):\n            if input_value[i] != input_value[i + j]:\n                break\n            if j == n - 1:\n                return \"Yes\"\n    return \"No\"\n\n\ninput_value = input()\nprint(atc_079a(input_value))\n", "test_IO": {"input": ["1118\n"], "output": ["Yes\n"]}, "modified_context": "def Atc079A(InputValue: str) -> str:\n    n = 3\n    for i in range(0, len(InputValue) + 1 - n):\n        for j in range(1, n):\n            if InputValue[i] != InputValue[i + j]:\n                break\n            if j == n - 1:\n                return \"Yes\"\n    return \"No\"\n\n\nInputValue = input()\nprint(Atc079A(InputValue))\n", "token_boundary_changed": true}
{"id": "Python/51", "code": "n = int(input())\nlst = []\npair = 0\nfor i in range(n):\n    st = ''.join(sorted(list(input())))\n    lst.append(st)\nlst = sorted(lst)\nlst += ['end']\npre = ''\ntmp_cnt = 0\ncnt = 0\nfor i in lst:\n    if i == pre:\n        tmp_cnt += 1\n    else:\n        cnt += sum([j for j in range(tmp_cnt + 1)])\n        tmp_cnt = 0\n    pre = i\nprint(cnt)\n", "test_IO": {"input": ["3\nacornistnt\npeanutbomb\nconstraint\n"], "output": ["1\n"]}, "modified_context": "n = int(input())\nlst = []\npair = 0\nfor i in range(n):\n    st = ''.join(sorted(list(input())))\n    lst.append(st)\nlst = sorted(lst)\nlst += ['end']\npre = ''\nTmpCnt = 0\ncnt = 0\nfor i in lst:\n    if i == pre:\n        TmpCnt += 1\n    else:\n        cnt += sum([j for j in range(TmpCnt + 1)])\n        TmpCnt = 0\n    pre = i\nprint(cnt)\n", "token_boundary_changed": true}
{"id": "Python/58", "code": "from functools import reduce\nimport math\n\n\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n\n\ndef lcm_list(numbers):\n    return reduce(lcm, numbers, 1)\n\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n\nA = [a // 2 for a in A]\n\n\ncount_div_2 = None\nfor a in A:\n    cnt = 0\n    while a % 2 == 0:\n        a //= 2\n        cnt += 1\n\n    if count_div_2 is None:\n        count_div_2 = cnt\n\n    elif cnt != count_div_2:\n        print(0)\n        exit()\n\n\nmy_lcm = lcm_list(A)\nif my_lcm > M:\n    print(0)\n    exit()\n\ntmp = M // my_lcm\n\n\nans = (tmp + 1) // 2\nprint(ans)\n", "test_IO": {"input": ["2 50\n6 10\n"], "output": ["2\n"]}, "modified_context": "from functools import reduce\nimport math\n\n\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n\n\ndef LcmList(numbers):\n    return reduce(lcm, numbers, 1)\n\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n\nA = [a // 2 for a in A]\n\n\nCountDiv2 = None\nfor a in A:\n    cnt = 0\n    while a % 2 == 0:\n        a //= 2\n        cnt += 1\n\n    if CountDiv2 is None:\n        CountDiv2 = cnt\n\n    elif cnt != CountDiv2:\n        print(0)\n        exit()\n\n\nMyLcm = LcmList(A)\nif MyLcm > M:\n    print(0)\n    exit()\n\ntmp = M // MyLcm\n\n\nans = (tmp + 1) // 2\nprint(ans)\n", "token_boundary_changed": true}
{"id": "Python/62", "code": "import sys\ninput = sys.stdin.buffer.readline\n\n\ndef main():\n\n    class SegmentTree:\n\n        def __init__(self, size, default):\n            self.size = 2**(size-1).bit_length()\n            self.default = default\n            self.seg = [default]*(2*self.size-1)\n\n        def segfunc(self, x, y):\n            return max(x, y)\n\n        def update(self, k, x):\n            k += self.size-1\n            self.seg[k] = x\n            while k:\n                k = (k-1)//2\n                self.seg[k] = self.segfunc(self.seg[2*k+1], self.seg[2*k+2])\n\n        def query(self, p, q):\n            if q <= p:\n                return self.default\n            p += self.size-1\n            q += self.size-2\n            ret = self.default\n            while q-p > 1:\n                if p & 1 == 0:\n                    ret = self.segfunc(ret, self.seg[p])\n                if q & 1 == 1:\n                    ret = self.segfunc(ret, self.seg[q])\n                    q -= 1\n                p = p//2\n                q = (q-1)//2\n            ret = self.segfunc(self.segfunc(ret, self.seg[p]), self.seg[q])\n            return ret\n\n        def seg_print(self):\n            print(self.seg)\n\n    N = int(input())\n    a = list(map(int, input().split()))\n    ans = [i+1 for i in range(N)]\n    left_seg = SegmentTree(N, 0)\n    for i, num in enumerate(a):\n        ans[num-1] *= i + 1 - left_seg.query(0, num)\n        left_seg.update(num-1, i+1)\n    right_seg = SegmentTree(N, 0)\n    for i, num in enumerate(a[::-1]):\n        ans[num-1] *= i + 1 - right_seg.query(0, num)\n        right_seg.update(num-1, i+1)\n\n    print(sum(ans))\n\n\nif __name__ == \"__main__\":\n    main()\n", "test_IO": {"input": ["3\n2 1 3\n"], "output": ["9\n"]}, "modified_context": "import sys\ninput = sys.stdin.buffer.readline\n\n\ndef main():\n\n    class SegmentTree:\n\n        def __init__(self, size, default):\n            self.size = 2**(size-1).bit_length()\n            self.default = default\n            self.seg = [default]*(2*self.size-1)\n\n        def segfunc(self, x, y):\n            return max(x, y)\n\n        def update(self, k, x):\n            k += self.size-1\n            self.seg[k] = x\n            while k:\n                k = (k-1)//2\n                self.seg[k] = self.segfunc(self.seg[2*k+1], self.seg[2*k+2])\n\n        def query(self, p, q):\n            if q <= p:\n                return self.default\n            p += self.size-1\n            q += self.size-2\n            ret = self.default\n            while q-p > 1:\n                if p & 1 == 0:\n                    ret = self.segfunc(ret, self.seg[p])\n                if q & 1 == 1:\n                    ret = self.segfunc(ret, self.seg[q])\n                    q -= 1\n                p = p//2\n                q = (q-1)//2\n            ret = self.segfunc(self.segfunc(ret, self.seg[p]), self.seg[q])\n            return ret\n\n        def SegPrint(self):\n            print(self.seg)\n\n    N = int(input())\n    a = list(map(int, input().split()))\n    ans = [i+1 for i in range(N)]\n    LeftSeg = SegmentTree(N, 0)\n    for i, num in enumerate(a):\n        ans[num-1] *= i + 1 - LeftSeg.query(0, num)\n        LeftSeg.update(num-1, i+1)\n    RightSeg = SegmentTree(N, 0)\n    for i, num in enumerate(a[::-1]):\n        ans[num-1] *= i + 1 - RightSeg.query(0, num)\n        RightSeg.update(num-1, i+1)\n\n    print(sum(ans))\n\n\nif __name__ == \"__main__\":\n    main()\n", "token_boundary_changed": false}
{"id": "Python/69", "code": "N, A, B, C = map(int, input().split())\nl = [int(input()) for i in range(N)]\n\n\ndef dfs(cur, a, b, c):\n    if cur == N:\n        return abs(A - a) + abs(B - b) + abs(C - c) - 30 if min(a, b, c) > 0 else 10 ** 9\n    no_add = dfs(cur + 1, a, b, c)\n    add_a = dfs(cur + 1, a + l[cur], b, c) + 10\n    add_b = dfs(cur + 1, a, b + l[cur], c) + 10\n    add_c = dfs(cur + 1, a, b, c + l[cur]) + 10\n\n    return min(no_add, add_a, add_b, add_c)\n\n\nprint(dfs(0, 0, 0, 0))\n", "test_IO": {"input": ["5 100 90 80\n98\n40\n30\n21\n80\n"], "output": ["23\n"]}, "modified_context": "N, A, B, C = map(int, input().split())\nl = [int(input()) for i in range(N)]\n\n\ndef dfs(cur, a, b, c):\n    if cur == N:\n        return abs(A - a) + abs(B - b) + abs(C - c) - 30 if min(a, b, c) > 0 else 10 ** 9\n    NoAdd = dfs(cur + 1, a, b, c)\n    AddA = dfs(cur + 1, a + l[cur], b, c) + 10\n    AddB = dfs(cur + 1, a, b + l[cur], c) + 10\n    AddC = dfs(cur + 1, a, b, c + l[cur]) + 10\n\n    return min(NoAdd, AddA, AddB, AddC)\n\n\nprint(dfs(0, 0, 0, 0))\n", "token_boundary_changed": true}
{"id": "Python/71", "code": "N = int(input())\nc = input()\n\nnum_w = c.count(\"W\")\nnum_r = N - num_w\n\ncomp = \"R\"*num_r + \"W\"*num_w\nans = 0\nfor i in range(num_r):\n    if c[i] != comp[i]:\n        ans += 1\n\nans = min(num_w, num_r, ans)\nprint(ans)\n", "test_IO": {"input": ["4\nWWRR\n"], "output": ["2\n"]}, "modified_context": "N = int(input())\nc = input()\n\nNumW = c.count(\"W\")\nNumR = N - NumW\n\ncomp = \"R\"*NumR + \"W\"*NumW\nans = 0\nfor i in range(NumR):\n    if c[i] != comp[i]:\n        ans += 1\n\nans = min(NumW, NumR, ans)\nprint(ans)\n", "token_boundary_changed": true}
{"id": "Python/72", "code": "import sys\nsys.setrecursionlimit(10**7)\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x) - 1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef II(): return int(sys.stdin.readline())\ndef SI(): return sys.stdin.readline().strip()\n\n\nINF = 10 ** 18\nMOD = 10 ** 9 + 7\n\n\ndef main():\n    N = II()\n    a_li = LI()\n\n    a_li.sort()\n\n    n = a_li[-1]\n\n    dif = INF\n    prev_dif = dif\n    for a in a_li[:-1]:\n        dif = min(abs(n/2 - a), dif)\n        if dif != prev_dif:\n            r = a\n            prev_dif = dif\n\n    print(n, r)\n\n\nmain()\n", "test_IO": {"input": ["5\n6 9 4 2 11\n"], "output": ["11 6\n"]}, "modified_context": "import sys\nsys.setrecursionlimit(10**7)\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x) - 1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef II(): return int(sys.stdin.readline())\ndef SI(): return sys.stdin.readline().strip()\n\n\nINF = 10 ** 18\nMOD = 10 ** 9 + 7\n\n\ndef main():\n    N = II()\n    ALi = LI()\n\n    ALi.sort()\n\n    n = ALi[-1]\n\n    dif = INF\n    PrevDif = dif\n    for a in ALi[:-1]:\n        dif = min(abs(n/2 - a), dif)\n        if dif != PrevDif:\n            r = a\n            PrevDif = dif\n\n    print(n, r)\n\n\nmain()\n", "token_boundary_changed": true}
{"id": "Python/89", "code": "import sys\nfrom bisect import bisect_left\n\n\ndef solve():\n    input = sys.stdin.readline\n    N, K = map(int, input().split())\n    A = [(int(a) % K) - 1 for a in input().split()]\n    sum_A = [0 for _ in range(N + 1)]\n\n    count = 0\n    modK = dict()\n    modK[0] = [0]\n    for i in range(N):\n        sum_A[i + 1] = (sum_A[i] + A[i]) % K\n        if sum_A[i+1] not in modK:\n            modK[sum_A[i+1]] = [i + 1]\n        else:\n            modK[sum_A[i+1]].append(i+1)\n\n    for key in modK:\n        lenK = len(modK[key])\n        for i, a in enumerate(modK[key]):\n            count += bisect_left(modK[key], a + K, i, lenK) - i - 1\n\n    print(count)\n    return 0\n\n\nif __name__ == \"__main__\":\n    solve()\n", "test_IO": {"input": ["5 4\n1 4 2 3 5\n"], "output": ["4\n"]}, "modified_context": "import sys\nfrom bisect import bisect_left\n\n\ndef solve():\n    input = sys.stdin.readline\n    N, K = map(int, input().split())\n    A = [(int(a) % K) - 1 for a in input().split()]\n    SumA = [0 for _ in range(N + 1)]\n\n    count = 0\n    modK = dict()\n    modK[0] = [0]\n    for i in range(N):\n        SumA[i + 1] = (SumA[i] + A[i]) % K\n        if SumA[i+1] not in modK:\n            modK[SumA[i+1]] = [i + 1]\n        else:\n            modK[SumA[i+1]].append(i+1)\n\n    for key in modK:\n        lenK = len(modK[key])\n        for i, a in enumerate(modK[key]):\n            count += bisect_left(modK[key], a + K, i, lenK) - i - 1\n\n    print(count)\n    return 0\n\n\nif __name__ == \"__main__\":\n    solve()\n", "token_boundary_changed": false}
{"id": "Python/90", "code": "n, m = map(int, input().split())\n\ngate_cond = [[int(x) for x in input().split()] for _ in range(m)]\nmax_under_th = max([l[0] for l in gate_cond])\nmin_upper_th = min([l[1] for l in gate_cond])\nif min_upper_th - max_under_th >= 0:\n    print(min_upper_th - max_under_th + 1)\nelse:\n    print(0)\n", "test_IO": {"input": ["4 2\n1 3\n2 4\n"], "output": ["2\n"]}, "modified_context": "n, m = map(int, input().split())\n\nGateCond = [[int(x) for x in input().split()] for _ in range(m)]\nMaxUnderTh = max([l[0] for l in GateCond])\nMinUpperTh = min([l[1] for l in GateCond])\nif MinUpperTh - MaxUnderTh >= 0:\n    print(MinUpperTh - MaxUnderTh + 1)\nelse:\n    print(0)\n", "token_boundary_changed": true}
{"id": "Python/93", "code": "import sys\ndef input(): return sys.stdin.readline().rstrip()\ndef input_nums(): return list(map(int, input().split()))\n\n\ndef main():\n    K, N = input_nums()\n    A = input_nums()\n    dist = []\n    for i in range(len(A)-1):\n        dist.append(A[i+1]-A[i])\n    dist.append(K+A[0]-A[-1])\n    maxv = max(dist)\n    print(sum(dist) - maxv)\n\n\nif __name__ == '__main__':\n    main()\n", "test_IO": {"input": ["20 3\n5 10 15\n"], "output": ["10\n"]}, "modified_context": "import sys\ndef input(): return sys.stdin.readline().rstrip()\ndef InputNums(): return list(map(int, input().split()))\n\n\ndef main():\n    K, N = InputNums()\n    A = InputNums()\n    dist = []\n    for i in range(len(A)-1):\n        dist.append(A[i+1]-A[i])\n    dist.append(K+A[0]-A[-1])\n    maxv = max(dist)\n    print(sum(dist) - maxv)\n\n\nif __name__ == '__main__':\n    main()\n", "token_boundary_changed": true}
{"id": "Python/94", "code": "N = int(input())\nS, T = input().split()\n\nchar_lists = []\n\nfor i, char in enumerate(S):\n    char_lists.append(char)\n    char_lists.append(T[i])\n\nprint(\"\".join(char_lists))\n", "test_IO": {"input": ["2\nip cc\n"], "output": ["icpc\n"]}, "modified_context": "N = int(input())\nS, T = input().split()\n\nCharLists = []\n\nfor i, char in enumerate(S):\n    CharLists.append(char)\n    CharLists.append(T[i])\n\nprint(\"\".join(CharLists))\n", "token_boundary_changed": false}
{"id": "Python/98", "code": "a = [int(input()) for i in range(5)]\n\ndic = {}\n\nfor i in range(5):\n    if str(a[i])[-1] == \"0\":\n        dic.update({i: 0})\n    else:\n        dic.update({i: int(str(a[i])[-1]) - 10})\n\n\nmin_num = [i for i in dic if dic[i] == min(dic.values())][0]\na_sum = sum(a)\ndic.pop(min_num)\nprint(abs(sum(dic.values())) + a_sum)\n", "test_IO": {"input": ["29\n20\n7\n35\n120\n"], "output": ["215\n"]}, "modified_context": "a = [int(input()) for i in range(5)]\n\ndic = {}\n\nfor i in range(5):\n    if str(a[i])[-1] == \"0\":\n        dic.update({i: 0})\n    else:\n        dic.update({i: int(str(a[i])[-1]) - 10})\n\n\nMinNum = [i for i in dic if dic[i] == min(dic.values())][0]\nASum = sum(a)\ndic.pop(MinNum)\nprint(abs(sum(dic.values())) + ASum)\n", "token_boundary_changed": true}
{"id": "Python/108", "code": "n = int(input())\narr = {}\n\nfor i in range(n):\n    s = input()\n    if not s in arr:\n        arr[s] = 1\n    else:\n        arr[s] += 1\n\nmax_count = max(arr.values())\ndic = [key[0] for key in arr.items() if key[1] == max_count]\n\nout_sort = sorted(dic)\nfor i in out_sort:\n    print(i)\n", "test_IO": {"input": ["7\nbeat\nvet\nbeet\nbed\nvet\nbet\nbeet\n"], "output": ["beet\nvet\n"]}, "modified_context": "n = int(input())\narr = {}\n\nfor i in range(n):\n    s = input()\n    if not s in arr:\n        arr[s] = 1\n    else:\n        arr[s] += 1\n\nMaxCount = max(arr.values())\ndic = [key[0] for key in arr.items() if key[1] == MaxCount]\n\nOutSort = sorted(dic)\nfor i in OutSort:\n    print(i)\n", "token_boundary_changed": false}
{"id": "Python/118", "code": "import collections\nimport scipy.misc\nimport sys\nimport numpy as np\nimport math\nfrom operator import itemgetter\nimport itertools\nimport copy\n\n\ndef prime_decomposition(n):\n    i = 2\n    table = []\n    while i * i <= n:\n        while n % i == 0:\n            n /= i\n            table.append(int(i))\n        i += 1\n    if n > 1:\n        table.append(int(n))\n    return table\n\n\ndef digit(i):\n    if i > 0:\n        return digit(i//10) + [i % 10]\n    else:\n        return []\n\n\ndef getNearestValueIndex(list, num):\n\n    idx = np.abs(np.asarray(list) - num).argmin()\n    return idx\n\n\nS = input()\nT = S.split('/')\n\ndate = int(T[1]+T[2])\nif date <= 430:\n    print('Heisei')\nelse:\n    print('TBD')\n", "test_IO": {"input": ["2019/04/30\n"], "output": ["Heisei\n"]}, "modified_context": "import collections\nimport scipy.misc\nimport sys\nimport numpy as np\nimport math\nfrom operator import itemgetter\nimport itertools\nimport copy\n\n\ndef PrimeDecomposition(n):\n    i = 2\n    table = []\n    while i * i <= n:\n        while n % i == 0:\n            n /= i\n            table.append(int(i))\n        i += 1\n    if n > 1:\n        table.append(int(n))\n    return table\n\n\ndef digit(i):\n    if i > 0:\n        return digit(i//10) + [i % 10]\n    else:\n        return []\n\n\ndef getNearestValueIndex(list, num):\n\n    idx = np.abs(np.asarray(list) - num).argmin()\n    return idx\n\n\nS = input()\nT = S.split('/')\n\ndate = int(T[1]+T[2])\nif date <= 430:\n    print('Heisei')\nelse:\n    print('TBD')\n", "token_boundary_changed": true}
{"id": "Python/119", "code": "import re\nimport math\nfrom collections import defaultdict\nimport itertools\nfrom copy import deepcopy\nimport random\nfrom heapq import heappop, heappush\nimport time\nimport os\nimport queue\nimport sys\nimport datetime\nfrom functools import lru_cache\n\nreadline = sys.stdin.readline\nsys.setrecursionlimit(2000000)\n\nalphabet = \"abcdefghijklmnopqrstuvwxyz\"\nmod = int(10**9+7)\ninf = int(10**20)\n\n\ndef yn(b):\n    if b:\n        print(\"yes\")\n    else:\n        print(\"no\")\n\n\ndef Yn(b):\n    if b:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\ndef YN(b):\n    if b:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nclass union_find():\n    def __init__(self, n):\n        self.n = n\n        self.P = [a for a in range(N)]\n        self.rank = [0]*n\n\n    def find(self, x):\n        if (x != self.P[x]):\n            self.P[x] = self.find(self.P[x])\n        return self.P[x]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def link(self, x, y):\n        if self.rank[x] < self.rank[y]:\n            self.P[x] = y\n        elif self.rank[y] < self.rank[x]:\n            self.P[y] = x\n        else:\n            self.P[x] = y\n            self.rank[y] += 1\n\n    def unite(self, x, y):\n        self.link(self.find(x), self.find(y))\n\n    def size(self):\n        S = set()\n        for a in range(self.n):\n            S.add(self.find(a))\n        return len(S)\n\n\ndef is_power(a, b):\n    now = b\n    while now < a:\n        now *= b\n    if now == a:\n        return True\n    else:\n        return False\n\n\ndef bin_(num, size):\n    A = [0]*size\n    for a in range(size):\n        if (num >> (size-a-1)) & 1 == 1:\n            A[a] = 1\n        else:\n            A[a] = 0\n    return A\n\n\ndef get_facs(n, mod_=0):\n    A = [1]*(n+1)\n    for a in range(2, len(A)):\n        A[a] = A[a-1]*a\n        if (mod > 0):\n            A[a] %= mod_\n    return A\n\n\ndef comb(n, r, mod, fac):\n    if (n-r < 0):\n        return 0\n    return (fac[n]*pow(fac[n-r], mod-2, mod)*pow(fac[r], mod-2, mod)) % mod\n\n\ndef next_comb(num, size):\n    x = num & (-num)\n    y = num+x\n    z = num & (~y)\n    z //= x\n    z = z >> 1\n    num = (y | z)\n    if (num >= (1 << size)):\n        return False\n    else:\n        return num\n\n\ndef get_primes(n, type=\"int\"):\n    A = [True]*(n+1)\n    A[0] = False\n    A[1] = False\n    for a in range(2, n+1):\n        if A[a]:\n            for b in range(a*2, n+1, a):\n                A[b] = False\n    if (type == \"bool\"):\n        return A\n    B = []\n    for a in range(n+1):\n        if (A[a]):\n            B.append(a)\n    return B\n\n\ndef is_prime(num):\n    if (num <= 2):\n        return False\n    i = 2\n    while i*i <= num:\n        if (num % i == 0):\n            return False\n        i += 1\n    return True\n\n\ndef ifelse(a, b, c):\n    if a:\n        return b\n    else:\n        return c\n\n\ndef join(A, c=\" \"):\n    n = len(A)\n    A = list(map(str, A))\n    s = \"\"\n    for a in range(n):\n        s += A[a]\n        if (a < n-1):\n            s += c\n    return s\n\n\ndef factorize(n, type_=\"dict\"):\n    b = 2\n    list_ = []\n    while b * b <= n:\n        while n % b == 0:\n            n //= b\n            list_.append(b)\n        b += 1\n    if n > 1:\n        list_.append(n)\n    if type_ == \"dict\":\n        dic = {}\n        for a in list_:\n            if a in dic:\n                dic[a] += 1\n            else:\n                dic[a] = 1\n        return dic\n    elif type_ == \"list\":\n        return list_\n    else:\n        return None\n\n\ndef floor_(n, x=1):\n    return x*(n//x)\n\n\ndef ceil_(n, x=1):\n    return x*((n+x-1)//x)\n\n\ndef hani(x, min_, max_):\n    ret = x\n    if x < min_:\n        ret = min_\n    if x > max_:\n        ret = max_\n    return ret\n\n\ndef seifu(x):\n    return x//abs(x)\n\n\ndef main():\n    n, l = map(int, input().split())\n    S = []\n    for a in range(n):\n        S.append(input())\n    S.sort()\n    print(\"\".join(S))\n\n\nmain()\n", "test_IO": {"input": ["3 3\ndxx\naxx\ncxx\n"], "output": ["axxcxxdxx\n"]}, "modified_context": "import re\nimport math\nfrom collections import defaultdict\nimport itertools\nfrom copy import deepcopy\nimport random\nfrom heapq import heappop, heappush\nimport time\nimport os\nimport queue\nimport sys\nimport datetime\nfrom functools import lru_cache\n\nreadline = sys.stdin.readline\nsys.setrecursionlimit(2000000)\n\nalphabet = \"abcdefghijklmnopqrstuvwxyz\"\nmod = int(10**9+7)\ninf = int(10**20)\n\n\ndef yn(b):\n    if b:\n        print(\"yes\")\n    else:\n        print(\"no\")\n\n\ndef Yn(b):\n    if b:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\ndef YN(b):\n    if b:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nclass UnionFind():\n    def __init__(self, n):\n        self.n = n\n        self.P = [a for a in range(N)]\n        self.rank = [0]*n\n\n    def find(self, x):\n        if (x != self.P[x]):\n            self.P[x] = self.find(self.P[x])\n        return self.P[x]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def link(self, x, y):\n        if self.rank[x] < self.rank[y]:\n            self.P[x] = y\n        elif self.rank[y] < self.rank[x]:\n            self.P[y] = x\n        else:\n            self.P[x] = y\n            self.rank[y] += 1\n\n    def unite(self, x, y):\n        self.link(self.find(x), self.find(y))\n\n    def size(self):\n        S = set()\n        for a in range(self.n):\n            S.add(self.find(a))\n        return len(S)\n\n\ndef IsPower(a, b):\n    now = b\n    while now < a:\n        now *= b\n    if now == a:\n        return True\n    else:\n        return False\n\n\ndef bin_(num, size):\n    A = [0]*size\n    for a in range(size):\n        if (num >> (size-a-1)) & 1 == 1:\n            A[a] = 1\n        else:\n            A[a] = 0\n    return A\n\n\ndef GetFacs(n, mod_=0):\n    A = [1]*(n+1)\n    for a in range(2, len(A)):\n        A[a] = A[a-1]*a\n        if (mod > 0):\n            A[a] %= mod_\n    return A\n\n\ndef comb(n, r, mod, fac):\n    if (n-r < 0):\n        return 0\n    return (fac[n]*pow(fac[n-r], mod-2, mod)*pow(fac[r], mod-2, mod)) % mod\n\n\ndef NextComb(num, size):\n    x = num & (-num)\n    y = num+x\n    z = num & (~y)\n    z //= x\n    z = z >> 1\n    num = (y | z)\n    if (num >= (1 << size)):\n        return False\n    else:\n        return num\n\n\ndef GetPrimes(n, type=\"int\"):\n    A = [True]*(n+1)\n    A[0] = False\n    A[1] = False\n    for a in range(2, n+1):\n        if A[a]:\n            for b in range(a*2, n+1, a):\n                A[b] = False\n    if (type == \"bool\"):\n        return A\n    B = []\n    for a in range(n+1):\n        if (A[a]):\n            B.append(a)\n    return B\n\n\ndef IsPrime(num):\n    if (num <= 2):\n        return False\n    i = 2\n    while i*i <= num:\n        if (num % i == 0):\n            return False\n        i += 1\n    return True\n\n\ndef ifelse(a, b, c):\n    if a:\n        return b\n    else:\n        return c\n\n\ndef join(A, c=\" \"):\n    n = len(A)\n    A = list(map(str, A))\n    s = \"\"\n    for a in range(n):\n        s += A[a]\n        if (a < n-1):\n            s += c\n    return s\n\n\ndef factorize(n, type_=\"dict\"):\n    b = 2\n    list_ = []\n    while b * b <= n:\n        while n % b == 0:\n            n //= b\n            list_.append(b)\n        b += 1\n    if n > 1:\n        list_.append(n)\n    if type_ == \"dict\":\n        dic = {}\n        for a in list_:\n            if a in dic:\n                dic[a] += 1\n            else:\n                dic[a] = 1\n        return dic\n    elif type_ == \"list\":\n        return list_\n    else:\n        return None\n\n\ndef floor_(n, x=1):\n    return x*(n//x)\n\n\ndef ceil_(n, x=1):\n    return x*((n+x-1)//x)\n\n\ndef hani(x, min_, max_):\n    ret = x\n    if x < min_:\n        ret = min_\n    if x > max_:\n        ret = max_\n    return ret\n\n\ndef seifu(x):\n    return x//abs(x)\n\n\ndef main():\n    n, l = map(int, input().split())\n    S = []\n    for a in range(n):\n        S.append(input())\n    S.sort()\n    print(\"\".join(S))\n\n\nmain()\n", "token_boundary_changed": false}
{"id": "Python/148", "code": "from heapq import heappush, heappop, heapify\nfrom collections import deque, defaultdict, Counter\nimport itertools\nfrom itertools import permutations, combinations, accumulate\nimport sys\nimport bisect\nimport string\nimport math\nimport time\n\n\ndef I(): return int(input())\n\n\ndef MI(): return map(int, input().split())\n\n\ndef LI(): return [int(i) for i in input().split()]\n\n\ndef LI_(): return [int(i)-1 for i in input().split()]\n\n\ndef StoI(): return [ord(i)-97 for i in input()]\n\n\ndef ItoS(nn): return chr(nn+97)\n\n\ndef input(): return sys.stdin.readline().rstrip()\n\n\ndef show(*inp, end='\\n'):\n    if show_flg:\n        print(*inp, end=end)\n\n\nYN = ['No', 'Yes']\nMOD = 10**9+7\ninf = float('inf')\nIINF = 10**10\nl_alp = string.ascii_lowercase\nu_alp = string.ascii_uppercase\nts = time.time()\nsys.setrecursionlimit(10**6)\nnums = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n\nshow_flg = False\n\n\ndef main():\n    N = I()\n    s = [0] * N\n    t = [0] * N\n\n    for i in range(N):\n        s[i], t[i] = map(str, input().split())\n        t[i] = int(t[i])\n\n    X = input()\n    xi = 0\n\n    for i in range(N):\n        if s[i] == X:\n            xi = i\n            break\n\n    ans = 0\n\n    for i in range(N):\n        if xi < i:\n            ans += t[i]\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "test_IO": {"input": ["3\ndwango 2\nsixth 5\nprelims 25\ndwango\n"], "output": ["30\n"]}, "modified_context": "from heapq import heappush, heappop, heapify\nfrom collections import deque, defaultdict, Counter\nimport itertools\nfrom itertools import permutations, combinations, accumulate\nimport sys\nimport bisect\nimport string\nimport math\nimport time\n\n\ndef I(): return int(input())\n\n\ndef MI(): return map(int, input().split())\n\n\ndef LI(): return [int(i) for i in input().split()]\n\n\ndef LI_(): return [int(i)-1 for i in input().split()]\n\n\ndef StoI(): return [ord(i)-97 for i in input()]\n\n\ndef ItoS(nn): return chr(nn+97)\n\n\ndef input(): return sys.stdin.readline().rstrip()\n\n\ndef show(*inp, end='\\n'):\n    if ShowFlg:\n        print(*inp, end=end)\n\n\nYN = ['No', 'Yes']\nMOD = 10**9+7\ninf = float('inf')\nIINF = 10**10\nLAlp = string.ascii_lowercase\nUAlp = string.ascii_uppercase\nts = time.time()\nsys.setrecursionlimit(10**6)\nnums = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n\nShowFlg = False\n\n\ndef main():\n    N = I()\n    s = [0] * N\n    t = [0] * N\n\n    for i in range(N):\n        s[i], t[i] = map(str, input().split())\n        t[i] = int(t[i])\n\n    X = input()\n    xi = 0\n\n    for i in range(N):\n        if s[i] == X:\n            xi = i\n            break\n\n    ans = 0\n\n    for i in range(N):\n        if xi < i:\n            ans += t[i]\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "token_boundary_changed": true}
{"id": "Python/151", "code": "N = int(input())\nH = list(map(int, list(input().split())))\n\ncount_best, count_tmp = 0, 0\n\nfor i in range(N-1):\n    if H[i] >= H[i+1]:\n        count_tmp += 1\n    else:\n        if count_tmp > count_best:\n            count_best = count_tmp\n\n        count_tmp = 0\n\nif count_tmp > count_best:\n    count_best = count_tmp\n\nprint(count_best)\n", "test_IO": {"input": ["5\n10 4 8 7 3\n"], "output": ["2\n"]}, "modified_context": "N = int(input())\nH = list(map(int, list(input().split())))\n\nCountBest, CountTmp = 0, 0\n\nfor i in range(N-1):\n    if H[i] >= H[i+1]:\n        CountTmp += 1\n    else:\n        if CountTmp > CountBest:\n            CountBest = CountTmp\n\n        CountTmp = 0\n\nif CountTmp > CountBest:\n    CountBest = CountTmp\n\nprint(CountBest)\n", "token_boundary_changed": true}
{"id": "Python/154", "code": "from collections import deque\nfrom itertools import product, permutations, combinations\nimport sys\nsys.setrecursionlimit(1 << 25)\nreadline = sys.stdin.buffer.readline\nread = sys.stdin.readline\nra = range\nenu = enumerate\n\n\ndef exit(*argv, **kwarg):\n    print(*argv, **kwarg)\n    sys.exit()\n\n\ndef mina(*argv, sub=1): return list(map(lambda x: x - sub, argv))\n\n\ndef a_int(): return int(readline())\n\n\ndef ints(): return list(map(int, readline().split()))\n\n\ndef read_col(H):\n\n    ret = []\n    for _ in range(H):\n        ret.append(list(map(int, readline().split())))\n    return tuple(map(list, zip(*ret)))\n\n\ndef read_map_as(H, replace={'#': 1, '.': 0}, pad=None):\n\n    if pad is None:\n        ret = []\n        for _ in range(H):\n            ret.append([replace[s] for s in read()[:-1]])\n\n    else:\n        ret = [[pad] * (W + 2)]\n        for _ in range(H):\n            ret.append([pad] + [replace[s] for s in read()[:-1]] + [pad])\n        ret.append([pad] * (W + 2))\n\n    return ret\n\n\ndef grid_dijkstra(grid, si: int, sj: int):\n\n    from heapq import heappop, heappush\n    H = len(grid)\n    W = len(grid[0])\n    D = [[-1] * W for _ in [0] * H]\n    que = [(0, si, sj)]\n    while que:\n        c, i, j = heappop(que)\n        if D[i][j] != -1:\n            continue\n        D[i][j] = c\n        for di, dj in product([-2, -1, 0, 1, 2], repeat=2):\n            ni, nj = i + di, j + dj\n            if not (0 <= ni < H and 0 <= nj < W) or D[ni][nj] != -1 or ni == nj == 0 or grid[ni][nj] == 1:\n                continue\n            if (di == 0 and abs(dj) == 1) or (dj == 0 and abs(di) == 1):\n                nc = c\n            else:\n                nc = c + 1\n            heappush(que, (nc, ni, nj))\n    return D\n\n\nMOD = 10**9 + 7\nINF = 2**31\n\n\nH, W = ints()\nsi, sj = mina(*ints())\nti, tj = mina(*ints())\n\nS = read_map_as(H)\nD = [[-1] * W for _ in [0] * H]\nque = deque([(0, si, sj)])\nwhile que:\n    c, i, j = que.popleft()\n    if D[i][j] != -1:\n        continue\n    D[i][j] = c\n    for di, dj in product([-2, -1, 0, 1, 2], repeat=2):\n        ni, nj = i + di, j + dj\n        if not (0 <= ni < H and 0 <= nj < W) or D[ni][nj] != -1 or ni == nj == 0 or S[ni][nj] == 1:\n            continue\n        if (di == 0 and abs(dj) == 1) or (dj == 0 and abs(di) == 1):\n            que.appendleft((c, ni, nj))\n        else:\n            que.append((c + 1, ni, nj))\n\nprint(D[ti][tj])\n", "test_IO": {"input": ["4 4\n1 1\n4 4\n..#.\n..#.\n.#..\n.#..\n"], "output": ["1\n"]}, "modified_context": "from collections import deque\nfrom itertools import product, permutations, combinations\nimport sys\nsys.setrecursionlimit(1 << 25)\nreadline = sys.stdin.buffer.readline\nread = sys.stdin.readline\nra = range\nenu = enumerate\n\n\ndef exit(*argv, **kwarg):\n    print(*argv, **kwarg)\n    sys.exit()\n\n\ndef mina(*argv, sub=1): return list(map(lambda x: x - sub, argv))\n\n\ndef AInt(): return int(readline())\n\n\ndef ints(): return list(map(int, readline().split()))\n\n\ndef ReadCol(H):\n\n    ret = []\n    for _ in range(H):\n        ret.append(list(map(int, readline().split())))\n    return tuple(map(list, zip(*ret)))\n\n\ndef ReadMapAs(H, replace={'#': 1, '.': 0}, pad=None):\n\n    if pad is None:\n        ret = []\n        for _ in range(H):\n            ret.append([replace[s] for s in read()[:-1]])\n\n    else:\n        ret = [[pad] * (W + 2)]\n        for _ in range(H):\n            ret.append([pad] + [replace[s] for s in read()[:-1]] + [pad])\n        ret.append([pad] * (W + 2))\n\n    return ret\n\n\ndef GridDijkstra(grid, si: int, sj: int):\n\n    from heapq import heappop, heappush\n    H = len(grid)\n    W = len(grid[0])\n    D = [[-1] * W for _ in [0] * H]\n    que = [(0, si, sj)]\n    while que:\n        c, i, j = heappop(que)\n        if D[i][j] != -1:\n            continue\n        D[i][j] = c\n        for di, dj in product([-2, -1, 0, 1, 2], repeat=2):\n            ni, nj = i + di, j + dj\n            if not (0 <= ni < H and 0 <= nj < W) or D[ni][nj] != -1 or ni == nj == 0 or grid[ni][nj] == 1:\n                continue\n            if (di == 0 and abs(dj) == 1) or (dj == 0 and abs(di) == 1):\n                nc = c\n            else:\n                nc = c + 1\n            heappush(que, (nc, ni, nj))\n    return D\n\n\nMOD = 10**9 + 7\nINF = 2**31\n\n\nH, W = ints()\nsi, sj = mina(*ints())\nti, tj = mina(*ints())\n\nS = ReadMapAs(H)\nD = [[-1] * W for _ in [0] * H]\nque = deque([(0, si, sj)])\nwhile que:\n    c, i, j = que.popleft()\n    if D[i][j] != -1:\n        continue\n    D[i][j] = c\n    for di, dj in product([-2, -1, 0, 1, 2], repeat=2):\n        ni, nj = i + di, j + dj\n        if not (0 <= ni < H and 0 <= nj < W) or D[ni][nj] != -1 or ni == nj == 0 or S[ni][nj] == 1:\n            continue\n        if (di == 0 and abs(dj) == 1) or (dj == 0 and abs(di) == 1):\n            que.appendleft((c, ni, nj))\n        else:\n            que.append((c + 1, ni, nj))\n\nprint(D[ti][tj])\n", "token_boundary_changed": false}
{"id": "Python/157", "code": "n = int(input())\np = [int(x) for x in input().split()]\np_copy = p[:]\n\np.sort()\n\ncount = 0\nfor i in range(n):\n    if p[i] != p_copy[i]:\n        count += 1\n\nif count == 0 or count == 2:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "test_IO": {"input": ["5\n5 2 3 4 1\n"], "output": ["YES\n"]}, "modified_context": "n = int(input())\np = [int(x) for x in input().split()]\nPCopy = p[:]\n\np.sort()\n\ncount = 0\nfor i in range(n):\n    if p[i] != PCopy[i]:\n        count += 1\n\nif count == 0 or count == 2:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "token_boundary_changed": true}
{"id": "Python/158", "code": "N = int(input())\ncapacity_list = [int(input()) for _ in range(5)]\ncapacity_list.sort()\nbottle_neck = capacity_list[0]\nprint(4+int((N+bottle_neck-1)/bottle_neck))\n", "test_IO": {"input": ["5\n3\n2\n4\n3\n5\n"], "output": ["7\n"]}, "modified_context": "N = int(input())\nCapacityList = [int(input()) for _ in range(5)]\nCapacityList.sort()\nBottleNeck = CapacityList[0]\nprint(4+int((N+BottleNeck-1)/BottleNeck))\n", "token_boundary_changed": false}
{"id": "Python/174", "code": "import bisect\n\nN = int(input())\narr = [111, 222, 333, 444, 555, 666, 777, 888, 999]\nans_idx = bisect.bisect_left(arr, N)\nprint(arr[ans_idx])\n", "test_IO": {"input": ["111\n"], "output": ["111\n"]}, "modified_context": "import bisect\n\nN = int(input())\narr = [111, 222, 333, 444, 555, 666, 777, 888, 999]\nAnsIdx = bisect.bisect_left(arr, N)\nprint(arr[AnsIdx])\n", "token_boundary_changed": false}
{"id": "Python/175", "code": "import numpy\nn = int(input())\na = []\nfor i in range(2):\n    a.append(list(map(int, input().split())))\na[1] = a[1][::-1]\nres_0 = numpy.cumsum(a[0])\nres_1 = numpy.cumsum(a[1])\nans = 0\nfor i in range(n):\n    check = res_0[i] + res_1[n-1-i]\n    ans = max(ans, check)\nprint(ans)\n", "test_IO": {"input": ["5\n3 2 2 4 1\n1 2 2 2 1\n"], "output": ["14\n"]}, "modified_context": "import numpy\nn = int(input())\na = []\nfor i in range(2):\n    a.append(list(map(int, input().split())))\na[1] = a[1][::-1]\nRes0 = numpy.cumsum(a[0])\nRes1 = numpy.cumsum(a[1])\nans = 0\nfor i in range(n):\n    check = Res0[i] + Res1[n-1-i]\n    ans = max(ans, check)\nprint(ans)\n", "token_boundary_changed": false}
{"id": "Python/196", "code": "from operator import itemgetter\n\n\nn, k = map(int, input().split())\ninfo = [list(map(int, input().split())) for i in range(n)]\n\ninfo = sorted(info, key=itemgetter(1), reverse=True)\n\nselected = info[0:k]\nselected_only = []\nselected_chohuku = []\nunselected_only = []\nmemo = {}\nfor t, d in selected:\n    if t not in memo:\n        memo[t] = 1\n        selected_only.append(d)\n    else:\n        selected_chohuku.append(d)\n\ncnt_type = len(memo)\nfor t, d in info[k:]:\n    if t not in memo:\n        memo[t] = 1\n        unselected_only.append(d)\n\n\nsum_select = sum(selected_chohuku) + sum(selected_only)\nans = cnt_type*cnt_type + sum_select\n\nunselected_only = unselected_only[::-1]\nfor i in range(min(len(selected_chohuku), len(unselected_only))):\n    cnt_type += 1\n    sum_select += unselected_only[-1]\n    sum_select -= selected_chohuku[-1]\n    del unselected_only[-1]\n    del selected_chohuku[-1]\n    tmp = cnt_type*cnt_type + sum_select\n    ans = max(ans, tmp)\nprint(ans)\n", "test_IO": {"input": ["5 3\n1 9\n1 7\n2 6\n2 5\n3 1\n"], "output": ["26\n"]}, "modified_context": "from operator import itemgetter\n\n\nn, k = map(int, input().split())\ninfo = [list(map(int, input().split())) for i in range(n)]\n\ninfo = sorted(info, key=itemgetter(1), reverse=True)\n\nselected = info[0:k]\nSelectedOnly = []\nSelectedChohuku = []\nUnselectedOnly = []\nmemo = {}\nfor t, d in selected:\n    if t not in memo:\n        memo[t] = 1\n        SelectedOnly.append(d)\n    else:\n        SelectedChohuku.append(d)\n\nCntType = len(memo)\nfor t, d in info[k:]:\n    if t not in memo:\n        memo[t] = 1\n        UnselectedOnly.append(d)\n\n\nSumSelect = sum(SelectedChohuku) + sum(SelectedOnly)\nans = CntType*CntType + SumSelect\n\nUnselectedOnly = UnselectedOnly[::-1]\nfor i in range(min(len(SelectedChohuku), len(UnselectedOnly))):\n    CntType += 1\n    SumSelect += UnselectedOnly[-1]\n    SumSelect -= SelectedChohuku[-1]\n    del UnselectedOnly[-1]\n    del SelectedChohuku[-1]\n    tmp = CntType*CntType + SumSelect\n    ans = max(ans, tmp)\nprint(ans)\n", "token_boundary_changed": true}
