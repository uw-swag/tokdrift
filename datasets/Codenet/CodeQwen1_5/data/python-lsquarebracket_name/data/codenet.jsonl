{"id": "Python/0", "code": "s = list(input())\nmods = [0]*(len(s))\ncountRemainder = [0] * 2019\ncnt = 0\n\n\nm = 1\nmod = 0\nfor i in range(len(s)):\n    mod += int(s[len(s) - i - 1]) * m\n\n    mod %= 2019\n    m *= 10\n    m %= 2019\n\n    countRemainder[mod] += 1\n\ncountRemainder[0] += 1\n\nfor i in range(2019):\n    cnt += int(countRemainder[i] * (countRemainder[i] - 1) / 2)\n\nprint(cnt)\n", "test_IO": {"input": ["1817181712114\n"], "output": ["3\n"]}, "modified_context": "s = list(input())\nmods = [0]*(len(s))\ncountRemainder = [0] * 2019\ncnt = 0\n\n\nm = 1\nmod = 0\nfor i in range(len(s)):\n    mod += int(s[ len(s) - i - 1]) * m\n\n    mod %= 2019\n    m *= 10\n    m %= 2019\n\n    countRemainder[ mod] += 1\n\ncountRemainder[0] += 1\n\nfor i in range(2019):\n    cnt += int(countRemainder[ i] * (countRemainder[ i] - 1) / 2)\n\nprint(cnt)\n", "token_boundary_changed": false}
{"id": "Python/4", "code": "n = int(input())\nt = list(map(int, input().split()))\nm = int(input())\nfor i in range(m):\n    p, x = map(int, input().split())\n    s = 0\n    for j in range(len(t)):\n        if j == p-1:\n            s += x\n        else:\n            s += t[j]\n    print(s)\n", "test_IO": {"input": ["3\n2 1 4\n2\n1 1\n2 3\n"], "output": ["6\n9\n"]}, "modified_context": "n = int(input())\nt = list(map(int, input().split()))\nm = int(input())\nfor i in range(m):\n    p, x = map(int, input().split())\n    s = 0\n    for j in range(len(t)):\n        if j == p-1:\n            s += x\n        else:\n            s += t[ j]\n    print(s)\n", "token_boundary_changed": false}
{"id": "Python/7", "code": "N, M = map(int, input().split())\n*A, = map(int, input().split())\nA = sorted(A)\n\nwhile M:\n    A[-1] //= 2\n    M -= 1\n    i = -2\n    while M and (-N <= i and A[i] >= A[-1]):\n        A[i] //= 2\n        M -= 1\n        i -= 1\n    A.sort()\n\nprint(sum(A))\n", "test_IO": {"input": ["3 3\n2 13 8\n"], "output": ["9\n"]}, "modified_context": "N, M = map(int, input().split())\n*A, = map(int, input().split())\nA = sorted(A)\n\nwhile M:\n    A[-1] //= 2\n    M -= 1\n    i = -2\n    while M and (-N <= i and A[ i] >= A[-1]):\n        A[ i] //= 2\n        M -= 1\n        i -= 1\n    A.sort()\n\nprint(sum(A))\n", "token_boundary_changed": false}
{"id": "Python/8", "code": "import sys\nsys.setrecursionlimit(100000)\n\n\ndef dfs(i):\n    for v, w in V.get(i, []):\n        if (w % 2) == 0:\n            if color[v] == -1:\n                color[v] = color[i]\n            elif color[v] == color[i]:\n                continue\n            elif color[v] != color[i]:\n                return False\n        else:\n            if color[v] == -1:\n                color[v] = 0 if color[i] else 1\n            elif color[v] == color[i]:\n                return False\n            elif color[v] != color[i]:\n                continue\n        dfs(v)\n    return True\n\n\nif __name__ == '__main__':\n    n = int(input())\n    V = {}\n    color = {}\n    for i in range(1, n):\n        u, v, w = map(int, input().split())\n        if not V.get(u, False):\n            V[u] = [[v, w]]\n        else:\n            V[u].append([v, w])\n\n        if not V.get(v, False):\n            V[v] = [[u, w]]\n        else:\n            V[v].append([u, w])\n\n    for i in range(1, n+1):\n        color[i] = -1\n\n    while True:\n        i = 0\n        for j in range(1, n+1):\n            if color[j] == -1:\n                i = j\n                color[i] = 0\n                break\n        if i == 0:\n            for j in range(1, n+1):\n                print(color[j])\n            break\n        else:\n            if not dfs(i):\n                print('No')\n                break\n", "test_IO": {"input": ["3\n1 2 2\n2 3 1\n"], "output": ["0\n0\n1\n"]}, "modified_context": "import sys\nsys.setrecursionlimit(100000)\n\n\ndef dfs(i):\n    for v, w in V.get(i, []):\n        if (w % 2) == 0:\n            if color[ v] == -1:\n                color[ v] = color[ i]\n            elif color[ v] == color[ i]:\n                continue\n            elif color[ v] != color[ i]:\n                return False\n        else:\n            if color[ v] == -1:\n                color[ v] = 0 if color[ i] else 1\n            elif color[ v] == color[ i]:\n                return False\n            elif color[ v] != color[ i]:\n                continue\n        dfs(v)\n    return True\n\n\nif __name__ == '__main__':\n    n = int(input())\n    V = {}\n    color = {}\n    for i in range(1, n):\n        u, v, w = map(int, input().split())\n        if not V.get(u, False):\n            V[ u] = [[ v, w]]\n        else:\n            V[ u].append([ v, w])\n\n        if not V.get(v, False):\n            V[ v] = [[ u, w]]\n        else:\n            V[ v].append([ u, w])\n\n    for i in range(1, n+1):\n        color[ i] = -1\n\n    while True:\n        i = 0\n        for j in range(1, n+1):\n            if color[ j] == -1:\n                i = j\n                color[ i] = 0\n                break\n        if i == 0:\n            for j in range(1, n+1):\n                print(color[ j])\n            break\n        else:\n            if not dfs(i):\n                print('No')\n                break\n", "token_boundary_changed": false}
{"id": "Python/10", "code": "s = input()\nif len(s) < 26:\n    for i in range(26):\n        c = chr(ord(\"a\")+i)\n        if c not in s:\n            print(s+c)\n            exit()\nelse:\n    for i in reversed(range(1, 26)):\n        if s[i-1] < s[i]:\n            s1 = s[0:i-1]\n            for j in range(26):\n                c = chr(ord(\"a\")+j)\n                if c > s[i-1] and c not in s1:\n                    print(s1+c)\n                    exit()\n    print(-1)\n", "test_IO": {"input": ["atcoder\n"], "output": ["atcoderb\n"]}, "modified_context": "s = input()\nif len(s) < 26:\n    for i in range(26):\n        c = chr(ord(\"a\")+i)\n        if c not in s:\n            print(s+c)\n            exit()\nelse:\n    for i in reversed(range(1, 26)):\n        if s[ i-1] < s[ i]:\n            s1 = s[0:i-1]\n            for j in range(26):\n                c = chr(ord(\"a\")+j)\n                if c > s[ i-1] and c not in s1:\n                    print(s1+c)\n                    exit()\n    print(-1)\n", "token_boundary_changed": false}
{"id": "Python/12", "code": "N = int(input())\nA = []\nfor _ in range(2):\n    s = list(map(int, input().split()))\n    A.append(s)\n\n\nans = []\n\ncount = 0\nfor i in range(N):\n    baselis = A[0]\n    groundlis = A[1]\n    count = 0\n    count = count + sum(baselis[0:i+1]) + sum(groundlis[i:N+1])\n    ans.append(count)\n\nprint(max(ans))\n", "test_IO": {"input": ["5\n3 2 2 4 1\n1 2 2 2 1\n"], "output": ["14\n"]}, "modified_context": "N = int(input())\nA = []\nfor _ in range(2):\n    s = list(map(int, input().split()))\n    A.append(s)\n\n\nans = []\n\ncount = 0\nfor i in range(N):\n    baselis = A[0]\n    groundlis = A[1]\n    count = 0\n    count = count + sum(baselis[0:i+1]) + sum(groundlis[ i:N+1])\n    ans.append(count)\n\nprint(max(ans))\n", "token_boundary_changed": false}
{"id": "Python/16", "code": "s = input()\nt = input()\n\n\ndef check(a, b):\n    s = 0\n    for i, j in zip(a, b):\n        s += i != j\n    return s\n\n\nans = 10**6\nfor i in range(len(s)):\n    a = s[i:]\n    if len(a) >= len(t):\n        ans = min(ans, check(t, a[:len(t)]))\nprint(ans)\n", "test_IO": {"input": ["cabacc\nabc\n"], "output": ["1\n"]}, "modified_context": "s = input()\nt = input()\n\n\ndef check(a, b):\n    s = 0\n    for i, j in zip(a, b):\n        s += i != j\n    return s\n\n\nans = 10**6\nfor i in range(len(s)):\n    a = s[ i:]\n    if len(a) >= len(t):\n        ans = min(ans, check(t, a[:len(t)]))\nprint(ans)\n", "token_boundary_changed": false}
{"id": "Python/18", "code": "x, y, a, b, c = map(int, input().split())\np = sorted([int(i) for i in input().split()], reverse=True)[:x]\nq = sorted([int(i) for i in input().split()], reverse=True)[:y]\nr = sorted([int(i) for i in input().split()], reverse=True)\npq = sorted(p+q)\nfor i in range(min(x+y, a+b, c)):\n    if pq[i] < r[i]:\n        pq[i] = r[i]\nprint(sum(pq))\n", "test_IO": {"input": ["1 2 2 2 1\n2 4\n5 1\n3\n"], "output": ["12\n"]}, "modified_context": "x, y, a, b, c = map(int, input().split())\np = sorted([ int(i) for i in input().split()], reverse=True)[:x]\nq = sorted([ int(i) for i in input().split()], reverse=True)[:y]\nr = sorted([ int(i) for i in input().split()], reverse=True)\npq = sorted(p+q)\nfor i in range(min(x+y, a+b, c)):\n    if pq[ i] < r[ i]:\n        pq[ i] = r[ i]\nprint(sum(pq))\n", "token_boundary_changed": false}
{"id": "Python/19", "code": "n = int(input())\na = list(map(int, input().split()))\n\nm1 = int(sum([a[i] * ((-1)**i) for i in range(n)]) / 2)\n\nresult = str(m1)\n\nm = [None] * n\nm[0] = m1\nfor i in range(1, n):\n    m[i] = a[i-1] - m[i-1]\n\nprint(' '.join([str(x*2) for x in m]))\n", "test_IO": {"input": ["3\n2 2 4\n"], "output": ["4 0 4\n"]}, "modified_context": "n = int(input())\na = list(map(int, input().split()))\n\nm1 = int(sum([ a[ i] * ((-1)**i) for i in range(n)]) / 2)\n\nresult = str(m1)\n\nm = [ None] * n\nm[0] = m1\nfor i in range(1, n):\n    m[ i] = a[ i-1] - m[ i-1]\n\nprint(' '.join([ str(x*2) for x in m]))\n", "token_boundary_changed": false}
{"id": "Python/22", "code": "n = int(input())\nprint(len(set([input() for _ in range(n)])))\n", "test_IO": {"input": ["4\n10\n8\n8\n6\n"], "output": ["3\n"]}, "modified_context": "n = int(input())\nprint(len(set([ input() for _ in range(n)])))\n", "token_boundary_changed": false}
{"id": "Python/25", "code": "from itertools import combinations_with_replacement\nimport sys\n\n\ndef LI(): return map(int, sys.stdin.readline().rstrip().split())\n\n\nN, M, Q = LI()\n\nQ_groups = []\nfor _ in range(Q):\n    Q_groups.append([*LI()])\n\nmax_score = 0\nfor p in combinations_with_replacement(range(1, M + 1), r=N):\n    temp_score = 0\n    for q in Q_groups:\n        if p[q[1] - 1] - p[q[0] - 1] == q[2]:\n            temp_score += q[3]\n    max_score = max(max_score, temp_score)\n\nprint(max_score)\n", "test_IO": {"input": ["3 4 3\n1 3 3 100\n1 2 2 10\n2 3 2 10\n"], "output": ["110\n"]}, "modified_context": "from itertools import combinations_with_replacement\nimport sys\n\n\ndef LI(): return map(int, sys.stdin.readline().rstrip().split())\n\n\nN, M, Q = LI()\n\nQ_groups = []\nfor _ in range(Q):\n    Q_groups.append([*LI()])\n\nmax_score = 0\nfor p in combinations_with_replacement(range(1, M + 1), r=N):\n    temp_score = 0\n    for q in Q_groups:\n        if p[ q[1] - 1] - p[ q[0] - 1] == q[2]:\n            temp_score += q[3]\n    max_score = max(max_score, temp_score)\n\nprint(max_score)\n", "token_boundary_changed": false}
{"id": "Python/26", "code": "strn = input()\nn = int(strn)\nshichigolist = [\"3\", \"5\", \"7\"]\nshichigo = [[] for _ in range(len(strn))]\nfor i in range(len(strn)):\n    if i == 0:\n        for j in shichigolist:\n            shichigo[i].append(j)\n    else:\n        for j in shichigo[i-1]:\n            for k in shichigolist:\n                shichigo[i].append(j+k)\ntarget = len(strn)-1\nfor i in range(len(strn)):\n    for j in shichigo[i][:]:\n        if i == target:\n            if int(j) > n:\n                shichigo[target].remove(j)\n            elif j.count(\"3\") == 0 or j.count(\"5\") == 0 or j.count(\"7\") == 0:\n                shichigo[target].remove(j)\n        else:\n            if j.count(\"3\") == 0 or j.count(\"5\") == 0 or j.count(\"7\") == 0:\n                shichigo[i].remove(j)\n\nprint(sum([len(shichigo[i]) for i in range(len(strn))]))\n", "test_IO": {"input": ["575\n"], "output": ["4\n"]}, "modified_context": "strn = input()\nn = int(strn)\nshichigolist = [\"3\", \"5\", \"7\"]\nshichigo = [[] for _ in range(len(strn))]\nfor i in range(len(strn)):\n    if i == 0:\n        for j in shichigolist:\n            shichigo[ i].append(j)\n    else:\n        for j in shichigo[ i-1]:\n            for k in shichigolist:\n                shichigo[ i].append(j+k)\ntarget = len(strn)-1\nfor i in range(len(strn)):\n    for j in shichigo[ i][:]:\n        if i == target:\n            if int(j) > n:\n                shichigo[ target].remove(j)\n            elif j.count(\"3\") == 0 or j.count(\"5\") == 0 or j.count(\"7\") == 0:\n                shichigo[ target].remove(j)\n        else:\n            if j.count(\"3\") == 0 or j.count(\"5\") == 0 or j.count(\"7\") == 0:\n                shichigo[ i].remove(j)\n\nprint(sum([ len(shichigo[ i]) for i in range(len(strn))]))\n", "token_boundary_changed": false}
{"id": "Python/28", "code": "N = int(input())\nA = list(map(int, input().split()))\nB = [0] * N\n\nfor i in range(N - 1, -1, -1):\n    tmp_sum = 0\n    for j in range((i + 1) * 2 - 1, N, i + 1):\n        tmp_sum += B[j]\n        tmp_sum %= 2\n    B[i] = tmp_sum ^ A[i]\n\nprint(sum(B))\nprint(*[i + 1 for i, b in enumerate(B) if b == 1])\n", "test_IO": {"input": ["3\n1 0 0\n"], "output": ["1\n1\n"]}, "modified_context": "N = int(input())\nA = list(map(int, input().split()))\nB = [0] * N\n\nfor i in range(N - 1, -1, -1):\n    tmp_sum = 0\n    for j in range((i + 1) * 2 - 1, N, i + 1):\n        tmp_sum += B[ j]\n        tmp_sum %= 2\n    B[ i] = tmp_sum ^ A[ i]\n\nprint(sum(B))\nprint(*[ i + 1 for i, b in enumerate(B) if b == 1])\n", "token_boundary_changed": false}
{"id": "Python/30", "code": "s = input()\nalphabets = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\",\n             \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nfor i in range(len(alphabets)):\n    if alphabets[i] == s:\n        print(alphabets[i+1])\n", "test_IO": {"input": ["a\n"], "output": ["b\n"]}, "modified_context": "s = input()\nalphabets = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\",\n             \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nfor i in range(len(alphabets)):\n    if alphabets[ i] == s:\n        print(alphabets[ i+1])\n", "token_boundary_changed": false}
{"id": "Python/32", "code": "import copy\n\n\ndef solve():\n    S_d = list(input())\n    T = list(input())\n\n    end = len(S_d) - 1\n    first = end - len(T) + 1\n    while first >= 0:\n        t_i = 0\n        for s_i in range(first, end+1):\n            if T[t_i] != S_d[s_i] and S_d[s_i] != '?':\n                break\n            t_i += 1\n        else:\n            break\n\n        first -= 1\n        end -= 1\n\n    else:\n        print('UNRESTORABLE')\n        exit(0)\n\n    ans = copy.deepcopy(S_d)\n    t_i = 0\n    for i in range(first, end+1):\n        ans[i] = T[t_i]\n        t_i += 1\n\n    ans = ''.join(ans).replace('?', 'a')\n    print(ans)\n\n\nif __name__ == '__main__':\n    solve()\n", "test_IO": {"input": ["?tc????\ncoder\n"], "output": ["atcoder\n"]}, "modified_context": "import copy\n\n\ndef solve():\n    S_d = list(input())\n    T = list(input())\n\n    end = len(S_d) - 1\n    first = end - len(T) + 1\n    while first >= 0:\n        t_i = 0\n        for s_i in range(first, end+1):\n            if T[ t_i] != S_d[ s_i] and S_d[ s_i] != '?':\n                break\n            t_i += 1\n        else:\n            break\n\n        first -= 1\n        end -= 1\n\n    else:\n        print('UNRESTORABLE')\n        exit(0)\n\n    ans = copy.deepcopy(S_d)\n    t_i = 0\n    for i in range(first, end+1):\n        ans[ i] = T[ t_i]\n        t_i += 1\n\n    ans = ''.join(ans).replace('?', 'a')\n    print(ans)\n\n\nif __name__ == '__main__':\n    solve()\n", "token_boundary_changed": false}
{"id": "Python/34", "code": "import math\nN, D = map(int, input().split())\nmat = []\nfor d in range(N):\n    mat.append([int(x) for x in input().split()])\n\nc = 0\nfor i in range(len(mat)-1):\n    for j in range(i+1, len(mat)):\n        dist = math.sqrt(sum([(x-y)**2 for x, y in zip(mat[i], mat[j])]))\n        if int(dist) == dist:\n            c += 1\nprint(c)\n", "test_IO": {"input": ["3 2\n1 2\n5 5\n-2 8\n"], "output": ["1\n"]}, "modified_context": "import math\nN, D = map(int, input().split())\nmat = []\nfor d in range(N):\n    mat.append([ int(x) for x in input().split()])\n\nc = 0\nfor i in range(len(mat)-1):\n    for j in range(i+1, len(mat)):\n        dist = math.sqrt(sum([(x-y)**2 for x, y in zip(mat[ i], mat[ j])]))\n        if int(dist) == dist:\n            c += 1\nprint(c)\n", "token_boundary_changed": false}
{"id": "Python/39", "code": "h, w, ka = map(int, input().split())\nmat = [list(input()) for i in range(h)]\nans = 0\nfor i in range(2**(h+w)):\n    b = bin(i)[2:].zfill(h+w)\n    rs = b[:h]\n    cs = b[h:]\n    ct = 0\n    for l in range(h):\n        for k in range(w):\n            if mat[l][k] == '#' and rs[l] == '0' and cs[k] == '0':\n                ct += 1\n    if ct == ka:\n        ans += 1\nprint(ans)\n", "test_IO": {"input": ["2 3 2\n..#\n###\n"], "output": ["5\n"]}, "modified_context": "h, w, ka = map(int, input().split())\nmat = [ list(input()) for i in range(h)]\nans = 0\nfor i in range(2**(h+w)):\n    b = bin(i)[2:].zfill(h+w)\n    rs = b[:h]\n    cs = b[ h:]\n    ct = 0\n    for l in range(h):\n        for k in range(w):\n            if mat[ l][ k] == '#' and rs[ l] == '0' and cs[ k] == '0':\n                ct += 1\n    if ct == ka:\n        ans += 1\nprint(ans)\n", "token_boundary_changed": false}
{"id": "Python/40", "code": "s = input()\nq = int(input())\nqs = [input().split() for i in range(q)]\nn = False\nleft = right = \"\"\nfor operation in qs:\n    if operation[0] == '1':\n        n = not n\n    if operation[0] == '2':\n        t, f, c = operation\n        f = int(f)\n        if n:\n            f = 1 if f != 1 else 2\n        if f == 1:\n            left = c+left\n        elif f == 2:\n            right += c\ns = left+s+right\nprint(s[::-1] if n else s)\n", "test_IO": {"input": ["a\n4\n2 1 p\n1\n2 2 c\n1\n"], "output": ["cpa\n"]}, "modified_context": "s = input()\nq = int(input())\nqs = [ input().split() for i in range(q)]\nn = False\nleft = right = \"\"\nfor operation in qs:\n    if operation[0] == '1':\n        n = not n\n    if operation[0] == '2':\n        t, f, c = operation\n        f = int(f)\n        if n:\n            f = 1 if f != 1 else 2\n        if f == 1:\n            left = c+left\n        elif f == 2:\n            right += c\ns = left+s+right\nprint(s[::-1] if n else s)\n", "token_boundary_changed": false}
{"id": "Python/41", "code": "def bubbleSort(cards):\n    n = len(cards)\n    for i in range(0, n):\n        for j in range(n-1, i, -1):\n            if int(cards[j][1]) < int(cards[j-1][1]):\n                cards[j], cards[j-1] = cards[j-1], cards[j]\n\n    print(\" \".join(map(str, cards)))\n\n\ndef selectionSort(cards):\n    n = len(cards)\n    for i in range(0, n):\n        mini = i\n        for j in range(i, n):\n            if int(cards[j][1]) < int(cards[mini][1]):\n                mini = j\n        if mini != i:\n            cards[i], cards[mini] = cards[mini], cards[i]\n\n    print(\" \".join(map(str, cards)))\n\n\nn = int(input())\ncards = input().split(\" \")\ncards2 = list(cards)\nbubbleSort(cards)\nprint(\"Stable\")\nselectionSort(cards2)\nif \" \".join(map(str, cards2)) == \" \".join(map(str, cards)):\n    print(\"Stable\")\nelse:\n    print(\"Not stable\")\n", "test_IO": {"input": ["5\nH4 C9 S4 D2 C3\n"], "output": ["D2 C3 H4 S4 C9\nStable\nD2 C3 S4 H4 C9\nNot stable\n"]}, "modified_context": "def bubbleSort(cards):\n    n = len(cards)\n    for i in range(0, n):\n        for j in range(n-1, i, -1):\n            if int(cards[ j][1]) < int(cards[ j-1][1]):\n                cards[ j], cards[ j-1] = cards[ j-1], cards[ j]\n\n    print(\" \".join(map(str, cards)))\n\n\ndef selectionSort(cards):\n    n = len(cards)\n    for i in range(0, n):\n        mini = i\n        for j in range(i, n):\n            if int(cards[ j][1]) < int(cards[ mini][1]):\n                mini = j\n        if mini != i:\n            cards[ i], cards[ mini] = cards[ mini], cards[ i]\n\n    print(\" \".join(map(str, cards)))\n\n\nn = int(input())\ncards = input().split(\" \")\ncards2 = list(cards)\nbubbleSort(cards)\nprint(\"Stable\")\nselectionSort(cards2)\nif \" \".join(map(str, cards2)) == \" \".join(map(str, cards)):\n    print(\"Stable\")\nelse:\n    print(\"Not stable\")\n", "token_boundary_changed": false}
{"id": "Python/44", "code": "import sys\nimport math\n\nfrom collections import defaultdict\nfrom collections import deque\n\n\ndef load(vtype=int):\n    return vtype(input().strip())\n\n\ndef load_list(seplator=\" \", vtype=int):\n    return [vtype(v) for v in input().strip().split(seplator)]\n\n\ndef exit():\n    import sys\n    sys.exit(0)\n\n\ndef perm_sub(li, used):\n    if len(li) == len(used):\n        return [deque()]\n    k = []\n    for i in range(len(li)):\n        if i in used:\n            continue\n        used.add(i)\n        sub_list = perm_sub(li, used)\n        for sub in sub_list:\n            sub.appendleft(li[i])\n        k.extend(sub_list)\n        used.discard(i)\n    return k\n\n\ndef perm_li(li):\n    return perm_sub(li, set())\n\n\ndef perm_n(n):\n    return perm_sub(list(range(n)), set())\n\n\ndef join_i(li, sep=\"\"):\n    return sep.join([str(e) for e in li])\n\n\ndef li2n(li):\n    n, base = 0, 1\n    for i in range(len(li)-1, -1, -1):\n        n += li[i] * base\n        base *= 10\n    return n\n\n\ndef sli2ili(li):\n    return [int(s) for s in li]\n\n\ndef prime_list(n):\n    li = [i for i in range(2, n+1)]\n    for i in range(len(li)):\n        if li[i] >= int(math.sqrt(n)):\n            break\n        if li[i] == -1:\n            continue\n        for j in range(i+1, len(li)):\n            if li[j] % li[i] == 0:\n                li[j] = -1\n    return [n for n in li if n != -1]\n\n\ndef gcd(a, b):\n    a, b = max(a, b), min(a, b)\n    while True:\n        r = a % b\n        if r == 0:\n            return b\n        a, b = b, r\n\n\ndef lcm(a, b):\n    return int(a * b / gcd(a, b))\n\n\ndef all_subset(li):\n    s = []\n    n = len(li)\n    for bit in range(0, (1 << (n+1))):\n        ss = set()\n        for i in range(0, n):\n            if (bit & (1 << i)):\n                ss.add(li[i])\n        s.append(ss)\n    return s\n\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    return n * factorial(n-1)\n\n\ndef mCn(m, n):\n    def factorial_ntimes(m, n):\n        r = 1\n        while n:\n            r *= m\n            m -= 1\n            n -= 1\n        return r\n    return int(factorial_ntimes(m, n) / factorial(n))\n\n\nn = load()\nA = load_list()\n\nif n == len(set(A)):\n    print('YES')\nelse:\n    print('NO')\n", "test_IO": {"input": ["5\n2 6 1 4 5\n"], "output": ["YES\n"]}, "modified_context": "import sys\nimport math\n\nfrom collections import defaultdict\nfrom collections import deque\n\n\ndef load(vtype=int):\n    return vtype(input().strip())\n\n\ndef load_list(seplator=\" \", vtype=int):\n    return [ vtype(v) for v in input().strip().split(seplator)]\n\n\ndef exit():\n    import sys\n    sys.exit(0)\n\n\ndef perm_sub(li, used):\n    if len(li) == len(used):\n        return [ deque()]\n    k = []\n    for i in range(len(li)):\n        if i in used:\n            continue\n        used.add(i)\n        sub_list = perm_sub(li, used)\n        for sub in sub_list:\n            sub.appendleft(li[ i])\n        k.extend(sub_list)\n        used.discard(i)\n    return k\n\n\ndef perm_li(li):\n    return perm_sub(li, set())\n\n\ndef perm_n(n):\n    return perm_sub(list(range(n)), set())\n\n\ndef join_i(li, sep=\"\"):\n    return sep.join([ str(e) for e in li])\n\n\ndef li2n(li):\n    n, base = 0, 1\n    for i in range(len(li)-1, -1, -1):\n        n += li[ i] * base\n        base *= 10\n    return n\n\n\ndef sli2ili(li):\n    return [ int(s) for s in li]\n\n\ndef prime_list(n):\n    li = [ i for i in range(2, n+1)]\n    for i in range(len(li)):\n        if li[ i] >= int(math.sqrt(n)):\n            break\n        if li[ i] == -1:\n            continue\n        for j in range(i+1, len(li)):\n            if li[ j] % li[ i] == 0:\n                li[ j] = -1\n    return [ n for n in li if n != -1]\n\n\ndef gcd(a, b):\n    a, b = max(a, b), min(a, b)\n    while True:\n        r = a % b\n        if r == 0:\n            return b\n        a, b = b, r\n\n\ndef lcm(a, b):\n    return int(a * b / gcd(a, b))\n\n\ndef all_subset(li):\n    s = []\n    n = len(li)\n    for bit in range(0, (1 << (n+1))):\n        ss = set()\n        for i in range(0, n):\n            if (bit & (1 << i)):\n                ss.add(li[ i])\n        s.append(ss)\n    return s\n\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    return n * factorial(n-1)\n\n\ndef mCn(m, n):\n    def factorial_ntimes(m, n):\n        r = 1\n        while n:\n            r *= m\n            m -= 1\n            n -= 1\n        return r\n    return int(factorial_ntimes(m, n) / factorial(n))\n\n\nn = load()\nA = load_list()\n\nif n == len(set(A)):\n    print('YES')\nelse:\n    print('NO')\n", "token_boundary_changed": false}
{"id": "Python/46", "code": "N = int(input())\nA = list(map(int, input().split()))\nB = list(A)\ncount = 1\nfor i in A:\n    B[i-1] = count\n    count += 1\n\n\nprint(*B)\n", "test_IO": {"input": ["3\n2 3 1\n"], "output": ["3 1 2\n"]}, "modified_context": "N = int(input())\nA = list(map(int, input().split()))\nB = list(A)\ncount = 1\nfor i in A:\n    B[ i-1] = count\n    count += 1\n\n\nprint(*B)\n", "token_boundary_changed": false}
{"id": "Python/48", "code": "n = int(input())\ns = input()\n\nr_cnt = s.count('R')\ng_cnt = s.count('G')\nb_cnt = s.count('B')\n\nans = r_cnt * g_cnt * b_cnt\n\nfor i in range(n):\n    for d in range(n):\n        j = i + d\n        k = j + d\n        if k >= n:\n            break\n\n        if s[i] != s[j] and s[j] != s[k] and s[k] != s[i]:\n\n            ans -= 1\nprint(ans)\n", "test_IO": {"input": ["4\nRRGB\n"], "output": ["1\n"]}, "modified_context": "n = int(input())\ns = input()\n\nr_cnt = s.count('R')\ng_cnt = s.count('G')\nb_cnt = s.count('B')\n\nans = r_cnt * g_cnt * b_cnt\n\nfor i in range(n):\n    for d in range(n):\n        j = i + d\n        k = j + d\n        if k >= n:\n            break\n\n        if s[ i] != s[ j] and s[ j] != s[ k] and s[ k] != s[ i]:\n\n            ans -= 1\nprint(ans)\n", "token_boundary_changed": false}
{"id": "Python/50", "code": "def atc_079a(input_value: str) -> str:\n    n = 3\n    for i in range(0, len(input_value) + 1 - n):\n        for j in range(1, n):\n            if input_value[i] != input_value[i + j]:\n                break\n            if j == n - 1:\n                return \"Yes\"\n    return \"No\"\n\n\ninput_value = input()\nprint(atc_079a(input_value))\n", "test_IO": {"input": ["1118\n"], "output": ["Yes\n"]}, "modified_context": "def atc_079a(input_value: str) -> str:\n    n = 3\n    for i in range(0, len(input_value) + 1 - n):\n        for j in range(1, n):\n            if input_value[ i] != input_value[ i + j]:\n                break\n            if j == n - 1:\n                return \"Yes\"\n    return \"No\"\n\n\ninput_value = input()\nprint(atc_079a(input_value))\n", "token_boundary_changed": false}
{"id": "Python/51", "code": "n = int(input())\nlst = []\npair = 0\nfor i in range(n):\n    st = ''.join(sorted(list(input())))\n    lst.append(st)\nlst = sorted(lst)\nlst += ['end']\npre = ''\ntmp_cnt = 0\ncnt = 0\nfor i in lst:\n    if i == pre:\n        tmp_cnt += 1\n    else:\n        cnt += sum([j for j in range(tmp_cnt + 1)])\n        tmp_cnt = 0\n    pre = i\nprint(cnt)\n", "test_IO": {"input": ["3\nacornistnt\npeanutbomb\nconstraint\n"], "output": ["1\n"]}, "modified_context": "n = int(input())\nlst = []\npair = 0\nfor i in range(n):\n    st = ''.join(sorted(list(input())))\n    lst.append(st)\nlst = sorted(lst)\nlst += ['end']\npre = ''\ntmp_cnt = 0\ncnt = 0\nfor i in lst:\n    if i == pre:\n        tmp_cnt += 1\n    else:\n        cnt += sum([ j for j in range(tmp_cnt + 1)])\n        tmp_cnt = 0\n    pre = i\nprint(cnt)\n", "token_boundary_changed": false}
{"id": "Python/52", "code": "N = int(input())\nA = list(map(int, input().split()))\ns = A[0] ^ A[1]\nfor i in range(2, N):\n    s = s ^ A[i]\n\nB = [0]*N\nfor i in range(N):\n    B[i] = s ^ A[i]\n\nL = [str(a) for a in B]\nL = \" \".join(L)\nprint(L)\n", "test_IO": {"input": ["4\n20 11 9 24\n"], "output": ["26 5 7 22\n"]}, "modified_context": "N = int(input())\nA = list(map(int, input().split()))\ns = A[0] ^ A[1]\nfor i in range(2, N):\n    s = s ^ A[ i]\n\nB = [0]*N\nfor i in range(N):\n    B[ i] = s ^ A[ i]\n\nL = [ str(a) for a in B]\nL = \" \".join(L)\nprint(L)\n", "token_boundary_changed": false}
{"id": "Python/55", "code": "from sys import stdin\ndef il(func=int): return list(map(func, stdin.readline().rstrip().split()))\n\n\nils = lambda n, s=\"int(input())\": [eval(s) for _ in range(n)]\n\n\ndef gcd(a, b):\n    if a < b:\n        return gcd(b, a)\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\nn, m = il()\ns = input()\nt = input()\naa = gcd(n, m)\nbb = lcm(n, m)\ncc = aa // bb\nfor i in range(aa):\n    if s[n//aa*i] != t[m//aa*i]:\n        print(-1)\n        exit()\nprint(bb)\n", "test_IO": {"input": ["3 2\nacp\nae\n"], "output": ["6\n"]}, "modified_context": "from sys import stdin\ndef il(func=int): return list(map(func, stdin.readline().rstrip().split()))\n\n\nils = lambda n, s=\"int(input())\": [ eval(s) for _ in range(n)]\n\n\ndef gcd(a, b):\n    if a < b:\n        return gcd(b, a)\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\nn, m = il()\ns = input()\nt = input()\naa = gcd(n, m)\nbb = lcm(n, m)\ncc = aa // bb\nfor i in range(aa):\n    if s[ n//aa*i] != t[ m//aa*i]:\n        print(-1)\n        exit()\nprint(bb)\n", "token_boundary_changed": false}
{"id": "Python/57", "code": "from collections import Counter\n\n\ndef solve():\n    N = int(input())\n    D = list(map(int, input().split()))\n\n    mod = 998244353\n\n    if D[0] != 0:\n        print(0)\n        return\n\n    cnt = Counter(D)\n\n    if cnt[0] > 1:\n        print(0)\n        return\n\n    res = 1\n\n    for i in range(1, max(D)+1):\n        if cnt[i-1] == 1:\n            continue\n        res *= cnt[i-1]**cnt[i] % mod\n        res %= mod\n\n    print(res)\n\n\nsolve()\n", "test_IO": {"input": ["4\n0 1 1 2\n"], "output": ["2\n"]}, "modified_context": "from collections import Counter\n\n\ndef solve():\n    N = int(input())\n    D = list(map(int, input().split()))\n\n    mod = 998244353\n\n    if D[0] != 0:\n        print(0)\n        return\n\n    cnt = Counter(D)\n\n    if cnt[0] > 1:\n        print(0)\n        return\n\n    res = 1\n\n    for i in range(1, max(D)+1):\n        if cnt[ i-1] == 1:\n            continue\n        res *= cnt[ i-1]**cnt[ i] % mod\n        res %= mod\n\n    print(res)\n\n\nsolve()\n", "token_boundary_changed": false}
{"id": "Python/58", "code": "from functools import reduce\nimport math\n\n\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n\n\ndef lcm_list(numbers):\n    return reduce(lcm, numbers, 1)\n\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n\nA = [a // 2 for a in A]\n\n\ncount_div_2 = None\nfor a in A:\n    cnt = 0\n    while a % 2 == 0:\n        a //= 2\n        cnt += 1\n\n    if count_div_2 is None:\n        count_div_2 = cnt\n\n    elif cnt != count_div_2:\n        print(0)\n        exit()\n\n\nmy_lcm = lcm_list(A)\nif my_lcm > M:\n    print(0)\n    exit()\n\ntmp = M // my_lcm\n\n\nans = (tmp + 1) // 2\nprint(ans)\n", "test_IO": {"input": ["2 50\n6 10\n"], "output": ["2\n"]}, "modified_context": "from functools import reduce\nimport math\n\n\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n\n\ndef lcm_list(numbers):\n    return reduce(lcm, numbers, 1)\n\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n\nA = [ a // 2 for a in A]\n\n\ncount_div_2 = None\nfor a in A:\n    cnt = 0\n    while a % 2 == 0:\n        a //= 2\n        cnt += 1\n\n    if count_div_2 is None:\n        count_div_2 = cnt\n\n    elif cnt != count_div_2:\n        print(0)\n        exit()\n\n\nmy_lcm = lcm_list(A)\nif my_lcm > M:\n    print(0)\n    exit()\n\ntmp = M // my_lcm\n\n\nans = (tmp + 1) // 2\nprint(ans)\n", "token_boundary_changed": false}
{"id": "Python/59", "code": "N = int(input())\nA = [int(x) for x in input().split()]\nB = [int(x) for x in input().split()]\n\nans = 0\nfor i in range(N):\n    d = min(A[i], B[i])\n    ans += d\n    A[i] -= d\n    B[i] -= d\n    d = min(A[i + 1], B[i])\n    ans += d\n    A[i + 1] -= d\n    B[i] -= d\n\nprint(ans)\n", "test_IO": {"input": ["2\n3 5 2\n4 5\n"], "output": ["9\n"]}, "modified_context": "N = int(input())\nA = [ int(x) for x in input().split()]\nB = [ int(x) for x in input().split()]\n\nans = 0\nfor i in range(N):\n    d = min(A[ i], B[ i])\n    ans += d\n    A[ i] -= d\n    B[ i] -= d\n    d = min(A[ i + 1], B[ i])\n    ans += d\n    A[ i + 1] -= d\n    B[ i] -= d\n\nprint(ans)\n", "token_boundary_changed": false}
{"id": "Python/62", "code": "import sys\ninput = sys.stdin.buffer.readline\n\n\ndef main():\n\n    class SegmentTree:\n\n        def __init__(self, size, default):\n            self.size = 2**(size-1).bit_length()\n            self.default = default\n            self.seg = [default]*(2*self.size-1)\n\n        def segfunc(self, x, y):\n            return max(x, y)\n\n        def update(self, k, x):\n            k += self.size-1\n            self.seg[k] = x\n            while k:\n                k = (k-1)//2\n                self.seg[k] = self.segfunc(self.seg[2*k+1], self.seg[2*k+2])\n\n        def query(self, p, q):\n            if q <= p:\n                return self.default\n            p += self.size-1\n            q += self.size-2\n            ret = self.default\n            while q-p > 1:\n                if p & 1 == 0:\n                    ret = self.segfunc(ret, self.seg[p])\n                if q & 1 == 1:\n                    ret = self.segfunc(ret, self.seg[q])\n                    q -= 1\n                p = p//2\n                q = (q-1)//2\n            ret = self.segfunc(self.segfunc(ret, self.seg[p]), self.seg[q])\n            return ret\n\n        def seg_print(self):\n            print(self.seg)\n\n    N = int(input())\n    a = list(map(int, input().split()))\n    ans = [i+1 for i in range(N)]\n    left_seg = SegmentTree(N, 0)\n    for i, num in enumerate(a):\n        ans[num-1] *= i + 1 - left_seg.query(0, num)\n        left_seg.update(num-1, i+1)\n    right_seg = SegmentTree(N, 0)\n    for i, num in enumerate(a[::-1]):\n        ans[num-1] *= i + 1 - right_seg.query(0, num)\n        right_seg.update(num-1, i+1)\n\n    print(sum(ans))\n\n\nif __name__ == \"__main__\":\n    main()\n", "test_IO": {"input": ["3\n2 1 3\n"], "output": ["9\n"]}, "modified_context": "import sys\ninput = sys.stdin.buffer.readline\n\n\ndef main():\n\n    class SegmentTree:\n\n        def __init__(self, size, default):\n            self.size = 2**(size-1).bit_length()\n            self.default = default\n            self.seg = [ default]*(2*self.size-1)\n\n        def segfunc(self, x, y):\n            return max(x, y)\n\n        def update(self, k, x):\n            k += self.size-1\n            self.seg[ k] = x\n            while k:\n                k = (k-1)//2\n                self.seg[ k] = self.segfunc(self.seg[2*k+1], self.seg[2*k+2])\n\n        def query(self, p, q):\n            if q <= p:\n                return self.default\n            p += self.size-1\n            q += self.size-2\n            ret = self.default\n            while q-p > 1:\n                if p & 1 == 0:\n                    ret = self.segfunc(ret, self.seg[ p])\n                if q & 1 == 1:\n                    ret = self.segfunc(ret, self.seg[ q])\n                    q -= 1\n                p = p//2\n                q = (q-1)//2\n            ret = self.segfunc(self.segfunc(ret, self.seg[ p]), self.seg[ q])\n            return ret\n\n        def seg_print(self):\n            print(self.seg)\n\n    N = int(input())\n    a = list(map(int, input().split()))\n    ans = [ i+1 for i in range(N)]\n    left_seg = SegmentTree(N, 0)\n    for i, num in enumerate(a):\n        ans[ num-1] *= i + 1 - left_seg.query(0, num)\n        left_seg.update(num-1, i+1)\n    right_seg = SegmentTree(N, 0)\n    for i, num in enumerate(a[::-1]):\n        ans[ num-1] *= i + 1 - right_seg.query(0, num)\n        right_seg.update(num-1, i+1)\n\n    print(sum(ans))\n\n\nif __name__ == \"__main__\":\n    main()\n", "token_boundary_changed": false}
{"id": "Python/63", "code": "N, L = map(int, input().split())\nS = [input().rstrip() for _ in range(N)]\nprint(''.join(sorted(S)))\n", "test_IO": {"input": ["3 3\ndxx\naxx\ncxx\n"], "output": ["axxcxxdxx\n"]}, "modified_context": "N, L = map(int, input().split())\nS = [ input().rstrip() for _ in range(N)]\nprint(''.join(sorted(S)))\n", "token_boundary_changed": false}
{"id": "Python/64", "code": "S = list(input())\n\ncount = 0\nrecord = 0\nfor i in range(len(S)):\n    if S[i] == \"A\" or S[i] == \"C\" or S[i] == \"G\" or S[i] == \"T\":\n        count += 1\n    else:\n        if count > record:\n            record = count\n        count = 0\nif count > record:\n    record = count\n\nprint(record)\n", "test_IO": {"input": ["ATCODER\n"], "output": ["3\n"]}, "modified_context": "S = list(input())\n\ncount = 0\nrecord = 0\nfor i in range(len(S)):\n    if S[ i] == \"A\" or S[ i] == \"C\" or S[ i] == \"G\" or S[ i] == \"T\":\n        count += 1\n    else:\n        if count > record:\n            record = count\n        count = 0\nif count > record:\n    record = count\n\nprint(record)\n", "token_boundary_changed": false}
{"id": "Python/65", "code": "n = int(input())\nS = list(map(int, input().split()))\nq = int(input())\nT = list(map(int, input().split()))\n\nans = 0\nfor i in T:\n    if i == S[-1] or i == S[0]:\n        ans += 1\n    else:\n        left = 0\n        right = n-1\n        while right-left > 1:\n            mid = (left+right)//2\n            if S[mid] == i:\n                ans += 1\n                break\n            elif S[mid] < i:\n                left = mid\n            else:\n                right = mid\n\nprint(ans)\n", "test_IO": {"input": ["5\n1 2 3 4 5\n3\n3 4 1\n"], "output": ["3\n"]}, "modified_context": "n = int(input())\nS = list(map(int, input().split()))\nq = int(input())\nT = list(map(int, input().split()))\n\nans = 0\nfor i in T:\n    if i == S[-1] or i == S[0]:\n        ans += 1\n    else:\n        left = 0\n        right = n-1\n        while right-left > 1:\n            mid = (left+right)//2\n            if S[ mid] == i:\n                ans += 1\n                break\n            elif S[ mid] < i:\n                left = mid\n            else:\n                right = mid\n\nprint(ans)\n", "token_boundary_changed": false}
{"id": "Python/66", "code": "N, K = map(int, input().split())\nS = list(input())\nif S[K-1] == \"A\":\n    S[K-1] = \"a\"\nelif S[K-1] == \"B\":\n    S[K-1] = \"b\"\nelse:\n    S[K-1] = \"c\"\nans = \"\".join(S)\nprint(ans)\n", "test_IO": {"input": ["3 1\nABC\n"], "output": ["aBC\n"]}, "modified_context": "N, K = map(int, input().split())\nS = list(input())\nif S[ K-1] == \"A\":\n    S[ K-1] = \"a\"\nelif S[ K-1] == \"B\":\n    S[ K-1] = \"b\"\nelse:\n    S[ K-1] = \"c\"\nans = \"\".join(S)\nprint(ans)\n", "token_boundary_changed": false}
{"id": "Python/69", "code": "N, A, B, C = map(int, input().split())\nl = [int(input()) for i in range(N)]\n\n\ndef dfs(cur, a, b, c):\n    if cur == N:\n        return abs(A - a) + abs(B - b) + abs(C - c) - 30 if min(a, b, c) > 0 else 10 ** 9\n    no_add = dfs(cur + 1, a, b, c)\n    add_a = dfs(cur + 1, a + l[cur], b, c) + 10\n    add_b = dfs(cur + 1, a, b + l[cur], c) + 10\n    add_c = dfs(cur + 1, a, b, c + l[cur]) + 10\n\n    return min(no_add, add_a, add_b, add_c)\n\n\nprint(dfs(0, 0, 0, 0))\n", "test_IO": {"input": ["5 100 90 80\n98\n40\n30\n21\n80\n"], "output": ["23\n"]}, "modified_context": "N, A, B, C = map(int, input().split())\nl = [ int(input()) for i in range(N)]\n\n\ndef dfs(cur, a, b, c):\n    if cur == N:\n        return abs(A - a) + abs(B - b) + abs(C - c) - 30 if min(a, b, c) > 0 else 10 ** 9\n    no_add = dfs(cur + 1, a, b, c)\n    add_a = dfs(cur + 1, a + l[ cur], b, c) + 10\n    add_b = dfs(cur + 1, a, b + l[ cur], c) + 10\n    add_c = dfs(cur + 1, a, b, c + l[ cur]) + 10\n\n    return min(no_add, add_a, add_b, add_c)\n\n\nprint(dfs(0, 0, 0, 0))\n", "token_boundary_changed": false}
{"id": "Python/71", "code": "N = int(input())\nc = input()\n\nnum_w = c.count(\"W\")\nnum_r = N - num_w\n\ncomp = \"R\"*num_r + \"W\"*num_w\nans = 0\nfor i in range(num_r):\n    if c[i] != comp[i]:\n        ans += 1\n\nans = min(num_w, num_r, ans)\nprint(ans)\n", "test_IO": {"input": ["4\nWWRR\n"], "output": ["2\n"]}, "modified_context": "N = int(input())\nc = input()\n\nnum_w = c.count(\"W\")\nnum_r = N - num_w\n\ncomp = \"R\"*num_r + \"W\"*num_w\nans = 0\nfor i in range(num_r):\n    if c[ i] != comp[ i]:\n        ans += 1\n\nans = min(num_w, num_r, ans)\nprint(ans)\n", "token_boundary_changed": false}
{"id": "Python/72", "code": "import sys\nsys.setrecursionlimit(10**7)\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x) - 1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef II(): return int(sys.stdin.readline())\ndef SI(): return sys.stdin.readline().strip()\n\n\nINF = 10 ** 18\nMOD = 10 ** 9 + 7\n\n\ndef main():\n    N = II()\n    a_li = LI()\n\n    a_li.sort()\n\n    n = a_li[-1]\n\n    dif = INF\n    prev_dif = dif\n    for a in a_li[:-1]:\n        dif = min(abs(n/2 - a), dif)\n        if dif != prev_dif:\n            r = a\n            prev_dif = dif\n\n    print(n, r)\n\n\nmain()\n", "test_IO": {"input": ["5\n6 9 4 2 11\n"], "output": ["11 6\n"]}, "modified_context": "import sys\nsys.setrecursionlimit(10**7)\ndef LI(): return [ int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [ int(x) - 1 for x in sys.stdin.readline().split()]\ndef LF(): return [ float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef II(): return int(sys.stdin.readline())\ndef SI(): return sys.stdin.readline().strip()\n\n\nINF = 10 ** 18\nMOD = 10 ** 9 + 7\n\n\ndef main():\n    N = II()\n    a_li = LI()\n\n    a_li.sort()\n\n    n = a_li[-1]\n\n    dif = INF\n    prev_dif = dif\n    for a in a_li[:-1]:\n        dif = min(abs(n/2 - a), dif)\n        if dif != prev_dif:\n            r = a\n            prev_dif = dif\n\n    print(n, r)\n\n\nmain()\n", "token_boundary_changed": false}
{"id": "Python/73", "code": "S = input()\nT = input()\n\nN = len(S)\nM = len(T)\nans = M\nfor i in range(N-M+1):\n    S_2 = S[i:i+M]\n    cnt = 0\n    for j in range(M):\n        if T[j] != S_2[j]:\n            cnt += 1\n    ans = min(ans, cnt)\n\nprint(ans)\n", "test_IO": {"input": ["cabacc\nabc\n"], "output": ["1\n"]}, "modified_context": "S = input()\nT = input()\n\nN = len(S)\nM = len(T)\nans = M\nfor i in range(N-M+1):\n    S_2 = S[ i:i+M]\n    cnt = 0\n    for j in range(M):\n        if T[ j] != S_2[ j]:\n            cnt += 1\n    ans = min(ans, cnt)\n\nprint(ans)\n", "token_boundary_changed": false}
{"id": "Python/74", "code": "from bisect import bisect\nn, m, x = (int(i) for i in input().split())\na = [int(i) for i in input().split()]\nans = 0\ni = bisect(a, x)\nprint(min(len(a[:i]), len(a[i:])))\n", "test_IO": {"input": ["5 3 3\n1 2 4\n"], "output": ["1\n"]}, "modified_context": "from bisect import bisect\nn, m, x = (int(i) for i in input().split())\na = [ int(i) for i in input().split()]\nans = 0\ni = bisect(a, x)\nprint(min(len(a[:i]), len(a[ i:])))\n", "token_boundary_changed": false}
{"id": "Python/75", "code": "def main():\n    n = int(input())\n    sdic = {}\n    for _ in range(n):\n        s = [_s for _s in sorted(input().strip())]\n        s = ''.join(s)\n        if s in sdic:\n            sdic[s] += 1\n        else:\n            sdic[s] = 1\n    ans = 0\n    for k, v in sdic.items():\n        ans += v*(v-1)//2\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "test_IO": {"input": ["3\nacornistnt\npeanutbomb\nconstraint\n"], "output": ["1\n"]}, "modified_context": "def main():\n    n = int(input())\n    sdic = {}\n    for _ in range(n):\n        s = [ _s for _s in sorted(input().strip())]\n        s = ''.join(s)\n        if s in sdic:\n            sdic[ s] += 1\n        else:\n            sdic[ s] = 1\n    ans = 0\n    for k, v in sdic.items():\n        ans += v*(v-1)//2\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "token_boundary_changed": false}
{"id": "Python/81", "code": "a, b = map(int, input().split())\nlst = [a+b, a-b, a*b]\nprint(max(lst))\n", "test_IO": {"input": ["-13 3\n"], "output": ["-10\n"]}, "modified_context": "a, b = map(int, input().split())\nlst = [ a+b, a-b, a*b]\nprint(max(lst))\n", "token_boundary_changed": false}
{"id": "Python/84", "code": "import numpy as np\nn = int(input())\nA = np.zeros(n)\n\nx, y, z = 1, 1, 1\n\nwhile x**2 + y**2 + z**2 + x*y + y*z + z*x <= n:\n    while x ** 2 + y ** 2 + z ** 2 + x * y + y * z + z * x <= n:\n        while x ** 2 + y ** 2 + z ** 2 + x * y + y * z + z * x <= n:\n            i = x ** 2 + y ** 2 + z ** 2 + x * y + y * z + z * x\n            A[i - 1] += 1\n            z += 1\n        z = 1\n        y += 1\n    y, z = 1, 1\n    x += 1\nfor i in range(n):\n    print(int(A[i]))\n", "test_IO": {"input": ["20\n"], "output": ["0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n3\n0\n0\n0\n0\n0\n3\n3\n0\n0\n"]}, "modified_context": "import numpy as np\nn = int(input())\nA = np.zeros(n)\n\nx, y, z = 1, 1, 1\n\nwhile x**2 + y**2 + z**2 + x*y + y*z + z*x <= n:\n    while x ** 2 + y ** 2 + z ** 2 + x * y + y * z + z * x <= n:\n        while x ** 2 + y ** 2 + z ** 2 + x * y + y * z + z * x <= n:\n            i = x ** 2 + y ** 2 + z ** 2 + x * y + y * z + z * x\n            A[ i - 1] += 1\n            z += 1\n        z = 1\n        y += 1\n    y, z = 1, 1\n    x += 1\nfor i in range(n):\n    print(int(A[ i]))\n", "token_boundary_changed": false}
{"id": "Python/85", "code": "N, K = map(int, input().split())\nA = []\n\nfor i in range(N):\n    A.append(0)\n\nfor i in range(K):\n    d = int(input())\n    AA = list(map(int, input().split()))\n    for j in range(d):\n        A[AA[j] - 1] = 1\n\nn = 0\nfor i in range(N):\n    if A[i] == 0:\n        n += 1\nprint(n)\n", "test_IO": {"input": ["3 2\n2\n1 3\n1\n3\n"], "output": ["1\n"]}, "modified_context": "N, K = map(int, input().split())\nA = []\n\nfor i in range(N):\n    A.append(0)\n\nfor i in range(K):\n    d = int(input())\n    AA = list(map(int, input().split()))\n    for j in range(d):\n        A[ AA[ j] - 1] = 1\n\nn = 0\nfor i in range(N):\n    if A[ i] == 0:\n        n += 1\nprint(n)\n", "token_boundary_changed": false}
{"id": "Python/89", "code": "import sys\nfrom bisect import bisect_left\n\n\ndef solve():\n    input = sys.stdin.readline\n    N, K = map(int, input().split())\n    A = [(int(a) % K) - 1 for a in input().split()]\n    sum_A = [0 for _ in range(N + 1)]\n\n    count = 0\n    modK = dict()\n    modK[0] = [0]\n    for i in range(N):\n        sum_A[i + 1] = (sum_A[i] + A[i]) % K\n        if sum_A[i+1] not in modK:\n            modK[sum_A[i+1]] = [i + 1]\n        else:\n            modK[sum_A[i+1]].append(i+1)\n\n    for key in modK:\n        lenK = len(modK[key])\n        for i, a in enumerate(modK[key]):\n            count += bisect_left(modK[key], a + K, i, lenK) - i - 1\n\n    print(count)\n    return 0\n\n\nif __name__ == \"__main__\":\n    solve()\n", "test_IO": {"input": ["5 4\n1 4 2 3 5\n"], "output": ["4\n"]}, "modified_context": "import sys\nfrom bisect import bisect_left\n\n\ndef solve():\n    input = sys.stdin.readline\n    N, K = map(int, input().split())\n    A = [(int(a) % K) - 1 for a in input().split()]\n    sum_A = [0 for _ in range(N + 1)]\n\n    count = 0\n    modK = dict()\n    modK[0] = [0]\n    for i in range(N):\n        sum_A[ i + 1] = (sum_A[ i] + A[ i]) % K\n        if sum_A[ i+1] not in modK:\n            modK[ sum_A[ i+1]] = [ i + 1]\n        else:\n            modK[ sum_A[ i+1]].append(i+1)\n\n    for key in modK:\n        lenK = len(modK[ key])\n        for i, a in enumerate(modK[ key]):\n            count += bisect_left(modK[ key], a + K, i, lenK) - i - 1\n\n    print(count)\n    return 0\n\n\nif __name__ == \"__main__\":\n    solve()\n", "token_boundary_changed": false}
{"id": "Python/90", "code": "n, m = map(int, input().split())\n\ngate_cond = [[int(x) for x in input().split()] for _ in range(m)]\nmax_under_th = max([l[0] for l in gate_cond])\nmin_upper_th = min([l[1] for l in gate_cond])\nif min_upper_th - max_under_th >= 0:\n    print(min_upper_th - max_under_th + 1)\nelse:\n    print(0)\n", "test_IO": {"input": ["4 2\n1 3\n2 4\n"], "output": ["2\n"]}, "modified_context": "n, m = map(int, input().split())\n\ngate_cond = [[ int(x) for x in input().split()] for _ in range(m)]\nmax_under_th = max([ l[0] for l in gate_cond])\nmin_upper_th = min([ l[1] for l in gate_cond])\nif min_upper_th - max_under_th >= 0:\n    print(min_upper_th - max_under_th + 1)\nelse:\n    print(0)\n", "token_boundary_changed": false}
{"id": "Python/93", "code": "import sys\ndef input(): return sys.stdin.readline().rstrip()\ndef input_nums(): return list(map(int, input().split()))\n\n\ndef main():\n    K, N = input_nums()\n    A = input_nums()\n    dist = []\n    for i in range(len(A)-1):\n        dist.append(A[i+1]-A[i])\n    dist.append(K+A[0]-A[-1])\n    maxv = max(dist)\n    print(sum(dist) - maxv)\n\n\nif __name__ == '__main__':\n    main()\n", "test_IO": {"input": ["20 3\n5 10 15\n"], "output": ["10\n"]}, "modified_context": "import sys\ndef input(): return sys.stdin.readline().rstrip()\ndef input_nums(): return list(map(int, input().split()))\n\n\ndef main():\n    K, N = input_nums()\n    A = input_nums()\n    dist = []\n    for i in range(len(A)-1):\n        dist.append(A[ i+1]-A[ i])\n    dist.append(K+A[0]-A[-1])\n    maxv = max(dist)\n    print(sum(dist) - maxv)\n\n\nif __name__ == '__main__':\n    main()\n", "token_boundary_changed": false}
{"id": "Python/94", "code": "N = int(input())\nS, T = input().split()\n\nchar_lists = []\n\nfor i, char in enumerate(S):\n    char_lists.append(char)\n    char_lists.append(T[i])\n\nprint(\"\".join(char_lists))\n", "test_IO": {"input": ["2\nip cc\n"], "output": ["icpc\n"]}, "modified_context": "N = int(input())\nS, T = input().split()\n\nchar_lists = []\n\nfor i, char in enumerate(S):\n    char_lists.append(char)\n    char_lists.append(T[ i])\n\nprint(\"\".join(char_lists))\n", "token_boundary_changed": false}
{"id": "Python/95", "code": "n = int(input())\ns = input()\ncnt = 1\nfor i in range(n-1):\n    if s[i] == s[i+1]:\n        continue\n\n    else:\n        cnt += 1\n\nprint(cnt)\n", "test_IO": {"input": ["10\naabbbbaaca\n"], "output": ["5\n"]}, "modified_context": "n = int(input())\ns = input()\ncnt = 1\nfor i in range(n-1):\n    if s[ i] == s[ i+1]:\n        continue\n\n    else:\n        cnt += 1\n\nprint(cnt)\n", "token_boundary_changed": false}
{"id": "Python/98", "code": "a = [int(input()) for i in range(5)]\n\ndic = {}\n\nfor i in range(5):\n    if str(a[i])[-1] == \"0\":\n        dic.update({i: 0})\n    else:\n        dic.update({i: int(str(a[i])[-1]) - 10})\n\n\nmin_num = [i for i in dic if dic[i] == min(dic.values())][0]\na_sum = sum(a)\ndic.pop(min_num)\nprint(abs(sum(dic.values())) + a_sum)\n", "test_IO": {"input": ["29\n20\n7\n35\n120\n"], "output": ["215\n"]}, "modified_context": "a = [ int(input()) for i in range(5)]\n\ndic = {}\n\nfor i in range(5):\n    if str(a[ i])[-1] == \"0\":\n        dic.update({i: 0})\n    else:\n        dic.update({i: int(str(a[ i])[-1]) - 10})\n\n\nmin_num = [ i for i in dic if dic[ i] == min(dic.values())][0]\na_sum = sum(a)\ndic.pop(min_num)\nprint(abs(sum(dic.values())) + a_sum)\n", "token_boundary_changed": false}
{"id": "Python/101", "code": "n = int(input())\nl = input().split()\nmax = -1e9\nmin = 1e9\nsum = 0\nfor i in range(n):\n    sum += int(l[i])\n    if max < int(l[i]):\n        max = int(l[i])\n    if min > int(l[i]):\n        min = int(l[i])\nprint(min, max, sum)\n", "test_IO": {"input": ["5\n10 1 5 4 17\n"], "output": ["1 17 37\n"]}, "modified_context": "n = int(input())\nl = input().split()\nmax = -1e9\nmin = 1e9\nsum = 0\nfor i in range(n):\n    sum += int(l[ i])\n    if max < int(l[ i]):\n        max = int(l[ i])\n    if min > int(l[ i]):\n        min = int(l[ i])\nprint(min, max, sum)\n", "token_boundary_changed": false}
{"id": "Python/105", "code": "N, x = map(int, input().split())\na = list(map(int, input().split()))\ncnt = 0\nfor i in range(1, N):\n    tmp = a[i - 1] + a[i]\n    if tmp > x:\n        if tmp - x > a[i]:\n            a[i - 1] = tmp - a[i] - x\n            a[i] = 0\n        else:\n            a[i] = a[i] - (tmp - x)\n        cnt += tmp - x\n\nprint(cnt)\n", "test_IO": {"input": ["3 3\n2 2 2\n"], "output": ["1\n"]}, "modified_context": "N, x = map(int, input().split())\na = list(map(int, input().split()))\ncnt = 0\nfor i in range(1, N):\n    tmp = a[ i - 1] + a[ i]\n    if tmp > x:\n        if tmp - x > a[ i]:\n            a[ i - 1] = tmp - a[ i] - x\n            a[ i] = 0\n        else:\n            a[ i] = a[ i] - (tmp - x)\n        cnt += tmp - x\n\nprint(cnt)\n", "token_boundary_changed": false}
{"id": "Python/108", "code": "n = int(input())\narr = {}\n\nfor i in range(n):\n    s = input()\n    if not s in arr:\n        arr[s] = 1\n    else:\n        arr[s] += 1\n\nmax_count = max(arr.values())\ndic = [key[0] for key in arr.items() if key[1] == max_count]\n\nout_sort = sorted(dic)\nfor i in out_sort:\n    print(i)\n", "test_IO": {"input": ["7\nbeat\nvet\nbeet\nbed\nvet\nbet\nbeet\n"], "output": ["beet\nvet\n"]}, "modified_context": "n = int(input())\narr = {}\n\nfor i in range(n):\n    s = input()\n    if not s in arr:\n        arr[ s] = 1\n    else:\n        arr[ s] += 1\n\nmax_count = max(arr.values())\ndic = [ key[0] for key in arr.items() if key[1] == max_count]\n\nout_sort = sorted(dic)\nfor i in out_sort:\n    print(i)\n", "token_boundary_changed": false}
{"id": "Python/109", "code": "n = int(input())\ns = str(input())\n\nans = 0\n\nfor i in range(n):\n    x = set(s[:i+1])\n    y = set(s[i+1:])\n\n    z = 0\n    for w in x:\n        if w in y:\n            z += 1\n    if z > ans:\n        ans = z\nprint(ans)\n", "test_IO": {"input": ["6\naabbca\n"], "output": ["2\n"]}, "modified_context": "n = int(input())\ns = str(input())\n\nans = 0\n\nfor i in range(n):\n    x = set(s[:i+1])\n    y = set(s[ i+1:])\n\n    z = 0\n    for w in x:\n        if w in y:\n            z += 1\n    if z > ans:\n        ans = z\nprint(ans)\n", "token_boundary_changed": false}
{"id": "Python/112", "code": "N = int(input())\nm = []\nline = ''\nm = [[[0 for k in range(10)] for j in range(3)] for i in range(10)]\nfor i in range(N):\n    n = input().split()\n    b = int(n[0])\n    f = int(n[1])\n    r = int(n[2])\n    v = int(n[3])\n    m[b-1][f-1][r-1] += v\n\nfor i in range(4):\n    for j in range(3):\n        for k in range(10):\n            line += ' {0}'.format(m[i][j][k])\n        print(line)\n        line = ''\n    if i < 3:\n        print('#'*20)\n", "test_IO": {"input": ["3\n1 1 3 8\n3 2 2 7\n4 3 8 1\n"], "output": [" 0 0 8 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0\n####################\n 0 0 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0\n####################\n 0 0 0 0 0 0 0 0 0 0\n 0 7 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0\n####################\n 0 0 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 1 0 0\n"]}, "modified_context": "N = int(input())\nm = []\nline = ''\nm = [[[0 for k in range(10)] for j in range(3)] for i in range(10)]\nfor i in range(N):\n    n = input().split()\n    b = int(n[0])\n    f = int(n[1])\n    r = int(n[2])\n    v = int(n[3])\n    m[ b-1][ f-1][ r-1] += v\n\nfor i in range(4):\n    for j in range(3):\n        for k in range(10):\n            line += ' {0}'.format(m[ i][ j][ k])\n        print(line)\n        line = ''\n    if i < 3:\n        print('#'*20)\n", "token_boundary_changed": false}
{"id": "Python/114", "code": "N = int(input())\nS = input()\nx = 1\nfor i in range(N-1):\n    if S[i] != S[i+1]:\n        x = x+1\nprint(x)\n", "test_IO": {"input": ["10\naabbbbaaca\n"], "output": ["5\n"]}, "modified_context": "N = int(input())\nS = input()\nx = 1\nfor i in range(N-1):\n    if S[ i] != S[ i+1]:\n        x = x+1\nprint(x)\n", "token_boundary_changed": false}
{"id": "Python/115", "code": "def main():\n\n    N, M, Q = map(int, input().split())\n    train = [[0 for _ in range(N)] for _ in range(N)]\n    for _ in range(M):\n        l, r = map(int, input().split())\n        train[l-1][r-1] += 1\n\n    accum = [[0 for _ in range(N+1)]]\n    for i in range(N):\n        temp = [0]\n        v = 0\n        for j in range(N):\n            v += train[i][j]\n            temp.append(accum[-1][j+1]+v)\n        accum.append(temp)\n\n    for _ in range(Q):\n        p, q = map(int, input().split())\n        v = accum[q][q] - accum[p-1][q] - accum[q][p-1] + accum[p-1][p-1]\n        print(v)\n\n\nif __name__ == '__main__':\n    main()\n", "test_IO": {"input": ["2 3 1\n1 1\n1 2\n2 2\n1 2\n"], "output": ["3\n"]}, "modified_context": "def main():\n\n    N, M, Q = map(int, input().split())\n    train = [[0 for _ in range(N)] for _ in range(N)]\n    for _ in range(M):\n        l, r = map(int, input().split())\n        train[ l-1][ r-1] += 1\n\n    accum = [[0 for _ in range(N+1)]]\n    for i in range(N):\n        temp = [0]\n        v = 0\n        for j in range(N):\n            v += train[ i][ j]\n            temp.append(accum[-1][ j+1]+v)\n        accum.append(temp)\n\n    for _ in range(Q):\n        p, q = map(int, input().split())\n        v = accum[ q][ q] - accum[ p-1][ q] - accum[ q][ p-1] + accum[ p-1][ p-1]\n        print(v)\n\n\nif __name__ == '__main__':\n    main()\n", "token_boundary_changed": false}
{"id": "Python/118", "code": "import collections\nimport scipy.misc\nimport sys\nimport numpy as np\nimport math\nfrom operator import itemgetter\nimport itertools\nimport copy\n\n\ndef prime_decomposition(n):\n    i = 2\n    table = []\n    while i * i <= n:\n        while n % i == 0:\n            n /= i\n            table.append(int(i))\n        i += 1\n    if n > 1:\n        table.append(int(n))\n    return table\n\n\ndef digit(i):\n    if i > 0:\n        return digit(i//10) + [i % 10]\n    else:\n        return []\n\n\ndef getNearestValueIndex(list, num):\n\n    idx = np.abs(np.asarray(list) - num).argmin()\n    return idx\n\n\nS = input()\nT = S.split('/')\n\ndate = int(T[1]+T[2])\nif date <= 430:\n    print('Heisei')\nelse:\n    print('TBD')\n", "test_IO": {"input": ["2019/04/30\n"], "output": ["Heisei\n"]}, "modified_context": "import collections\nimport scipy.misc\nimport sys\nimport numpy as np\nimport math\nfrom operator import itemgetter\nimport itertools\nimport copy\n\n\ndef prime_decomposition(n):\n    i = 2\n    table = []\n    while i * i <= n:\n        while n % i == 0:\n            n /= i\n            table.append(int(i))\n        i += 1\n    if n > 1:\n        table.append(int(n))\n    return table\n\n\ndef digit(i):\n    if i > 0:\n        return digit(i//10) + [ i % 10]\n    else:\n        return []\n\n\ndef getNearestValueIndex(list, num):\n\n    idx = np.abs(np.asarray(list) - num).argmin()\n    return idx\n\n\nS = input()\nT = S.split('/')\n\ndate = int(T[1]+T[2])\nif date <= 430:\n    print('Heisei')\nelse:\n    print('TBD')\n", "token_boundary_changed": false}
{"id": "Python/119", "code": "import re\nimport math\nfrom collections import defaultdict\nimport itertools\nfrom copy import deepcopy\nimport random\nfrom heapq import heappop, heappush\nimport time\nimport os\nimport queue\nimport sys\nimport datetime\nfrom functools import lru_cache\n\nreadline = sys.stdin.readline\nsys.setrecursionlimit(2000000)\n\nalphabet = \"abcdefghijklmnopqrstuvwxyz\"\nmod = int(10**9+7)\ninf = int(10**20)\n\n\ndef yn(b):\n    if b:\n        print(\"yes\")\n    else:\n        print(\"no\")\n\n\ndef Yn(b):\n    if b:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\ndef YN(b):\n    if b:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nclass union_find():\n    def __init__(self, n):\n        self.n = n\n        self.P = [a for a in range(N)]\n        self.rank = [0]*n\n\n    def find(self, x):\n        if (x != self.P[x]):\n            self.P[x] = self.find(self.P[x])\n        return self.P[x]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def link(self, x, y):\n        if self.rank[x] < self.rank[y]:\n            self.P[x] = y\n        elif self.rank[y] < self.rank[x]:\n            self.P[y] = x\n        else:\n            self.P[x] = y\n            self.rank[y] += 1\n\n    def unite(self, x, y):\n        self.link(self.find(x), self.find(y))\n\n    def size(self):\n        S = set()\n        for a in range(self.n):\n            S.add(self.find(a))\n        return len(S)\n\n\ndef is_power(a, b):\n    now = b\n    while now < a:\n        now *= b\n    if now == a:\n        return True\n    else:\n        return False\n\n\ndef bin_(num, size):\n    A = [0]*size\n    for a in range(size):\n        if (num >> (size-a-1)) & 1 == 1:\n            A[a] = 1\n        else:\n            A[a] = 0\n    return A\n\n\ndef get_facs(n, mod_=0):\n    A = [1]*(n+1)\n    for a in range(2, len(A)):\n        A[a] = A[a-1]*a\n        if (mod > 0):\n            A[a] %= mod_\n    return A\n\n\ndef comb(n, r, mod, fac):\n    if (n-r < 0):\n        return 0\n    return (fac[n]*pow(fac[n-r], mod-2, mod)*pow(fac[r], mod-2, mod)) % mod\n\n\ndef next_comb(num, size):\n    x = num & (-num)\n    y = num+x\n    z = num & (~y)\n    z //= x\n    z = z >> 1\n    num = (y | z)\n    if (num >= (1 << size)):\n        return False\n    else:\n        return num\n\n\ndef get_primes(n, type=\"int\"):\n    A = [True]*(n+1)\n    A[0] = False\n    A[1] = False\n    for a in range(2, n+1):\n        if A[a]:\n            for b in range(a*2, n+1, a):\n                A[b] = False\n    if (type == \"bool\"):\n        return A\n    B = []\n    for a in range(n+1):\n        if (A[a]):\n            B.append(a)\n    return B\n\n\ndef is_prime(num):\n    if (num <= 2):\n        return False\n    i = 2\n    while i*i <= num:\n        if (num % i == 0):\n            return False\n        i += 1\n    return True\n\n\ndef ifelse(a, b, c):\n    if a:\n        return b\n    else:\n        return c\n\n\ndef join(A, c=\" \"):\n    n = len(A)\n    A = list(map(str, A))\n    s = \"\"\n    for a in range(n):\n        s += A[a]\n        if (a < n-1):\n            s += c\n    return s\n\n\ndef factorize(n, type_=\"dict\"):\n    b = 2\n    list_ = []\n    while b * b <= n:\n        while n % b == 0:\n            n //= b\n            list_.append(b)\n        b += 1\n    if n > 1:\n        list_.append(n)\n    if type_ == \"dict\":\n        dic = {}\n        for a in list_:\n            if a in dic:\n                dic[a] += 1\n            else:\n                dic[a] = 1\n        return dic\n    elif type_ == \"list\":\n        return list_\n    else:\n        return None\n\n\ndef floor_(n, x=1):\n    return x*(n//x)\n\n\ndef ceil_(n, x=1):\n    return x*((n+x-1)//x)\n\n\ndef hani(x, min_, max_):\n    ret = x\n    if x < min_:\n        ret = min_\n    if x > max_:\n        ret = max_\n    return ret\n\n\ndef seifu(x):\n    return x//abs(x)\n\n\ndef main():\n    n, l = map(int, input().split())\n    S = []\n    for a in range(n):\n        S.append(input())\n    S.sort()\n    print(\"\".join(S))\n\n\nmain()\n", "test_IO": {"input": ["3 3\ndxx\naxx\ncxx\n"], "output": ["axxcxxdxx\n"]}, "modified_context": "import re\nimport math\nfrom collections import defaultdict\nimport itertools\nfrom copy import deepcopy\nimport random\nfrom heapq import heappop, heappush\nimport time\nimport os\nimport queue\nimport sys\nimport datetime\nfrom functools import lru_cache\n\nreadline = sys.stdin.readline\nsys.setrecursionlimit(2000000)\n\nalphabet = \"abcdefghijklmnopqrstuvwxyz\"\nmod = int(10**9+7)\ninf = int(10**20)\n\n\ndef yn(b):\n    if b:\n        print(\"yes\")\n    else:\n        print(\"no\")\n\n\ndef Yn(b):\n    if b:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\ndef YN(b):\n    if b:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nclass union_find():\n    def __init__(self, n):\n        self.n = n\n        self.P = [ a for a in range(N)]\n        self.rank = [0]*n\n\n    def find(self, x):\n        if (x != self.P[ x]):\n            self.P[ x] = self.find(self.P[ x])\n        return self.P[ x]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def link(self, x, y):\n        if self.rank[ x] < self.rank[ y]:\n            self.P[ x] = y\n        elif self.rank[ y] < self.rank[ x]:\n            self.P[ y] = x\n        else:\n            self.P[ x] = y\n            self.rank[ y] += 1\n\n    def unite(self, x, y):\n        self.link(self.find(x), self.find(y))\n\n    def size(self):\n        S = set()\n        for a in range(self.n):\n            S.add(self.find(a))\n        return len(S)\n\n\ndef is_power(a, b):\n    now = b\n    while now < a:\n        now *= b\n    if now == a:\n        return True\n    else:\n        return False\n\n\ndef bin_(num, size):\n    A = [0]*size\n    for a in range(size):\n        if (num >> (size-a-1)) & 1 == 1:\n            A[ a] = 1\n        else:\n            A[ a] = 0\n    return A\n\n\ndef get_facs(n, mod_=0):\n    A = [1]*(n+1)\n    for a in range(2, len(A)):\n        A[ a] = A[ a-1]*a\n        if (mod > 0):\n            A[ a] %= mod_\n    return A\n\n\ndef comb(n, r, mod, fac):\n    if (n-r < 0):\n        return 0\n    return (fac[ n]*pow(fac[ n-r], mod-2, mod)*pow(fac[ r], mod-2, mod)) % mod\n\n\ndef next_comb(num, size):\n    x = num & (-num)\n    y = num+x\n    z = num & (~y)\n    z //= x\n    z = z >> 1\n    num = (y | z)\n    if (num >= (1 << size)):\n        return False\n    else:\n        return num\n\n\ndef get_primes(n, type=\"int\"):\n    A = [ True]*(n+1)\n    A[0] = False\n    A[1] = False\n    for a in range(2, n+1):\n        if A[ a]:\n            for b in range(a*2, n+1, a):\n                A[ b] = False\n    if (type == \"bool\"):\n        return A\n    B = []\n    for a in range(n+1):\n        if (A[ a]):\n            B.append(a)\n    return B\n\n\ndef is_prime(num):\n    if (num <= 2):\n        return False\n    i = 2\n    while i*i <= num:\n        if (num % i == 0):\n            return False\n        i += 1\n    return True\n\n\ndef ifelse(a, b, c):\n    if a:\n        return b\n    else:\n        return c\n\n\ndef join(A, c=\" \"):\n    n = len(A)\n    A = list(map(str, A))\n    s = \"\"\n    for a in range(n):\n        s += A[ a]\n        if (a < n-1):\n            s += c\n    return s\n\n\ndef factorize(n, type_=\"dict\"):\n    b = 2\n    list_ = []\n    while b * b <= n:\n        while n % b == 0:\n            n //= b\n            list_.append(b)\n        b += 1\n    if n > 1:\n        list_.append(n)\n    if type_ == \"dict\":\n        dic = {}\n        for a in list_:\n            if a in dic:\n                dic[ a] += 1\n            else:\n                dic[ a] = 1\n        return dic\n    elif type_ == \"list\":\n        return list_\n    else:\n        return None\n\n\ndef floor_(n, x=1):\n    return x*(n//x)\n\n\ndef ceil_(n, x=1):\n    return x*((n+x-1)//x)\n\n\ndef hani(x, min_, max_):\n    ret = x\n    if x < min_:\n        ret = min_\n    if x > max_:\n        ret = max_\n    return ret\n\n\ndef seifu(x):\n    return x//abs(x)\n\n\ndef main():\n    n, l = map(int, input().split())\n    S = []\n    for a in range(n):\n        S.append(input())\n    S.sort()\n    print(\"\".join(S))\n\n\nmain()\n", "token_boundary_changed": false}
{"id": "Python/120", "code": "from itertools import *\n\nN = int(input())\nx = 1\n\nN_list = [x+1 for x in range(N)]\n\nn = list(product(N_list, repeat=3))\n\nm = len(n)\n\nprint(m)\n", "test_IO": {"input": ["2\n"], "output": ["8\n"]}, "modified_context": "from itertools import *\n\nN = int(input())\nx = 1\n\nN_list = [ x+1 for x in range(N)]\n\nn = list(product(N_list, repeat=3))\n\nm = len(n)\n\nprint(m)\n", "token_boundary_changed": false}
{"id": "Python/121", "code": "n, x = map(int, input().split())\nm = [int(input()) for _ in range(n)]\nm.sort()\nprint(n + (x - sum(m)) // m[0])\n", "test_IO": {"input": ["3 1000\n120\n100\n140\n"], "output": ["9\n"]}, "modified_context": "n, x = map(int, input().split())\nm = [ int(input()) for _ in range(n)]\nm.sort()\nprint(n + (x - sum(m)) // m[0])\n", "token_boundary_changed": false}
{"id": "Python/122", "code": "N, K = [int(_) for _ in input().split()]\nS = set()\nfor i in range(K):\n    d = int(input())\n    A = [int(_) for _ in input().split()]\n    S = S | set(A)\nprint(N - len(S))\n", "test_IO": {"input": ["3 2\n2\n1 3\n1\n3\n"], "output": ["1\n"]}, "modified_context": "N, K = [ int(_) for _ in input().split()]\nS = set()\nfor i in range(K):\n    d = int(input())\n    A = [ int(_) for _ in input().split()]\n    S = S | set(A)\nprint(N - len(S))\n", "token_boundary_changed": false}
{"id": "Python/123", "code": "N = int(input())\nans = []\n\nfor i in range(1, N+1):\n    if sum(range(1, i + 1)) < N:\n        continue\n    else:\n        ans = [i - 1, sum(range(1, i + 1)) - N]\n        break\nfor i in range(ans[0]+1):\n    if i + 1 != ans[1]:\n        print(i + 1)\n", "test_IO": {"input": ["4\n"], "output": ["1\n3\n"]}, "modified_context": "N = int(input())\nans = []\n\nfor i in range(1, N+1):\n    if sum(range(1, i + 1)) < N:\n        continue\n    else:\n        ans = [ i - 1, sum(range(1, i + 1)) - N]\n        break\nfor i in range(ans[0]+1):\n    if i + 1 != ans[1]:\n        print(i + 1)\n", "token_boundary_changed": false}
{"id": "Python/125", "code": "import collections\n\nn = int(input())\nls = [input() for i in range(n)]\nc = collections.Counter(ls)\n\ncount = c.most_common()[0][1]\nans = []\np = c.most_common()\nfor i in range(len(c)):\n    if p[i][1] == count:\n        ans.append(p[i][0])\n    else:\n        break\nans = sorted(ans)\nfor i in ans:\n    print(i)\n", "test_IO": {"input": ["7\nbeat\nvet\nbeet\nbed\nvet\nbet\nbeet\n"], "output": ["beet\nvet\n"]}, "modified_context": "import collections\n\nn = int(input())\nls = [ input() for i in range(n)]\nc = collections.Counter(ls)\n\ncount = c.most_common()[0][1]\nans = []\np = c.most_common()\nfor i in range(len(c)):\n    if p[ i][1] == count:\n        ans.append(p[ i][0])\n    else:\n        break\nans = sorted(ans)\nfor i in ans:\n    print(i)\n", "token_boundary_changed": false}
{"id": "Python/127", "code": "from collections import deque\nH, W = map(int, input().split())\nG = []\nfor i in range(H+2):\n    if i == 0 or i == H+1:\n        G.append('#'*(W+2))\n    else:\n        G.append('#' + input() + '#')\n\nans = 0\nfor sx in range(W+2):\n    for sy in range(H+2):\n        if G[sy][sx] == '.':\n            dist = [[-float('inf') for i in range(W+2)] for i in range(H+2)]\n            visited = [[-1 for i in range(W+2)] for i in range(H+2)]\n            q = deque([])\n            q.append((sx, sy))\n            dist[sy][sx] = 0\n            visited[sy][sx] = 1\n            while q:\n                x, y = q.popleft()\n\n                if G[y][x+1] == '.' and visited[y][x+1] == -1:\n                    q.append((x+1, y))\n                    dist[y][x+1] = dist[y][x] + 1\n                    visited[y][x+1] = 1\n\n                if G[y][x-1] == '.' and visited[y][x-1] == -1:\n                    q.append((x-1, y))\n                    dist[y][x-1] = dist[y][x] + 1\n                    visited[y][x-1] = 1\n\n                if G[y+1][x] == '.' and visited[y+1][x] == -1:\n                    q.append((x, y+1))\n                    dist[y+1][x] = dist[y][x] + 1\n                    visited[y+1][x] = 1\n\n                if G[y-1][x] == '.' and visited[y-1][x] == -1:\n                    q.append((x, y-1))\n                    dist[y-1][x] = dist[y][x] + 1\n                    visited[y-1][x] = 1\n            for i in range(W+2):\n                for j in range(H+2):\n                    ans = max(ans, dist[j][i])\nprint(ans)\n", "test_IO": {"input": ["3 3\n...\n...\n...\n"], "output": ["4\n"]}, "modified_context": "from collections import deque\nH, W = map(int, input().split())\nG = []\nfor i in range(H+2):\n    if i == 0 or i == H+1:\n        G.append('#'*(W+2))\n    else:\n        G.append('#' + input() + '#')\n\nans = 0\nfor sx in range(W+2):\n    for sy in range(H+2):\n        if G[ sy][ sx] == '.':\n            dist = [[-float('inf') for i in range(W+2)] for i in range(H+2)]\n            visited = [[-1 for i in range(W+2)] for i in range(H+2)]\n            q = deque([])\n            q.append((sx, sy))\n            dist[ sy][ sx] = 0\n            visited[ sy][ sx] = 1\n            while q:\n                x, y = q.popleft()\n\n                if G[ y][ x+1] == '.' and visited[ y][ x+1] == -1:\n                    q.append((x+1, y))\n                    dist[ y][ x+1] = dist[ y][ x] + 1\n                    visited[ y][ x+1] = 1\n\n                if G[ y][ x-1] == '.' and visited[ y][ x-1] == -1:\n                    q.append((x-1, y))\n                    dist[ y][ x-1] = dist[ y][ x] + 1\n                    visited[ y][ x-1] = 1\n\n                if G[ y+1][ x] == '.' and visited[ y+1][ x] == -1:\n                    q.append((x, y+1))\n                    dist[ y+1][ x] = dist[ y][ x] + 1\n                    visited[ y+1][ x] = 1\n\n                if G[ y-1][ x] == '.' and visited[ y-1][ x] == -1:\n                    q.append((x, y-1))\n                    dist[ y-1][ x] = dist[ y][ x] + 1\n                    visited[ y-1][ x] = 1\n            for i in range(W+2):\n                for j in range(H+2):\n                    ans = max(ans, dist[ j][ i])\nprint(ans)\n", "token_boundary_changed": false}
{"id": "Python/129", "code": "N = int(input())\nmo = []\nfor _ in range(N):\n    x, u = input().split()\n    x = float(x)\n    mo.append([x, u])\nokz = 0\nfor i in mo:\n    if i[1] == \"JPY\":\n        okz += i[0]\n    else:\n        okz += i[0]*380000\n\nprint(okz)\n", "test_IO": {"input": ["2\n10000 JPY\n0.10000000 BTC\n"], "output": ["48000.0\n"]}, "modified_context": "N = int(input())\nmo = []\nfor _ in range(N):\n    x, u = input().split()\n    x = float(x)\n    mo.append([ x, u])\nokz = 0\nfor i in mo:\n    if i[1] == \"JPY\":\n        okz += i[0]\n    else:\n        okz += i[0]*380000\n\nprint(okz)\n", "token_boundary_changed": false}
{"id": "Python/132", "code": "import sys\n\n\nfrom bisect import bisect_left, bisect_right\n\n\ninput = sys.stdin.readline\n\n\ndef getS(): return input().strip()\ndef getN(): return int(input())\ndef getList(): return list(map(int, input().split()))\ndef getZList(): return [int(x) - 1 for x in input().split()]\n\n\nINF = 10 ** 20\nMOD = 1000000007\n\n\ndef solve():\n    n = getN()\n    dp = [-INF]\n    for i in range(n):\n        num = getN()\n        num = -num\n        if num >= dp[-1]:\n            dp.append(num)\n        else:\n            idx = bisect_right(dp, num)\n            dp[idx] = num\n\n    print(len(dp) - 1)\n    return\n\n\ndef main():\n    n = getN()\n    for _ in range(n):\n        solve()\n\n\nif __name__ == \"__main__\":\n\n    solve()\n", "test_IO": {"input": ["5\n2\n1\n4\n5\n3\n"], "output": ["2\n"]}, "modified_context": "import sys\n\n\nfrom bisect import bisect_left, bisect_right\n\n\ninput = sys.stdin.readline\n\n\ndef getS(): return input().strip()\ndef getN(): return int(input())\ndef getList(): return list(map(int, input().split()))\ndef getZList(): return [ int(x) - 1 for x in input().split()]\n\n\nINF = 10 ** 20\nMOD = 1000000007\n\n\ndef solve():\n    n = getN()\n    dp = [-INF]\n    for i in range(n):\n        num = getN()\n        num = -num\n        if num >= dp[-1]:\n            dp.append(num)\n        else:\n            idx = bisect_right(dp, num)\n            dp[ idx] = num\n\n    print(len(dp) - 1)\n    return\n\n\ndef main():\n    n = getN()\n    for _ in range(n):\n        solve()\n\n\nif __name__ == \"__main__\":\n\n    solve()\n", "token_boundary_changed": false}
{"id": "Python/133", "code": "from collections import deque\nN, M = map(int, input().split())\nG = {i: [] for i in range(1, N+1)}\nfor _ in range(M):\n    a, b = map(int, input().split())\n    G[a].append(b)\n    G[b].append(a)\ncol = [-1 for _ in range(N+1)]\ncnt = 0\nfor i in range(1, N+1):\n    if col[i] < 0:\n        col[i] = cnt\n        que = deque([i])\n        while que:\n            x = que.popleft()\n            for y in G[x]:\n                if col[y] < 0:\n                    col[y] = cnt\n                    que.append(y)\n        cnt += 1\ncmax = max(col)\nprint(cmax)\n", "test_IO": {"input": ["3 1\n1 2\n"], "output": ["1\n"]}, "modified_context": "from collections import deque\nN, M = map(int, input().split())\nG = {i: [] for i in range(1, N+1)}\nfor _ in range(M):\n    a, b = map(int, input().split())\n    G[ a].append(b)\n    G[ b].append(a)\ncol = [-1 for _ in range(N+1)]\ncnt = 0\nfor i in range(1, N+1):\n    if col[ i] < 0:\n        col[ i] = cnt\n        que = deque([ i])\n        while que:\n            x = que.popleft()\n            for y in G[ x]:\n                if col[ y] < 0:\n                    col[ y] = cnt\n                    que.append(y)\n        cnt += 1\ncmax = max(col)\nprint(cmax)\n", "token_boundary_changed": false}
{"id": "Python/135", "code": "memTime = int(input())\nmemLate = input().split()\nmemLate = [int(i) for i in memLate]\ncolorList = []\nmemColor = 0\nhighLate = 0\nfor color in range(memTime):\n    member = memLate[color]\n    if member // 400 >= 8:\n        highLate += 1\n    elif ((member // 400) in colorList) == False:\n        colorList.append(member // 400)\nmaxColor = len(colorList) + highLate\nminColor = len(colorList)\nif minColor == 0:\n    minColor = 1\nprint(str(minColor) + \" \" + str(maxColor))\n", "test_IO": {"input": ["4\n2100 2500 2700 2700\n"], "output": ["2 2\n"]}, "modified_context": "memTime = int(input())\nmemLate = input().split()\nmemLate = [ int(i) for i in memLate]\ncolorList = []\nmemColor = 0\nhighLate = 0\nfor color in range(memTime):\n    member = memLate[ color]\n    if member // 400 >= 8:\n        highLate += 1\n    elif ((member // 400) in colorList) == False:\n        colorList.append(member // 400)\nmaxColor = len(colorList) + highLate\nminColor = len(colorList)\nif minColor == 0:\n    minColor = 1\nprint(str(minColor) + \" \" + str(maxColor))\n", "token_boundary_changed": false}
{"id": "Python/142", "code": "I = input\ns = I()*2\nprint(['No', 'Yes'][I() in s])\n", "test_IO": {"input": ["vanceknowledgetoad\nadvance\n"], "output": ["Yes\n"]}, "modified_context": "I = input\ns = I()*2\nprint(['No', 'Yes'][ I() in s])\n", "token_boundary_changed": false}
{"id": "Python/143", "code": "N, K = map(int, input().split())\nscore = list(map(int, input().split()))\nmae = 0\nusiro = K\nfor i in range(N-K):\n    if score[mae] < score[usiro]:\n        print('Yes')\n    else:\n        print('No')\n    mae += 1\n    usiro += 1\n", "test_IO": {"input": ["5 3\n96 98 95 100 20\n"], "output": ["Yes\nNo\n"]}, "modified_context": "N, K = map(int, input().split())\nscore = list(map(int, input().split()))\nmae = 0\nusiro = K\nfor i in range(N-K):\n    if score[ mae] < score[ usiro]:\n        print('Yes')\n    else:\n        print('No')\n    mae += 1\n    usiro += 1\n", "token_boundary_changed": false}
{"id": "Python/148", "code": "from heapq import heappush, heappop, heapify\nfrom collections import deque, defaultdict, Counter\nimport itertools\nfrom itertools import permutations, combinations, accumulate\nimport sys\nimport bisect\nimport string\nimport math\nimport time\n\n\ndef I(): return int(input())\n\n\ndef MI(): return map(int, input().split())\n\n\ndef LI(): return [int(i) for i in input().split()]\n\n\ndef LI_(): return [int(i)-1 for i in input().split()]\n\n\ndef StoI(): return [ord(i)-97 for i in input()]\n\n\ndef ItoS(nn): return chr(nn+97)\n\n\ndef input(): return sys.stdin.readline().rstrip()\n\n\ndef show(*inp, end='\\n'):\n    if show_flg:\n        print(*inp, end=end)\n\n\nYN = ['No', 'Yes']\nMOD = 10**9+7\ninf = float('inf')\nIINF = 10**10\nl_alp = string.ascii_lowercase\nu_alp = string.ascii_uppercase\nts = time.time()\nsys.setrecursionlimit(10**6)\nnums = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n\nshow_flg = False\n\n\ndef main():\n    N = I()\n    s = [0] * N\n    t = [0] * N\n\n    for i in range(N):\n        s[i], t[i] = map(str, input().split())\n        t[i] = int(t[i])\n\n    X = input()\n    xi = 0\n\n    for i in range(N):\n        if s[i] == X:\n            xi = i\n            break\n\n    ans = 0\n\n    for i in range(N):\n        if xi < i:\n            ans += t[i]\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "test_IO": {"input": ["3\ndwango 2\nsixth 5\nprelims 25\ndwango\n"], "output": ["30\n"]}, "modified_context": "from heapq import heappush, heappop, heapify\nfrom collections import deque, defaultdict, Counter\nimport itertools\nfrom itertools import permutations, combinations, accumulate\nimport sys\nimport bisect\nimport string\nimport math\nimport time\n\n\ndef I(): return int(input())\n\n\ndef MI(): return map(int, input().split())\n\n\ndef LI(): return [ int(i) for i in input().split()]\n\n\ndef LI_(): return [ int(i)-1 for i in input().split()]\n\n\ndef StoI(): return [ ord(i)-97 for i in input()]\n\n\ndef ItoS(nn): return chr(nn+97)\n\n\ndef input(): return sys.stdin.readline().rstrip()\n\n\ndef show(*inp, end='\\n'):\n    if show_flg:\n        print(*inp, end=end)\n\n\nYN = ['No', 'Yes']\nMOD = 10**9+7\ninf = float('inf')\nIINF = 10**10\nl_alp = string.ascii_lowercase\nu_alp = string.ascii_uppercase\nts = time.time()\nsys.setrecursionlimit(10**6)\nnums = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n\nshow_flg = False\n\n\ndef main():\n    N = I()\n    s = [0] * N\n    t = [0] * N\n\n    for i in range(N):\n        s[ i], t[ i] = map(str, input().split())\n        t[ i] = int(t[ i])\n\n    X = input()\n    xi = 0\n\n    for i in range(N):\n        if s[ i] == X:\n            xi = i\n            break\n\n    ans = 0\n\n    for i in range(N):\n        if xi < i:\n            ans += t[ i]\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "token_boundary_changed": false}
{"id": "Python/151", "code": "N = int(input())\nH = list(map(int, list(input().split())))\n\ncount_best, count_tmp = 0, 0\n\nfor i in range(N-1):\n    if H[i] >= H[i+1]:\n        count_tmp += 1\n    else:\n        if count_tmp > count_best:\n            count_best = count_tmp\n\n        count_tmp = 0\n\nif count_tmp > count_best:\n    count_best = count_tmp\n\nprint(count_best)\n", "test_IO": {"input": ["5\n10 4 8 7 3\n"], "output": ["2\n"]}, "modified_context": "N = int(input())\nH = list(map(int, list(input().split())))\n\ncount_best, count_tmp = 0, 0\n\nfor i in range(N-1):\n    if H[ i] >= H[ i+1]:\n        count_tmp += 1\n    else:\n        if count_tmp > count_best:\n            count_best = count_tmp\n\n        count_tmp = 0\n\nif count_tmp > count_best:\n    count_best = count_tmp\n\nprint(count_best)\n", "token_boundary_changed": false}
{"id": "Python/152", "code": "from itertools import chain\nimport numpy as np\nimport networkx as nx\n\nX = iter(open(0).readlines())\nh, w = map(int, next(X).split())\nC = np.zeros((10, 10), dtype=int)\nfor i in range(10):\n    for j, c in enumerate(map(int, next(X).split())):\n        C[i, j] = c\nA = np.zeros((h, w), dtype=int)\nfor i in range(h):\n    for j, a in enumerate(map(int, next(X).split())):\n        A[i, j] = a\n\nG = nx.DiGraph(C)\nd = {}\nfor i in range(10):\n    if i == 1:\n        continue\n    d[i] = nx.shortest_path_length(G, i, 1, weight='weight')\n\ns = 0\nfor a in chain.from_iterable(A):\n    if a == -1 or a == 1:\n        continue\n    s += d[a]\nprint(s)\n", "test_IO": {"input": ["2 4\n0 9 9 9 9 9 9 9 9 9\n9 0 9 9 9 9 9 9 9 9\n9 9 0 9 9 9 9 9 9 9\n9 9 9 0 9 9 9 9 9 9\n9 9 9 9 0 9 9 9 9 2\n9 9 9 9 9 0 9 9 9 9\n9 9 9 9 9 9 0 9 9 9\n9 9 9 9 9 9 9 0 9 9\n9 9 9 9 2 9 9 9 0 9\n9 2 9 9 9 9 9 9 9 0\n-1 -1 -1 -1\n8 1 1 8\n"], "output": ["12\n"]}, "modified_context": "from itertools import chain\nimport numpy as np\nimport networkx as nx\n\nX = iter(open(0).readlines())\nh, w = map(int, next(X).split())\nC = np.zeros((10, 10), dtype=int)\nfor i in range(10):\n    for j, c in enumerate(map(int, next(X).split())):\n        C[ i, j] = c\nA = np.zeros((h, w), dtype=int)\nfor i in range(h):\n    for j, a in enumerate(map(int, next(X).split())):\n        A[ i, j] = a\n\nG = nx.DiGraph(C)\nd = {}\nfor i in range(10):\n    if i == 1:\n        continue\n    d[ i] = nx.shortest_path_length(G, i, 1, weight='weight')\n\ns = 0\nfor a in chain.from_iterable(A):\n    if a == -1 or a == 1:\n        continue\n    s += d[ a]\nprint(s)\n", "token_boundary_changed": false}
{"id": "Python/153", "code": "n, k = map(int, input().split())\na = [i for i in input()]\nc = [0]*n\nfor i in range(1, n):\n    if a[i] == \"C\" and a[i-1] == \"A\":\n        c[i] = c[i-1]+1\n    else:\n        c[i] = c[i-1]\nfor w in range(k):\n    l, r = map(int, input().split())\n    print(c[r-1]-c[l-1])\n", "test_IO": {"input": ["8 3\nACACTACG\n3 7\n2 3\n1 8\n"], "output": ["2\n0\n3\n"]}, "modified_context": "n, k = map(int, input().split())\na = [ i for i in input()]\nc = [0]*n\nfor i in range(1, n):\n    if a[ i] == \"C\" and a[ i-1] == \"A\":\n        c[ i] = c[ i-1]+1\n    else:\n        c[ i] = c[ i-1]\nfor w in range(k):\n    l, r = map(int, input().split())\n    print(c[ r-1]-c[ l-1])\n", "token_boundary_changed": false}
{"id": "Python/154", "code": "from collections import deque\nfrom itertools import product, permutations, combinations\nimport sys\nsys.setrecursionlimit(1 << 25)\nreadline = sys.stdin.buffer.readline\nread = sys.stdin.readline\nra = range\nenu = enumerate\n\n\ndef exit(*argv, **kwarg):\n    print(*argv, **kwarg)\n    sys.exit()\n\n\ndef mina(*argv, sub=1): return list(map(lambda x: x - sub, argv))\n\n\ndef a_int(): return int(readline())\n\n\ndef ints(): return list(map(int, readline().split()))\n\n\ndef read_col(H):\n\n    ret = []\n    for _ in range(H):\n        ret.append(list(map(int, readline().split())))\n    return tuple(map(list, zip(*ret)))\n\n\ndef read_map_as(H, replace={'#': 1, '.': 0}, pad=None):\n\n    if pad is None:\n        ret = []\n        for _ in range(H):\n            ret.append([replace[s] for s in read()[:-1]])\n\n    else:\n        ret = [[pad] * (W + 2)]\n        for _ in range(H):\n            ret.append([pad] + [replace[s] for s in read()[:-1]] + [pad])\n        ret.append([pad] * (W + 2))\n\n    return ret\n\n\ndef grid_dijkstra(grid, si: int, sj: int):\n\n    from heapq import heappop, heappush\n    H = len(grid)\n    W = len(grid[0])\n    D = [[-1] * W for _ in [0] * H]\n    que = [(0, si, sj)]\n    while que:\n        c, i, j = heappop(que)\n        if D[i][j] != -1:\n            continue\n        D[i][j] = c\n        for di, dj in product([-2, -1, 0, 1, 2], repeat=2):\n            ni, nj = i + di, j + dj\n            if not (0 <= ni < H and 0 <= nj < W) or D[ni][nj] != -1 or ni == nj == 0 or grid[ni][nj] == 1:\n                continue\n            if (di == 0 and abs(dj) == 1) or (dj == 0 and abs(di) == 1):\n                nc = c\n            else:\n                nc = c + 1\n            heappush(que, (nc, ni, nj))\n    return D\n\n\nMOD = 10**9 + 7\nINF = 2**31\n\n\nH, W = ints()\nsi, sj = mina(*ints())\nti, tj = mina(*ints())\n\nS = read_map_as(H)\nD = [[-1] * W for _ in [0] * H]\nque = deque([(0, si, sj)])\nwhile que:\n    c, i, j = que.popleft()\n    if D[i][j] != -1:\n        continue\n    D[i][j] = c\n    for di, dj in product([-2, -1, 0, 1, 2], repeat=2):\n        ni, nj = i + di, j + dj\n        if not (0 <= ni < H and 0 <= nj < W) or D[ni][nj] != -1 or ni == nj == 0 or S[ni][nj] == 1:\n            continue\n        if (di == 0 and abs(dj) == 1) or (dj == 0 and abs(di) == 1):\n            que.appendleft((c, ni, nj))\n        else:\n            que.append((c + 1, ni, nj))\n\nprint(D[ti][tj])\n", "test_IO": {"input": ["4 4\n1 1\n4 4\n..#.\n..#.\n.#..\n.#..\n"], "output": ["1\n"]}, "modified_context": "from collections import deque\nfrom itertools import product, permutations, combinations\nimport sys\nsys.setrecursionlimit(1 << 25)\nreadline = sys.stdin.buffer.readline\nread = sys.stdin.readline\nra = range\nenu = enumerate\n\n\ndef exit(*argv, **kwarg):\n    print(*argv, **kwarg)\n    sys.exit()\n\n\ndef mina(*argv, sub=1): return list(map(lambda x: x - sub, argv))\n\n\ndef a_int(): return int(readline())\n\n\ndef ints(): return list(map(int, readline().split()))\n\n\ndef read_col(H):\n\n    ret = []\n    for _ in range(H):\n        ret.append(list(map(int, readline().split())))\n    return tuple(map(list, zip(*ret)))\n\n\ndef read_map_as(H, replace={'#': 1, '.': 0}, pad=None):\n\n    if pad is None:\n        ret = []\n        for _ in range(H):\n            ret.append([ replace[ s] for s in read()[:-1]])\n\n    else:\n        ret = [[ pad] * (W + 2)]\n        for _ in range(H):\n            ret.append([ pad] + [ replace[ s] for s in read()[:-1]] + [ pad])\n        ret.append([ pad] * (W + 2))\n\n    return ret\n\n\ndef grid_dijkstra(grid, si: int, sj: int):\n\n    from heapq import heappop, heappush\n    H = len(grid)\n    W = len(grid[0])\n    D = [[-1] * W for _ in [0] * H]\n    que = [(0, si, sj)]\n    while que:\n        c, i, j = heappop(que)\n        if D[ i][ j] != -1:\n            continue\n        D[ i][ j] = c\n        for di, dj in product([-2, -1, 0, 1, 2], repeat=2):\n            ni, nj = i + di, j + dj\n            if not (0 <= ni < H and 0 <= nj < W) or D[ ni][ nj] != -1 or ni == nj == 0 or grid[ ni][ nj] == 1:\n                continue\n            if (di == 0 and abs(dj) == 1) or (dj == 0 and abs(di) == 1):\n                nc = c\n            else:\n                nc = c + 1\n            heappush(que, (nc, ni, nj))\n    return D\n\n\nMOD = 10**9 + 7\nINF = 2**31\n\n\nH, W = ints()\nsi, sj = mina(*ints())\nti, tj = mina(*ints())\n\nS = read_map_as(H)\nD = [[-1] * W for _ in [0] * H]\nque = deque([(0, si, sj)])\nwhile que:\n    c, i, j = que.popleft()\n    if D[ i][ j] != -1:\n        continue\n    D[ i][ j] = c\n    for di, dj in product([-2, -1, 0, 1, 2], repeat=2):\n        ni, nj = i + di, j + dj\n        if not (0 <= ni < H and 0 <= nj < W) or D[ ni][ nj] != -1 or ni == nj == 0 or S[ ni][ nj] == 1:\n            continue\n        if (di == 0 and abs(dj) == 1) or (dj == 0 and abs(di) == 1):\n            que.appendleft((c, ni, nj))\n        else:\n            que.append((c + 1, ni, nj))\n\nprint(D[ ti][ tj])\n", "token_boundary_changed": false}
{"id": "Python/155", "code": "n, m = map(int, input().split())\na = list(map(int, input().split()))\na.sort(reverse=True)\ns = sum(a)/(4*m)\nif a[m-1] >= s:\n    print('Yes')\nelse:\n    print('No')\n", "test_IO": {"input": ["4 1\n5 4 2 1\n"], "output": ["Yes\n"]}, "modified_context": "n, m = map(int, input().split())\na = list(map(int, input().split()))\na.sort(reverse=True)\ns = sum(a)/(4*m)\nif a[ m-1] >= s:\n    print('Yes')\nelse:\n    print('No')\n", "token_boundary_changed": false}
{"id": "Python/157", "code": "n = int(input())\np = [int(x) for x in input().split()]\np_copy = p[:]\n\np.sort()\n\ncount = 0\nfor i in range(n):\n    if p[i] != p_copy[i]:\n        count += 1\n\nif count == 0 or count == 2:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "test_IO": {"input": ["5\n5 2 3 4 1\n"], "output": ["YES\n"]}, "modified_context": "n = int(input())\np = [ int(x) for x in input().split()]\np_copy = p[:]\n\np.sort()\n\ncount = 0\nfor i in range(n):\n    if p[ i] != p_copy[ i]:\n        count += 1\n\nif count == 0 or count == 2:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "token_boundary_changed": false}
{"id": "Python/158", "code": "N = int(input())\ncapacity_list = [int(input()) for _ in range(5)]\ncapacity_list.sort()\nbottle_neck = capacity_list[0]\nprint(4+int((N+bottle_neck-1)/bottle_neck))\n", "test_IO": {"input": ["5\n3\n2\n4\n3\n5\n"], "output": ["7\n"]}, "modified_context": "N = int(input())\ncapacity_list = [ int(input()) for _ in range(5)]\ncapacity_list.sort()\nbottle_neck = capacity_list[0]\nprint(4+int((N+bottle_neck-1)/bottle_neck))\n", "token_boundary_changed": false}
{"id": "Python/159", "code": "n = int(input())\nls = [list(map(int, input().split())) for i in range(n)]\nls = sorted(ls, key=lambda x: sum(x), reverse=True)\ntaka = sum([ls[i][0] for i in range(0, len(ls), 2)])\naoki = sum([ls[i][1] for i in range(1, len(ls), 2)])\n\nprint(taka-aoki)\n", "test_IO": {"input": ["3\n10 10\n20 20\n30 30\n"], "output": ["20\n"]}, "modified_context": "n = int(input())\nls = [ list(map(int, input().split())) for i in range(n)]\nls = sorted(ls, key=lambda x: sum(x), reverse=True)\ntaka = sum([ ls[ i][0] for i in range(0, len(ls), 2)])\naoki = sum([ ls[ i][1] for i in range(1, len(ls), 2)])\n\nprint(taka-aoki)\n", "token_boundary_changed": true}
{"id": "Python/160", "code": "n = int(input())\nF = [tuple(map(int, input().split())) for _ in range(n)]\nP = [tuple(map(int, input().split())) for _ in range(n)]\nans = -10 ** 18\n\nfor i in range(1, 2**10):\n    tmp = 0\n    lst = [0]*n\n    for j in range(10):\n        if (i >> j) & 1:\n            for k in range(n):\n                lst[k] += F[k][j]\n    for k in range(n):\n        tmp += P[k][lst[k]]\n    ans = max(ans, tmp)\n\n\nprint(ans)\n", "test_IO": {"input": ["1\n1 1 0 1 0 0 0 1 0 1\n3 4 5 6 7 8 9 -2 -3 4 -2\n"], "output": ["8\n"]}, "modified_context": "n = int(input())\nF = [ tuple(map(int, input().split())) for _ in range(n)]\nP = [ tuple(map(int, input().split())) for _ in range(n)]\nans = -10 ** 18\n\nfor i in range(1, 2**10):\n    tmp = 0\n    lst = [0]*n\n    for j in range(10):\n        if (i >> j) & 1:\n            for k in range(n):\n                lst[ k] += F[ k][ j]\n    for k in range(n):\n        tmp += P[ k][ lst[ k]]\n    ans = max(ans, tmp)\n\n\nprint(ans)\n", "token_boundary_changed": true}
{"id": "Python/161", "code": "X, N = list(map(int, input().split()))\np = list(map(int, input().split()))\n\np.sort()\n\ncandidates = {}\nfor i in range(-1, 102):\n\n    if i in p:\n        continue\n\n    if not (abs(X-i) in candidates.keys()):\n        candidates[abs(X-i)] = [i]\n    else:\n        candidates[abs(X-i)].append(i)\n\nsmallest = min(candidates.keys())\n\nminNum = min(candidates[smallest])\n\nprint(minNum)\n", "test_IO": {"input": ["6 5\n4 7 10 6 5\n"], "output": ["8\n"]}, "modified_context": "X, N = list(map(int, input().split()))\np = list(map(int, input().split()))\n\np.sort()\n\ncandidates = {}\nfor i in range(-1, 102):\n\n    if i in p:\n        continue\n\n    if not (abs(X-i) in candidates.keys()):\n        candidates[ abs(X-i)] = [ i]\n    else:\n        candidates[ abs(X-i)].append(i)\n\nsmallest = min(candidates.keys())\n\nminNum = min(candidates[ smallest])\n\nprint(minNum)\n", "token_boundary_changed": true}
{"id": "Python/162", "code": "from math import factorial as f\n\nN = int(input())\n\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\ndivs = []\nfor i in range(1, 101):\n    tmp = [0 for _ in range(len(primes))]\n    for j in range(len(primes)):\n        p = primes[j]\n        tmp[j] = 0\n        while (i//p == i/p):\n            i = i//p\n            tmp[j] += 1\n    divs.append(tmp)\n\n\ndivsum = [0 for _ in range(len(primes))]\nfor i in range(1, N+1):\n    for j in range(len(primes)):\n        divsum[j] += divs[i-1][j]\n\n\ndef num(n):\n    return len(list(filter(lambda x: x >= n-1, divsum)))\n\n\nans = 0\n\n\nans += num(75)\n\n\nans += num(15)*(num(5)-1)\n\n\nans += num(25)*(num(3)-1)\n\n\nans += num(5) * (num(5)-1) * (num(3)-2) // 2\nprint(int(ans))\n", "test_IO": {"input": ["9\n"], "output": ["0\n"]}, "modified_context": "from math import factorial as f\n\nN = int(input())\n\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\ndivs = []\nfor i in range(1, 101):\n    tmp = [0 for _ in range(len(primes))]\n    for j in range(len(primes)):\n        p = primes[ j]\n        tmp[ j] = 0\n        while (i//p == i/p):\n            i = i//p\n            tmp[ j] += 1\n    divs.append(tmp)\n\n\ndivsum = [0 for _ in range(len(primes))]\nfor i in range(1, N+1):\n    for j in range(len(primes)):\n        divsum[ j] += divs[ i-1][ j]\n\n\ndef num(n):\n    return len(list(filter(lambda x: x >= n-1, divsum)))\n\n\nans = 0\n\n\nans += num(75)\n\n\nans += num(15)*(num(5)-1)\n\n\nans += num(25)*(num(3)-1)\n\n\nans += num(5) * (num(5)-1) * (num(3)-2) // 2\nprint(int(ans))\n", "token_boundary_changed": false}
{"id": "Python/164", "code": "N = input()\nif N == 0:\n    print('Yes')\nelse:\n    N = str(N)\n    L = list(N)\n    L = [int(s) for s in L]\n    X = sum(L)\n    if X % 9 == 0:\n        print('Yes')\n    else:\n        print('No')\n", "test_IO": {"input": ["123456789\n"], "output": ["Yes\n"]}, "modified_context": "N = input()\nif N == 0:\n    print('Yes')\nelse:\n    N = str(N)\n    L = list(N)\n    L = [ int(s) for s in L]\n    X = sum(L)\n    if X % 9 == 0:\n        print('Yes')\n    else:\n        print('No')\n", "token_boundary_changed": false}
{"id": "Python/166", "code": "import math\n\nN = input()\nXS = [int(i) for i in input().split()]\n\nm = 9999999999\nfor i in range(1, 101):\n    c = sum([(x - i) ** 2 for x in XS])\n    if m > c:\n        m = c\n\nprint(m)\n", "test_IO": {"input": ["2\n1 4\n"], "output": ["5\n"]}, "modified_context": "import math\n\nN = input()\nXS = [ int(i) for i in input().split()]\n\nm = 9999999999\nfor i in range(1, 101):\n    c = sum([(x - i) ** 2 for x in XS])\n    if m > c:\n        m = c\n\nprint(m)\n", "token_boundary_changed": false}
{"id": "Python/169", "code": "d, g = list(map(int, input().split()))\npc = [list(map(int, input().split())) for _ in range(d)]\n\nans = float(\"inf\")\n\nfor bit in range(1 << d):\n    count = 0\n    sum = 0\n    nokori = set(range(1, d + 1))\n\n    for i in range(d):\n        if bit & (1 << i):\n            sum += pc[i][0] * (i + 1) * 100 + pc[i][1]\n            count += pc[i][0]\n            nokori.discard(i + 1)\n\n    if sum < g:\n        use = max(nokori)\n        n = min(pc[use-1][0], -(-(g - sum) // (use * 100)))\n        count += n\n        sum += n * use * 100\n\n    if sum >= g:\n        ans = min(ans, count)\nprint(ans)\n", "test_IO": {"input": ["2 700\n3 500\n5 800\n"], "output": ["3\n"]}, "modified_context": "d, g = list(map(int, input().split()))\npc = [ list(map(int, input().split())) for _ in range(d)]\n\nans = float(\"inf\")\n\nfor bit in range(1 << d):\n    count = 0\n    sum = 0\n    nokori = set(range(1, d + 1))\n\n    for i in range(d):\n        if bit & (1 << i):\n            sum += pc[ i][0] * (i + 1) * 100 + pc[ i][1]\n            count += pc[ i][0]\n            nokori.discard(i + 1)\n\n    if sum < g:\n        use = max(nokori)\n        n = min(pc[ use-1][0], -(-(g - sum) // (use * 100)))\n        count += n\n        sum += n * use * 100\n\n    if sum >= g:\n        ans = min(ans, count)\nprint(ans)\n", "token_boundary_changed": false}
{"id": "Python/170", "code": "a, b = map(int, input().split())\n\n\nx = [a + b]\n\nx.append(a - b)\n\nx.append(a * b)\nprint(max(x))\n", "test_IO": {"input": ["3 1\n"], "output": ["4\n"]}, "modified_context": "a, b = map(int, input().split())\n\n\nx = [ a + b]\n\nx.append(a - b)\n\nx.append(a * b)\nprint(max(x))\n", "token_boundary_changed": false}
{"id": "Python/172", "code": "n = int(input())\ns = input()\n\nleft = 0\nfor i in s:\n    if i == \")\":\n        left += 1\n    else:\n        break\n\nleft1 = 0\nright1 = 0\n\nfor i in range(left, n):\n    if s[i] == \"(\":\n        right1 += 1\n    elif right1 > 0:\n        right1 -= 1\n    else:\n        left1 += 1\n\nleft1 += left\nfor i in range(right1):\n    s += \")\"\nfor i in range(left1):\n    s = \"(\" + s\n\nprint(s)\n", "test_IO": {"input": ["3\n())\n"], "output": ["(())\n"]}, "modified_context": "n = int(input())\ns = input()\n\nleft = 0\nfor i in s:\n    if i == \")\":\n        left += 1\n    else:\n        break\n\nleft1 = 0\nright1 = 0\n\nfor i in range(left, n):\n    if s[ i] == \"(\":\n        right1 += 1\n    elif right1 > 0:\n        right1 -= 1\n    else:\n        left1 += 1\n\nleft1 += left\nfor i in range(right1):\n    s += \")\"\nfor i in range(left1):\n    s = \"(\" + s\n\nprint(s)\n", "token_boundary_changed": false}
{"id": "Python/174", "code": "import bisect\n\nN = int(input())\narr = [111, 222, 333, 444, 555, 666, 777, 888, 999]\nans_idx = bisect.bisect_left(arr, N)\nprint(arr[ans_idx])\n", "test_IO": {"input": ["111\n"], "output": ["111\n"]}, "modified_context": "import bisect\n\nN = int(input())\narr = [111, 222, 333, 444, 555, 666, 777, 888, 999]\nans_idx = bisect.bisect_left(arr, N)\nprint(arr[ ans_idx])\n", "token_boundary_changed": false}
{"id": "Python/175", "code": "import numpy\nn = int(input())\na = []\nfor i in range(2):\n    a.append(list(map(int, input().split())))\na[1] = a[1][::-1]\nres_0 = numpy.cumsum(a[0])\nres_1 = numpy.cumsum(a[1])\nans = 0\nfor i in range(n):\n    check = res_0[i] + res_1[n-1-i]\n    ans = max(ans, check)\nprint(ans)\n", "test_IO": {"input": ["5\n3 2 2 4 1\n1 2 2 2 1\n"], "output": ["14\n"]}, "modified_context": "import numpy\nn = int(input())\na = []\nfor i in range(2):\n    a.append(list(map(int, input().split())))\na[1] = a[1][::-1]\nres_0 = numpy.cumsum(a[0])\nres_1 = numpy.cumsum(a[1])\nans = 0\nfor i in range(n):\n    check = res_0[ i] + res_1[ n-1-i]\n    ans = max(ans, check)\nprint(ans)\n", "token_boundary_changed": false}
{"id": "Python/176", "code": "N = int(input())\na = list(map(int, input().split()))\na.sort()\n\ns = [ai for ai in a[N::2]]\nprint(sum(s))\n", "test_IO": {"input": ["2\n5 2 8 5 1 5\n"], "output": ["10\n"]}, "modified_context": "N = int(input())\na = list(map(int, input().split()))\na.sort()\n\ns = [ ai for ai in a[ N::2]]\nprint(sum(s))\n", "token_boundary_changed": false}
{"id": "Python/178", "code": "N, T = map(int, input().split())\nL = [[int(l) for l in input().split()] for _ in range(N)]\n\ndp = [[0]*T for _ in range(N+1)]\n\nfor i in range(N):\n    for j in range(T):\n        if j < L[i][0]:\n            dp[i+1][j] = dp[i][j]\n        else:\n            dp[i+1][j] = max(dp[i][j], dp[i][j-L[i][0]]+L[i][1])\n\nused = []\nB = dp[N][T-1]\nj = T-1\nfor i in range(N-1, -1, -1):\n    if B == dp[i][j]:\n        continue\n    B -= L[i][1]\n    used.append(i)\n    j -= L[i][0]\n\nans = dp[N][T-1]\nc = 0\nfor i in range(N):\n    if i in used:\n        continue\n    c = max(c, L[i][1])\n\nprint(ans+c)\n", "test_IO": {"input": ["2 60\n10 10\n100 100\n"], "output": ["110\n"]}, "modified_context": "N, T = map(int, input().split())\nL = [[ int(l) for l in input().split()] for _ in range(N)]\n\ndp = [[0]*T for _ in range(N+1)]\n\nfor i in range(N):\n    for j in range(T):\n        if j < L[ i][0]:\n            dp[ i+1][ j] = dp[ i][ j]\n        else:\n            dp[ i+1][ j] = max(dp[ i][ j], dp[ i][ j-L[ i][0]]+L[ i][1])\n\nused = []\nB = dp[ N][ T-1]\nj = T-1\nfor i in range(N-1, -1, -1):\n    if B == dp[ i][ j]:\n        continue\n    B -= L[ i][1]\n    used.append(i)\n    j -= L[ i][0]\n\nans = dp[ N][ T-1]\nc = 0\nfor i in range(N):\n    if i in used:\n        continue\n    c = max(c, L[ i][1])\n\nprint(ans+c)\n", "token_boundary_changed": false}
{"id": "Python/179", "code": "n = int(input())\nx = list(map(int, input().split()))\nans = 10**10\nfor i in range(101):\n    tmp = [abs(i - x[j])**2 for j in range(n)]\n    if sum(tmp) < ans:\n        ans = sum(tmp)\n\nprint(ans)\n", "test_IO": {"input": ["2\n1 4\n"], "output": ["5\n"]}, "modified_context": "n = int(input())\nx = list(map(int, input().split()))\nans = 10**10\nfor i in range(101):\n    tmp = [ abs(i - x[ j])**2 for j in range(n)]\n    if sum(tmp) < ans:\n        ans = sum(tmp)\n\nprint(ans)\n", "token_boundary_changed": false}
{"id": "Python/180", "code": "N = int(input())\nL = list(map(int, input().split()))\n\nans = 0\nfor i in range(N-2):\n    for j in range(i+1, N-1):\n        for k in range(j+1, N):\n            a = L[i]\n            b = L[j]\n            c = L[k]\n            if a == b or b == c or c == a:\n                continue\n            if a+b > c and b+c > a and c+a > b:\n                ans += 1\n\nprint(ans)\n", "test_IO": {"input": ["5\n4 4 9 7 5\n"], "output": ["5\n"]}, "modified_context": "N = int(input())\nL = list(map(int, input().split()))\n\nans = 0\nfor i in range(N-2):\n    for j in range(i+1, N-1):\n        for k in range(j+1, N):\n            a = L[ i]\n            b = L[ j]\n            c = L[ k]\n            if a == b or b == c or c == a:\n                continue\n            if a+b > c and b+c > a and c+a > b:\n                ans += 1\n\nprint(ans)\n", "token_boundary_changed": false}
{"id": "Python/181", "code": "import sys\nfrom collections import Counter, defaultdict\n\nINF = float('inf')\nMOD = 10 ** 9 + 7\n\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x) - 1 for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef II(): return int(sys.stdin.readline())\ndef SI(): return input()\n\n\ndef main():\n    n = II()\n    S = SI()\n    C = Counter(S)\n\n    return 'Yes' if C['R'] > n - C['R'] else 'No'\n\n\nprint(main())\n", "test_IO": {"input": ["4\nRRBR\n"], "output": ["Yes\n"]}, "modified_context": "import sys\nfrom collections import Counter, defaultdict\n\nINF = float('inf')\nMOD = 10 ** 9 + 7\n\n\ndef LI(): return [ int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [ int(x) - 1 for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef II(): return int(sys.stdin.readline())\ndef SI(): return input()\n\n\ndef main():\n    n = II()\n    S = SI()\n    C = Counter(S)\n\n    return 'Yes' if C['R'] > n - C['R'] else 'No'\n\n\nprint(main())\n", "token_boundary_changed": false}
{"id": "Python/185", "code": "n = int(input())\na = list(map(int, input().split()))\nbelow = 0\nfor i in range(n):\n    below += 1/a[i]\nprint(1/below)\n", "test_IO": {"input": ["2\n10 30\n"], "output": ["7.5\n"]}, "modified_context": "n = int(input())\na = list(map(int, input().split()))\nbelow = 0\nfor i in range(n):\n    below += 1/a[ i]\nprint(1/below)\n", "token_boundary_changed": false}
{"id": "Python/186", "code": "N = int(input())\nA = [int(x) for x in input().split()]\nans = abs(A[-1])\nA = [0]+A+[0]\ndiff = [0 for x in range(N)]\nfor i in range(1, N+1):\n    dif = abs(A[i]-A[i-1])+abs(A[i]-A[i+1])-abs(A[i-1]-A[i+1])\n    ans += abs(A[i]-A[i-1])\n    diff[i-1] = dif\n\nfor i in range(N):\n    print(ans-diff[i])\n", "test_IO": {"input": ["3\n3 5 -1\n"], "output": ["12\n8\n10\n"]}, "modified_context": "N = int(input())\nA = [ int(x) for x in input().split()]\nans = abs(A[-1])\nA = [0]+A+[0]\ndiff = [0 for x in range(N)]\nfor i in range(1, N+1):\n    dif = abs(A[ i]-A[ i-1])+abs(A[ i]-A[ i+1])-abs(A[ i-1]-A[ i+1])\n    ans += abs(A[ i]-A[ i-1])\n    diff[ i-1] = dif\n\nfor i in range(N):\n    print(ans-diff[ i])\n", "token_boundary_changed": false}
{"id": "Python/190", "code": "h, w = map(int, input().split())\nl = []\nfor _ in range(h):\n    a = list(map(str, input()))\n    l.append(a)\n\ntmp = 0\n\nfor i in range(h):\n    for j in range(w):\n        if l[i][j] == \"#\":\n            if j < tmp:\n                print(\"Impossible\")\n                exit()\n            else:\n                tmp = j\n\n\nprint(\"Possible\")\n", "test_IO": {"input": ["4 5\n##...\n.##..\n..##.\n...##\n"], "output": ["Possible\n"]}, "modified_context": "h, w = map(int, input().split())\nl = []\nfor _ in range(h):\n    a = list(map(str, input()))\n    l.append(a)\n\ntmp = 0\n\nfor i in range(h):\n    for j in range(w):\n        if l[ i][ j] == \"#\":\n            if j < tmp:\n                print(\"Impossible\")\n                exit()\n            else:\n                tmp = j\n\n\nprint(\"Possible\")\n", "token_boundary_changed": false}
{"id": "Python/192", "code": "def solver():\n    N = int(input())\n    action = []\n    for i in range(N):\n        action.append(list(map(int, input().split())))\n\n    dp = [[0 for _ in range(3)] for _ in range(N)]\n\n    for i in range(3):\n        dp[0][i] = action[0][i]\n\n    for i in range(1, N):\n        dp[i][0] = max(dp[i-1][1] + action[i][0], dp[i-1][2] + action[i][0])\n        dp[i][1] = max(dp[i-1][0] + action[i][1], dp[i-1][2] + action[i][1])\n        dp[i][2] = max(dp[i-1][0] + action[i][2], dp[i-1][1] + action[i][2])\n    print(max(dp[N-1]))\n\n\nsolver()\n", "test_IO": {"input": ["3\n10 40 70\n20 50 80\n30 60 90\n"], "output": ["210\n"]}, "modified_context": "def solver():\n    N = int(input())\n    action = []\n    for i in range(N):\n        action.append(list(map(int, input().split())))\n\n    dp = [[0 for _ in range(3)] for _ in range(N)]\n\n    for i in range(3):\n        dp[0][ i] = action[0][ i]\n\n    for i in range(1, N):\n        dp[ i][0] = max(dp[ i-1][1] + action[ i][0], dp[ i-1][2] + action[ i][0])\n        dp[ i][1] = max(dp[ i-1][0] + action[ i][1], dp[ i-1][2] + action[ i][1])\n        dp[ i][2] = max(dp[ i-1][0] + action[ i][2], dp[ i-1][1] + action[ i][2])\n    print(max(dp[ N-1]))\n\n\nsolver()\n", "token_boundary_changed": false}
{"id": "Python/193", "code": "n, m = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\nope = [list(map(int, input().split())) for _ in range(m)]\nope = sorted(ope, key=lambda x: x[1], reverse=True)\nj = 0\nfor i in range(n):\n    if a[i] < ope[j][1]:\n        a[i] = ope[j][1]\n        ope[j][0] -= 1\n        if ope[j][0] == 0:\n            j += 1\n            if j == len(ope):\n                break\n    else:\n        break\nprint(sum(a))\n", "test_IO": {"input": ["3 2\n5 1 4\n2 3\n1 5\n"], "output": ["14\n"]}, "modified_context": "n, m = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\nope = [ list(map(int, input().split())) for _ in range(m)]\nope = sorted(ope, key=lambda x: x[1], reverse=True)\nj = 0\nfor i in range(n):\n    if a[ i] < ope[ j][1]:\n        a[ i] = ope[ j][1]\n        ope[ j][0] -= 1\n        if ope[ j][0] == 0:\n            j += 1\n            if j == len(ope):\n                break\n    else:\n        break\nprint(sum(a))\n", "token_boundary_changed": false}
{"id": "Python/195", "code": "A, B = [int(x) for x in input().split()]\nif A < 10 and B < 10:\n    print(A*B)\nelse:\n    print(-1)\n", "test_IO": {"input": ["2 5\n"], "output": ["10\n"]}, "modified_context": "A, B = [ int(x) for x in input().split()]\nif A < 10 and B < 10:\n    print(A*B)\nelse:\n    print(-1)\n", "token_boundary_changed": false}
{"id": "Python/196", "code": "from operator import itemgetter\n\n\nn, k = map(int, input().split())\ninfo = [list(map(int, input().split())) for i in range(n)]\n\ninfo = sorted(info, key=itemgetter(1), reverse=True)\n\nselected = info[0:k]\nselected_only = []\nselected_chohuku = []\nunselected_only = []\nmemo = {}\nfor t, d in selected:\n    if t not in memo:\n        memo[t] = 1\n        selected_only.append(d)\n    else:\n        selected_chohuku.append(d)\n\ncnt_type = len(memo)\nfor t, d in info[k:]:\n    if t not in memo:\n        memo[t] = 1\n        unselected_only.append(d)\n\n\nsum_select = sum(selected_chohuku) + sum(selected_only)\nans = cnt_type*cnt_type + sum_select\n\nunselected_only = unselected_only[::-1]\nfor i in range(min(len(selected_chohuku), len(unselected_only))):\n    cnt_type += 1\n    sum_select += unselected_only[-1]\n    sum_select -= selected_chohuku[-1]\n    del unselected_only[-1]\n    del selected_chohuku[-1]\n    tmp = cnt_type*cnt_type + sum_select\n    ans = max(ans, tmp)\nprint(ans)\n", "test_IO": {"input": ["5 3\n1 9\n1 7\n2 6\n2 5\n3 1\n"], "output": ["26\n"]}, "modified_context": "from operator import itemgetter\n\n\nn, k = map(int, input().split())\ninfo = [ list(map(int, input().split())) for i in range(n)]\n\ninfo = sorted(info, key=itemgetter(1), reverse=True)\n\nselected = info[0:k]\nselected_only = []\nselected_chohuku = []\nunselected_only = []\nmemo = {}\nfor t, d in selected:\n    if t not in memo:\n        memo[ t] = 1\n        selected_only.append(d)\n    else:\n        selected_chohuku.append(d)\n\ncnt_type = len(memo)\nfor t, d in info[ k:]:\n    if t not in memo:\n        memo[ t] = 1\n        unselected_only.append(d)\n\n\nsum_select = sum(selected_chohuku) + sum(selected_only)\nans = cnt_type*cnt_type + sum_select\n\nunselected_only = unselected_only[::-1]\nfor i in range(min(len(selected_chohuku), len(unselected_only))):\n    cnt_type += 1\n    sum_select += unselected_only[-1]\n    sum_select -= selected_chohuku[-1]\n    del unselected_only[-1]\n    del selected_chohuku[-1]\n    tmp = cnt_type*cnt_type + sum_select\n    ans = max(ans, tmp)\nprint(ans)\n", "token_boundary_changed": false}
{"id": "Python/198", "code": "A, B = map(int, input().split())\nS = list(input())\nif S[A] == '-' and S.count('-') == 1:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "test_IO": {"input": ["3 4\n269-6650\n"], "output": ["Yes\n"]}, "modified_context": "A, B = map(int, input().split())\nS = list(input())\nif S[ A] == '-' and S.count('-') == 1:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "token_boundary_changed": false}
