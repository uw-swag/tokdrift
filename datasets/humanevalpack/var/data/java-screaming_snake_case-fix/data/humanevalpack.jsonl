{"task_id": "Java/0", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n", "canonical_solution": "        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                double distance = Math.abs(numbers.get(i) - numbers.get(j));\n                if (distance < threshold) return true;\n            }\n        }\n        return false;\n    }\n}", "buggy_solution": "        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                double distance = numbers.get(i) - numbers.get(j);\n                if (distance < threshold) return true;\n            }\n        }\n        return false;\n    }\n}", "bug_type": "missing logic", "failure_symptoms": "incorrect output", "entry_point": "hasCloseElements", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.hasCloseElements(new ArrayList<>(Arrays.asList(11.0, 2.0, 3.9, 4.0, 5.0, 2.2)), 0.3),\n                !s.hasCloseElements(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)), 0.05),\n                s.hasCloseElements(new ArrayList<>(Arrays.asList(1.0, 2.0, 5.9, 4.0, 5.0)), 0.95),\n                !s.hasCloseElements(new ArrayList<>(Arrays.asList(1.0, 2.0, 5.9, 4.0, 5.0)), 0.8),\n                s.hasCloseElements(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)), 0.1),\n                s.hasCloseElements(new ArrayList<>(Arrays.asList(1.1, 2.2, 3.1, 4.1, 5.1)), 1.0),\n                !s.hasCloseElements(new ArrayList<>(Arrays.asList(1.1, 2.2, 3.1, 4.1, 5.1)), 0.5)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.hasCloseElements(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0)), 0.5),\n                s.hasCloseElements(new ArrayList<>(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0)), 0.3)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public boolean hasCloseElements(List<Double> numbers, double threshold)", "docstring": "Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n>>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\nfalse\n>>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\ntrue", "instruction": "Write a Java function `public boolean hasCloseElements(List<Double> numbers, double threshold)` to solve the following problem:\nCheck if in given list of numbers, are any two numbers closer to each other than given threshold.\n>>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\nfalse\n>>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\ntrue", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean HAS_CLOSE_ELEMENTS(List<Double> numbers, double threshold) {\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                double distance = numbers.get(i) - numbers.get(j);\n                if (distance < threshold) return true;\n            }\n        }\n        return false;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.HAS_CLOSE_ELEMENTS(new ArrayList<>(Arrays.asList(11.0, 2.0, 3.9, 4.0, 5.0, 2.2)), 0.3),\n                !s.HAS_CLOSE_ELEMENTS(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)), 0.05),\n                s.HAS_CLOSE_ELEMENTS(new ArrayList<>(Arrays.asList(1.0, 2.0, 5.9, 4.0, 5.0)), 0.95),\n                !s.HAS_CLOSE_ELEMENTS(new ArrayList<>(Arrays.asList(1.0, 2.0, 5.9, 4.0, 5.0)), 0.8),\n                s.HAS_CLOSE_ELEMENTS(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)), 0.1),\n                s.HAS_CLOSE_ELEMENTS(new ArrayList<>(Arrays.asList(1.1, 2.2, 3.1, 4.1, 5.1)), 1.0),\n                !s.HAS_CLOSE_ELEMENTS(new ArrayList<>(Arrays.asList(1.1, 2.2, 3.1, 4.1, 5.1)), 0.5)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "HAS_CLOSE_ELEMENTS", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean HAS_CLOSE_ELEMENTS(List<Double> numbers, double threshold) {\n"}
{"task_id": "Java/1", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> separateParenGroups(String parenString) {\n", "canonical_solution": "        List<String> result = new ArrayList<>();\n        StringBuilder currentString = new StringBuilder();\n        int currentDepth = 0;\n\n        for (char c : parenString.toCharArray()) {\n            if (c == '(') {\n                currentDepth += 1;\n                currentString.append(c);\n            } else if (c == ')') {\n                currentDepth -= 1;\n                currentString.append(c);\n\n                if (currentDepth == 0) {\n                    result.add(currentString.toString());\n                    currentString.setLength(0);\n                }\n            }\n        }\n        return result;\n\n    }\n}", "buggy_solution": "        List<String> result = new ArrayList<>();\n        StringBuilder currentString = new StringBuilder();\n        int currentDepth = 0;\n\n        for (char c : parenString.toCharArray()) {\n            if (c == '(') {\n                currentDepth += 1;\n                currentString.append(c);\n            } else if (c == ')') {\n                currentDepth -= 1;\n                currentString.append(c);\n\n                if (currentDepth < 0) {\n                    result.add(currentString.toString());\n                    currentString.setLength(0);\n                }\n            }\n        }\n        return result;\n\n    }\n}", "bug_type": "operator misuse", "failure_symptoms": "incorrect output", "entry_point": "separateParenGroups", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.separateParenGroups(\"(()()) ((())) () ((())()())\").equals(Arrays.asList(\n                        \"(()())\", \"((()))\", \"()\", \"((())()())\"\n                )),\n                s.separateParenGroups(\"() (()) ((())) (((())))\").equals(Arrays.asList(\n                        \"()\", \"(())\", \"((()))\", \"(((())))\"\n                )),\n                s.separateParenGroups(\"(()(())((())))\").equals(Arrays.asList(\n                        \"(()(())((())))\"\n                )),\n                s.separateParenGroups(\"( ) (( )) (( )( ))\").equals(Arrays.asList(\"()\", \"(())\", \"(()())\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.separateParenGroups(\"( ) (( )) (( )( ))\").equals(Arrays.asList(\"()\", \"(())\", \"(()())\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<String> separateParenGroups(String paren_string)", "docstring": "Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separateParenGroups(\"( ) (( )) (( )( ))\")\n[\"()\", \"(())\", \"(()())\"]", "instruction": "Write a Java function `public List<String> separateParenGroups(String paren_string)` to solve the following problem:\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separateParenGroups(\"( ) (( )) (( )( ))\")\n[\"()\", \"(())\", \"(()())\"]", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> SEPARATE_PAREN_GROUPS(String PAREN_STRING) {\n        List<String> result = new ArrayList<>();\n        StringBuilder CURRENT_STRING = new StringBuilder();\n        int CURRENT_DEPTH = 0;\n\n        for (char c : PAREN_STRING.toCharArray()) {\n            if (c == '(') {\n                CURRENT_DEPTH += 1;\n                CURRENT_STRING.append(c);\n            } else if (c == ')') {\n                CURRENT_DEPTH -= 1;\n                CURRENT_STRING.append(c);\n\n                if (CURRENT_DEPTH < 0) {\n                    result.add(CURRENT_STRING.toString());\n                    CURRENT_STRING.setLength(0);\n                }\n            }\n        }\n        return result;\n\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.SEPARATE_PAREN_GROUPS(\"(()()) ((())) () ((())()())\").equals(Arrays.asList(\n                        \"(()())\", \"((()))\", \"()\", \"((())()())\"\n                )),\n                s.SEPARATE_PAREN_GROUPS(\"() (()) ((())) (((())))\").equals(Arrays.asList(\n                        \"()\", \"(())\", \"((()))\", \"(((())))\"\n                )),\n                s.SEPARATE_PAREN_GROUPS(\"(()(())((())))\").equals(Arrays.asList(\n                        \"(()(())((())))\"\n                )),\n                s.SEPARATE_PAREN_GROUPS(\"( ) (( )) (( )( ))\").equals(Arrays.asList(\"()\", \"(())\", \"(()())\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "SEPARATE_PAREN_GROUPS", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> SEPARATE_PAREN_GROUPS(String PAREN_STRING) {\n"}
{"task_id": "Java/2", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double truncateNumber(double number) {\n", "canonical_solution": "        return number % 1.0;\n    }\n}", "buggy_solution": "        return number % 1.0 + 1.0;\n    }\n}", "bug_type": "excess logic", "failure_symptoms": "incorrect output", "entry_point": "truncateNumber", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n            s.truncateNumber(3.5) == 0.5,\n            Math.abs(s.truncateNumber(1.33) - 0.33) < 1e-6,\n            Math.abs(s.truncateNumber(123.456) - 0.456) < 1e-6\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n            s.truncateNumber(3.5) == 0.5\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public double truncateNumber(double number)", "docstring": "Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\nReturn the decimal part of the number.\n>>> truncateNumber(3.5)\n0.5", "instruction": "Write a Java function `public double truncateNumber(double number)` to solve the following problem:\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\nReturn the decimal part of the number.\n>>> truncateNumber(3.5)\n0.5", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double TRUNCATE_NUMBER(double number) {\n        return number % 1.0 + 1.0;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n            s.TRUNCATE_NUMBER(3.5) == 0.5,\n            Math.abs(s.TRUNCATE_NUMBER(1.33) - 0.33) < 1e-6,\n            Math.abs(s.TRUNCATE_NUMBER(123.456) - 0.456) < 1e-6\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "TRUNCATE_NUMBER", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double TRUNCATE_NUMBER(double number) {\n"}
{"task_id": "Java/3", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean belowZero(List<Integer> operations) {\n", "canonical_solution": "        int balance = 0;\n\n        for (int op : operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}", "buggy_solution": "        int balance = 0;\n\n        for (int op : operations) {\n            balance += op;\n            if (balance == 0) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}", "bug_type": "operator misuse", "failure_symptoms": "incorrect output", "entry_point": "belowZero", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.belowZero(new ArrayList<>(Arrays.asList())),\n                !s.belowZero(new ArrayList<>(Arrays.asList(1, 2, -3, 1, 2, -3))),\n                s.belowZero(new ArrayList<>(Arrays.asList(1, 2, -4, 5, 6))),\n                !s.belowZero(new ArrayList<>(Arrays.asList(1, -1, 2, -2, 5, -5, 4, -4))),\n                s.belowZero(new ArrayList<>(Arrays.asList(1, -1, 2, -2, 5, -5, 4, -5))),\n                s.belowZero(new ArrayList<>(Arrays.asList(1, -2, 2, -2, 5, -5, 4, -4)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.belowZero(new ArrayList<>(Arrays.asList(1, 2, 3))),\n                s.belowZero(new ArrayList<>(Arrays.asList(1, 2, -4, 5)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public boolean belowZero(List<Integer> operations)", "docstring": "You're given a list of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account fallls below zero, and\nat that point function should return True. Otherwise it should return False.\n>>> belowZero(Arrays.asList(1, 2, 3))\nfalse\n>>> belowZero(Arrays.asList(1, 2, -4, 5))\ntrue", "instruction": "Write a Java function `public boolean belowZero(List<Integer> operations)` to solve the following problem:\nYou're given a list of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account fallls below zero, and\nat that point function should return True. Otherwise it should return False.\n>>> belowZero(Arrays.asList(1, 2, 3))\nfalse\n>>> belowZero(Arrays.asList(1, 2, -4, 5))\ntrue", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean BELOW_ZERO(List<Integer> operations) {\n        int balance = 0;\n\n        for (int op : operations) {\n            balance += op;\n            if (balance == 0) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.BELOW_ZERO(new ArrayList<>(Arrays.asList())),\n                !s.BELOW_ZERO(new ArrayList<>(Arrays.asList(1, 2, -3, 1, 2, -3))),\n                s.BELOW_ZERO(new ArrayList<>(Arrays.asList(1, 2, -4, 5, 6))),\n                !s.BELOW_ZERO(new ArrayList<>(Arrays.asList(1, -1, 2, -2, 5, -5, 4, -4))),\n                s.BELOW_ZERO(new ArrayList<>(Arrays.asList(1, -1, 2, -2, 5, -5, 4, -5))),\n                s.BELOW_ZERO(new ArrayList<>(Arrays.asList(1, -2, 2, -2, 5, -5, 4, -4)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "BELOW_ZERO", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean BELOW_ZERO(List<Integer> operations) {\n"}
{"task_id": "Java/4", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n", "canonical_solution": "        double sum = 0.0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n        double sumAbsDiff = 0.0;\n        for (double num : numbers) {\n            sumAbsDiff += Math.abs(num - mean);\n        }\n        return sumAbsDiff / numbers.size();\n    }\n}", "buggy_solution": "        double sum = 0.0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n        double sumAbsDiff = 0.0;\n        for (double num : numbers) {\n            sumAbsDiff += Math.abs(num - mean);\n        }\n        return sumAbsDiff / mean;\n    }\n}", "bug_type": "variable misuse", "failure_symptoms": "incorrect output", "entry_point": "meanAbsoluteDeviation", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Math.abs(s.meanAbsoluteDeviation(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0))) - 2.0/3.0) < 1e-6,\n                Math.abs(s.meanAbsoluteDeviation(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0))) - 1.0) < 1e-6,\n                Math.abs(s.meanAbsoluteDeviation(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))) - 6.0/5.0) < 1e-6\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Math.abs(s.meanAbsoluteDeviation(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0))) - 1.0) < 1e-6\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public double meanAbsoluteDeviation(List<Double> numbers)", "docstring": "For a given list of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n1.0", "instruction": "Write a Java function `public double meanAbsoluteDeviation(List<Double> numbers)` to solve the following problem:\nFor a given list of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n1.0", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double MEAN_ABSOLUTE_DEVIATION(List<Double> numbers) {\n        double sum = 0.0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n        double SUM_ABS_DIFF = 0.0;\n        for (double num : numbers) {\n            SUM_ABS_DIFF += Math.abs(num - mean);\n        }\n        return SUM_ABS_DIFF / mean;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Math.abs(s.MEAN_ABSOLUTE_DEVIATION(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0))) - 2.0/3.0) < 1e-6,\n                Math.abs(s.MEAN_ABSOLUTE_DEVIATION(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0))) - 1.0) < 1e-6,\n                Math.abs(s.MEAN_ABSOLUTE_DEVIATION(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))) - 6.0/5.0) < 1e-6\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "MEAN_ABSOLUTE_DEVIATION", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double MEAN_ABSOLUTE_DEVIATION(List<Double> numbers) {\n"}
{"task_id": "Java/6", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> parseNestedParens(String parenString) {\n", "canonical_solution": "        String[] groups = parenString.split(\" \");\n        List<Integer> result = new ArrayList<>(List.of());\n        for (String group : groups) {\n            if (group.length() > 0) {\n                int depth = 0;\n                int maxDepth = 0;\n                for (char c : group.toCharArray()) {\n                    if (c == '(') {\n                        depth += 1;\n                        maxDepth = Math.max(depth, maxDepth);\n                    } else {\n                        depth -= 1;\n                    }\n                }\n                result.add(maxDepth);\n            }\n        }\n        return result;\n    }\n}", "buggy_solution": "        String[] groups = parenString.split(\" \");\n        List<Integer> result = new ArrayList<>(List.of());\n        for (String group : groups) {\n            if (group.length() > 0) {\n                int depth = 0;\n                int maxDepth = 0;\n                for (char c : group.toCharArray()) {\n                    if (c == '(') {\n                        depth += 1;\n                        maxDepth = Math.max(depth, maxDepth);\n                    } else {\n                        maxDepth -= 1;\n                    }\n                }\n                result.add(maxDepth);\n            }\n        }\n        return result;\n    }\n}", "bug_type": "variable misuse", "failure_symptoms": "incorrect output", "entry_point": "parseNestedParens", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.parseNestedParens(\"(()()) ((())) () ((())()())\").equals(Arrays.asList(2, 3, 1, 3)),\n                s.parseNestedParens(\"() (()) ((())) (((())))\").equals(Arrays.asList(1, 2, 3, 4)),\n                s.parseNestedParens(\"(()(())((())))\").equals(Arrays.asList(4))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.parseNestedParens(\"(()()) ((())) () ((())()())\").equals(Arrays.asList(2, 3, 1, 3))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<Integer> parseNestedParens(String paren_string)", "docstring": "Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n[2, 3, 1, 3]", "instruction": "Write a Java function `public List<Integer> parseNestedParens(String paren_string)` to solve the following problem:\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n[2, 3, 1, 3]", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> PARSE_NESTED_PARENS(String PAREN_STRING) {\n        String[] groups = PAREN_STRING.split(\" \");\n        List<Integer> result = new ArrayList<>(List.of());\n        for (String group : groups) {\n            if (group.length() > 0) {\n                int depth = 0;\n                int MAX_DEPTH = 0;\n                for (char c : group.toCharArray()) {\n                    if (c == '(') {\n                        depth += 1;\n                        MAX_DEPTH = Math.max(depth, MAX_DEPTH);\n                    } else {\n                        MAX_DEPTH -= 1;\n                    }\n                }\n                result.add(MAX_DEPTH);\n            }\n        }\n        return result;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.PARSE_NESTED_PARENS(\"(()()) ((())) () ((())()())\").equals(Arrays.asList(2, 3, 1, 3)),\n                s.PARSE_NESTED_PARENS(\"() (()) ((())) (((())))\").equals(Arrays.asList(1, 2, 3, 4)),\n                s.PARSE_NESTED_PARENS(\"(()(())((())))\").equals(Arrays.asList(4))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "PARSE_NESTED_PARENS", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> PARSE_NESTED_PARENS(String PAREN_STRING) {\n"}
{"task_id": "Java/7", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n", "canonical_solution": "        List<String> result = new ArrayList<>();\n        for (String x : strings) {\n            if (x.contains(substring)) {\n                result.add(x);\n            }\n        }\n        return result;\n    }\n}", "buggy_solution": "        List<String> result = new ArrayList<>();\n        for (String x : strings) {\n            if (substring.contains(x)) {\n                result.add(x);\n            }\n        }\n        return result;\n    }\n}", "bug_type": "variable misuse", "failure_symptoms": "incorrect output", "entry_point": "filterBySubstring", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.filterBySubstring(new ArrayList<>(List.of()), \"john\").equals(List.of()),\n                s.filterBySubstring(new ArrayList<>(Arrays.asList(\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), \"xxx\").equals(Arrays.asList(\"xxx\", \"xxxAAA\", \"xxx\")),\n                s.filterBySubstring(new ArrayList<>(Arrays.asList(\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), \"xx\").equals(Arrays.asList(\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\")),\n                s.filterBySubstring(new ArrayList<>(Arrays.asList(\"grunt\", \"trumpet\", \"prune\", \"gruesome\")), \"run\").equals(Arrays.asList(\"grunt\", \"prune\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.filterBySubstring(new ArrayList<>(List.of()), \"s\").equals(List.of()),\n                s.filterBySubstring(new ArrayList<>(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\")), \"a\").equals(Arrays.asList(\"abc\", \"bacd\", \"array\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<String> filterBySubstring(List<String> strings, String substring)", "docstring": "Filter an input list of strings only for ones that contain given substring\n>>> filterBySubstring(List.of(), \"a\")\n[]\n>>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n[\"abc\", \"bacd\", \"array\"]", "instruction": "Write a Java function `public List<String> filterBySubstring(List<String> strings, String substring)` to solve the following problem:\nFilter an input list of strings only for ones that contain given substring\n>>> filterBySubstring(List.of(), \"a\")\n[]\n>>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n[\"abc\", \"bacd\", \"array\"]", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> FILTER_BY_SUBSTRING(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String x : strings) {\n            if (substring.contains(x)) {\n                result.add(x);\n            }\n        }\n        return result;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.FILTER_BY_SUBSTRING(new ArrayList<>(List.of()), \"john\").equals(List.of()),\n                s.FILTER_BY_SUBSTRING(new ArrayList<>(Arrays.asList(\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), \"xxx\").equals(Arrays.asList(\"xxx\", \"xxxAAA\", \"xxx\")),\n                s.FILTER_BY_SUBSTRING(new ArrayList<>(Arrays.asList(\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), \"xx\").equals(Arrays.asList(\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\")),\n                s.FILTER_BY_SUBSTRING(new ArrayList<>(Arrays.asList(\"grunt\", \"trumpet\", \"prune\", \"gruesome\")), \"run\").equals(Arrays.asList(\"grunt\", \"prune\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "FILTER_BY_SUBSTRING", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> FILTER_BY_SUBSTRING(List<String> strings, String substring) {\n"}
{"task_id": "Java/8", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sumProduct(List<Integer> numbers) {\n", "canonical_solution": "        int sum = 0;\n        int product = 1;\n\n        for (int n : numbers) {\n            sum += n;\n            product *= n;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "buggy_solution": "        int sum = 0;\n        int product = 0;\n\n        for (int n : numbers) {\n            sum += n;\n            product *= n;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "bug_type": "value misuse", "failure_symptoms": "incorrect output", "entry_point": "sumProduct", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sumProduct(new ArrayList<>(List.of())).equals(Arrays.asList(0, 1)),\n                s.sumProduct(new ArrayList<>(Arrays.asList(1, 1, 1))).equals(Arrays.asList(3, 1)),\n                s.sumProduct(new ArrayList<>(Arrays.asList(100, 0))).equals(Arrays.asList(100, 0)),\n                s.sumProduct(new ArrayList<>(Arrays.asList(3, 5, 7))).equals(Arrays.asList(3 + 5 + 7, 3 * 5 * 7)),\n                s.sumProduct(new ArrayList<>(List.of(10))).equals(Arrays.asList(10, 10))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sumProduct(new ArrayList<>(List.of())).equals(Arrays.asList(0, 1)),\n                s.sumProduct(new ArrayList<>(Arrays.asList(1, 2, 3,4))).equals(Arrays.asList(10, 24))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<Integer> sumProduct(List<Integer> numbers)", "docstring": "For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sumProduct(List.of())\n[0, 1]\n>>> sumProduct(Arrays.asList(1, 2, 3, 4))\n[10, 24]", "instruction": "Write a Java function `public List<Integer> sumProduct(List<Integer> numbers)` to solve the following problem:\nFor a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sumProduct(List.of())\n[0, 1]\n>>> sumProduct(Arrays.asList(1, 2, 3, 4))\n[10, 24]", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> SUM_PRODUCT(List<Integer> numbers) {\n        int sum = 0;\n        int product = 0;\n\n        for (int n : numbers) {\n            sum += n;\n            product *= n;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.SUM_PRODUCT(new ArrayList<>(List.of())).equals(Arrays.asList(0, 1)),\n                s.SUM_PRODUCT(new ArrayList<>(Arrays.asList(1, 1, 1))).equals(Arrays.asList(3, 1)),\n                s.SUM_PRODUCT(new ArrayList<>(Arrays.asList(100, 0))).equals(Arrays.asList(100, 0)),\n                s.SUM_PRODUCT(new ArrayList<>(Arrays.asList(3, 5, 7))).equals(Arrays.asList(3 + 5 + 7, 3 * 5 * 7)),\n                s.SUM_PRODUCT(new ArrayList<>(List.of(10))).equals(Arrays.asList(10, 10))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "SUM_PRODUCT", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> SUM_PRODUCT(List<Integer> numbers) {\n"}
{"task_id": "Java/9", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> rollingMax(List<Integer> numbers) {\n", "canonical_solution": "        List<Integer> result = new ArrayList<>();\n        if (numbers.size() == 0) {\n            return result;\n        }\n        int rollingMax = numbers.get(0);\n        result.add(rollingMax);\n\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > rollingMax) {\n                rollingMax = numbers.get(i);\n            }\n            result.add(rollingMax);\n        }\n\n        return result;\n    }\n}", "buggy_solution": "        List<Integer> result = new ArrayList<>();\n        if (numbers.size() == 0) {\n            return result;\n        }\n        int rollingMax = 1;\n        result.add(rollingMax);\n\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > rollingMax) {\n                rollingMax = numbers.get(i);\n            }\n            result.add(rollingMax);\n        }\n\n        return result;\n    }\n}", "bug_type": "variable misuse", "failure_symptoms": "incorrect output", "entry_point": "rollingMax", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.rollingMax(new ArrayList<>(List.of())).equals(List.of()),\n                s.rollingMax(new ArrayList<>(Arrays.asList(1, 2, 3, 4))).equals(Arrays.asList(1, 2, 3, 4)),\n                s.rollingMax(new ArrayList<>(Arrays.asList(4, 3, 2, 1))).equals(Arrays.asList(4, 4, 4, 4)),\n                s.rollingMax(new ArrayList<>(Arrays.asList(3, 2, 3, 100, 3))).equals(Arrays.asList(3, 3, 3, 100, 100))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.rollingMax(new ArrayList<>(List.of(1, 2, 3, 2, 3, 4, 2))).equals(List.of(1, 2, 3, 3, 3, 4, 4))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<Integer> rollingMax(List<Integer> numbers)", "docstring": "From a given list of integers, generate a list of rolling maximum element found until given moment\nin the sequence.\n>>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n[1, 2, 3, 3, 3, 4, 4]", "instruction": "Write a Java function `public List<Integer> rollingMax(List<Integer> numbers)` to solve the following problem:\nFrom a given list of integers, generate a list of rolling maximum element found until given moment\nin the sequence.\n>>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n[1, 2, 3, 3, 3, 4, 4]", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> ROLLING_MAX(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        if (numbers.size() == 0) {\n            return result;\n        }\n        int ROLLING_MAX = 1;\n        result.add(ROLLING_MAX);\n\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > ROLLING_MAX) {\n                ROLLING_MAX = numbers.get(i);\n            }\n            result.add(ROLLING_MAX);\n        }\n\n        return result;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.ROLLING_MAX(new ArrayList<>(List.of())).equals(List.of()),\n                s.ROLLING_MAX(new ArrayList<>(Arrays.asList(1, 2, 3, 4))).equals(Arrays.asList(1, 2, 3, 4)),\n                s.ROLLING_MAX(new ArrayList<>(Arrays.asList(4, 3, 2, 1))).equals(Arrays.asList(4, 4, 4, 4)),\n                s.ROLLING_MAX(new ArrayList<>(Arrays.asList(3, 2, 3, 100, 3))).equals(Arrays.asList(3, 3, 3, 100, 100))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "ROLLING_MAX", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> ROLLING_MAX(List<Integer> numbers) {\n"}
{"task_id": "Java/10", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    public String makePalindrome(String string) {\n", "canonical_solution": "        if (string.length() == 0) {\n            return \"\";\n        }\n\n        int beginningOfSuffix = 0;\n\n        while (!isPalindrome(string.substring(beginningOfSuffix))) {\n            beginningOfSuffix++;\n        }\n\n        return string + new StringBuffer(string.substring(0, beginningOfSuffix)).reverse().toString();\n    }\n}", "buggy_solution": "        if (string.length() == 0) {\n            return \"\";\n        }\n\n        int beginningOfSuffix = 0;\n\n        while (!isPalindrome(string)) {\n            beginningOfSuffix++;\n        }\n\n        return string + new StringBuffer(string.substring(0, beginningOfSuffix)).reverse().toString();\n    }\n}", "bug_type": "missing logic", "failure_symptoms": "stackoverflow", "entry_point": "makePalindrome", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.makePalindrome(\"\"), \"\"),\n                Objects.equals(s.makePalindrome(\"x\"), \"x\"),\n                Objects.equals(s.makePalindrome(\"xyz\"), \"xyzyx\"),\n                Objects.equals(s.makePalindrome(\"xyx\"), \"xyx\"),\n                Objects.equals(s.makePalindrome(\"jerry\"), \"jerryrrej\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.makePalindrome(\"\"), \"\"),\n                Objects.equals(s.makePalindrome(\"cat\"), \"catac\"),\n                Objects.equals(s.makePalindrome(\"cata\"), \"catac\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public String makePalindrome(String string)", "docstring": "Find the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> makePalindrome(\"\")\n\"\"\n>>> makePalindrome(\"cat\")\n\"catac\"\n>>> makePalindrome(\"cata\")\n\"catac\"", "instruction": "Write a Java function `public String makePalindrome(String string)` to solve the following problem:\nFind the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> makePalindrome(\"\")\n\"\"\n>>> makePalindrome(\"cat\")\n\"catac\"\n>>> makePalindrome(\"cata\")\n\"catac\"", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean IS_PALINDROME(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    public String MAKE_PALINDROME(String string) {\n        if (string.length() == 0) {\n            return \"\";\n        }\n\n        int BEGINNING_OF_SUFFIX = 0;\n\n        while (!IS_PALINDROME(string)) {\n            BEGINNING_OF_SUFFIX++;\n        }\n\n        return string + new StringBuffer(string.substring(0, BEGINNING_OF_SUFFIX)).reverse().toString();\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.MAKE_PALINDROME(\"\"), \"\"),\n                Objects.equals(s.MAKE_PALINDROME(\"x\"), \"x\"),\n                Objects.equals(s.MAKE_PALINDROME(\"xyz\"), \"xyzyx\"),\n                Objects.equals(s.MAKE_PALINDROME(\"xyx\"), \"xyx\"),\n                Objects.equals(s.MAKE_PALINDROME(\"jerry\"), \"jerryrrej\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "MAKE_PALINDROME", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean IS_PALINDROME(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    public String MAKE_PALINDROME(String string) {\n"}
{"task_id": "Java/11", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String stringXor(String a, String b) {\n", "canonical_solution": "        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result.append(\"0\");\n            } else {\n                result.append(\"1\");\n            }\n        }\n        return result.toString();\n    }\n}", "buggy_solution": "        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result.append(\"1\");\n            } else {\n                result.append(\"0\");\n            }\n        }\n        return result.toString();\n    }\n}", "bug_type": "value misuse", "failure_symptoms": "incorrect output", "entry_point": "stringXor", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.stringXor(\"111000\", \"101010\"), \"010010\"),\n                Objects.equals(s.stringXor(\"1\", \"1\"), \"0\"),\n                Objects.equals(s.stringXor(\"0101\", \"0000\"), \"0101\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.stringXor(\"010\", \"110\"), \"100\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public String stringXor(String a, String b)", "docstring": "Input are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> stringXor(\"010\", \"110\")\n\"100\"", "instruction": "Write a Java function `public String stringXor(String a, String b)` to solve the following problem:\nInput are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> stringXor(\"010\", \"110\")\n\"100\"", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String STRING_XOR(String a, String b) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result.append(\"1\");\n            } else {\n                result.append(\"0\");\n            }\n        }\n        return result.toString();\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.STRING_XOR(\"111000\", \"101010\"), \"010010\"),\n                Objects.equals(s.STRING_XOR(\"1\", \"1\"), \"0\"),\n                Objects.equals(s.STRING_XOR(\"0101\", \"0000\"), \"0101\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "STRING_XOR", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String STRING_XOR(String a, String b) {\n"}
{"task_id": "Java/13", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int greatestCommonDivisor(int a, int b) {\n", "canonical_solution": "        if (a == 0 || b == 0) {\n            return a + b;\n        }\n        if (a == b) {\n            return a;\n        }\n        if (a > b) {\n            return greatestCommonDivisor(a % b, b);\n        } else {\n            return greatestCommonDivisor(a, b % a);\n        }\n    }\n}", "buggy_solution": "        if (a == 0 || b == 0) {\n            return a + b;\n        }\n        if (a == b) {\n            return a;\n        }\n        if (a > b) {\n            return greatestCommonDivisor(a % b, a);\n        } else {\n            return greatestCommonDivisor(a, b % b);\n        }\n    }\n}", "bug_type": "variable misuse", "failure_symptoms": "incorrect output", "entry_point": "greatestCommonDivisor", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.greatestCommonDivisor(3, 7) == 1,\n                s.greatestCommonDivisor(10, 15) == 5,\n                s.greatestCommonDivisor(49, 14) == 7,\n                s.greatestCommonDivisor(144, 60) == 12\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.greatestCommonDivisor(3, 5) == 1,\n                s.greatestCommonDivisor(25, 15) == 5\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public int greatestCommonDivisor(int a, int b)", "docstring": "Return a greatest common divisor of two integers a and b\n>>> greatestCommonDivisor(3, 5)\n1\n>>> greatestCommonDivisor(25, 15)\n5", "instruction": "Write a Java function `public int greatestCommonDivisor(int a, int b)` to solve the following problem:\nReturn a greatest common divisor of two integers a and b\n>>> greatestCommonDivisor(3, 5)\n1\n>>> greatestCommonDivisor(25, 15)\n5", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int GREATEST_COMMON_DIVISOR(int a, int b) {\n        if (a == 0 || b == 0) {\n            return a + b;\n        }\n        if (a == b) {\n            return a;\n        }\n        if (a > b) {\n            return GREATEST_COMMON_DIVISOR(a % b, a);\n        } else {\n            return GREATEST_COMMON_DIVISOR(a, b % b);\n        }\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.GREATEST_COMMON_DIVISOR(3, 7) == 1,\n                s.GREATEST_COMMON_DIVISOR(10, 15) == 5,\n                s.GREATEST_COMMON_DIVISOR(49, 14) == 7,\n                s.GREATEST_COMMON_DIVISOR(144, 60) == 12\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "GREATEST_COMMON_DIVISOR", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int GREATEST_COMMON_DIVISOR(int a, int b) {\n"}
{"task_id": "Java/14", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> allPrefixes(String string) {\n", "canonical_solution": "        List<String> result = new ArrayList<>();\n\n        for (int i = 1; i <= string.length(); i++) {\n            result.add(string.substring(0, i));\n        }\n        return result;\n    }\n}", "buggy_solution": "        List<String> result = new ArrayList<>();\n\n        for (int i = 1; i <= string.length()-1; i++) {\n            result.add(string.substring(0, i));\n        }\n        return result;\n    }\n}", "bug_type": "excess logic", "failure_symptoms": "incorrect output", "entry_point": "allPrefixes", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.allPrefixes(\"\").equals(List.of()),\n                s.allPrefixes(\"asdfgh\").equals(Arrays.asList(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")),\n                s.allPrefixes(\"WWW\").equals(Arrays.asList(\"W\", \"WW\", \"WWW\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.allPrefixes(\"abc\").equals(Arrays.asList(\"a\", \"ab\", \"abc\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<String> allPrefixes(String string)", "docstring": "Return list of all prefixes from shortest to longest of the input string\n>>> allPrefixes(\"abc\")\n[\"a\", \"ab\", \"abc\"]", "instruction": "Write a Java function `public List<String> allPrefixes(String string)` to solve the following problem:\nReturn list of all prefixes from shortest to longest of the input string\n>>> allPrefixes(\"abc\")\n[\"a\", \"ab\", \"abc\"]", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> ALL_PREFIXES(String string) {\n        List<String> result = new ArrayList<>();\n\n        for (int i = 1; i <= string.length()-1; i++) {\n            result.add(string.substring(0, i));\n        }\n        return result;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.ALL_PREFIXES(\"\").equals(List.of()),\n                s.ALL_PREFIXES(\"asdfgh\").equals(Arrays.asList(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")),\n                s.ALL_PREFIXES(\"WWW\").equals(Arrays.asList(\"W\", \"WW\", \"WWW\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "ALL_PREFIXES", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> ALL_PREFIXES(String string) {\n"}
{"task_id": "Java/15", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String stringSequence(int n) {\n", "canonical_solution": "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n        }\n        sb.append(n);\n        return sb.toString();\n    }\n}", "buggy_solution": "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n-1; i++) {\n            sb.append(i);\n            sb.append(\" \");\n        }\n        sb.append(n);\n        return sb.toString();\n    }\n}", "bug_type": "value misuse", "failure_symptoms": "incorrect output", "entry_point": "stringSequence", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.stringSequence(0).equals(\"0\"),\n                s.stringSequence(3).equals(\"0 1 2 3\"),\n                s.stringSequence(10).equals(\"0 1 2 3 4 5 6 7 8 9 10\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.stringSequence(0).equals(\"0\"),\n                s.stringSequence(5).equals(\"0 1 2 3 4 5\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public String stringSequence(int n)", "docstring": "Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> stringSequence(0)\n\"0\"\n>>> stringSequence(5)\n\"0 1 2 3 4 5\"", "instruction": "Write a Java function `public String stringSequence(int n)` to solve the following problem:\nReturn a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> stringSequence(0)\n\"0\"\n>>> stringSequence(5)\n\"0 1 2 3 4 5\"", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String STRING_SEQUENCE(int n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n-1; i++) {\n            sb.append(i);\n            sb.append(\" \");\n        }\n        sb.append(n);\n        return sb.toString();\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.STRING_SEQUENCE(0).equals(\"0\"),\n                s.STRING_SEQUENCE(3).equals(\"0 1 2 3\"),\n                s.STRING_SEQUENCE(10).equals(\"0 1 2 3 4 5 6 7 8 9 10\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "STRING_SEQUENCE", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String STRING_SEQUENCE(int n) {\n"}
{"task_id": "Java/16", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int countDistinctCharacters(String string) {\n", "canonical_solution": "        Set<Character> set = new HashSet<>();\n        for (char c : string.toLowerCase().toCharArray()) {\n            set.add(c);\n        }\n        return set.size();\n    }\n}", "buggy_solution": "        Set<Character> set = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            set.add(c);\n        }\n        return set.size();\n    }\n}", "bug_type": "missing logic", "failure_symptoms": "incorrect output", "entry_point": "countDistinctCharacters", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.countDistinctCharacters(\"\") == 0,\n                s.countDistinctCharacters(\"abcde\") == 5,\n                s.countDistinctCharacters(\"abcde\" + \"cade\" + \"CADE\") == 5,\n                s.countDistinctCharacters(\"aaaaAAAAaaaa\") == 1,\n                s.countDistinctCharacters(\"Jerry jERRY JeRRRY\") == 5\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.countDistinctCharacters(\"xyzXYZ\") == 3,\n                s.countDistinctCharacters(\"Jerry\") == 4\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public int countDistinctCharacters(String string)", "docstring": "Given a string, find out how many distinct characters (regardless of case) does it consist of\n>>> countDistinctCharacters(\"xyzXYZ\")\n3\n>>> countDistinctCharacters(\"Jerry\")\n4", "instruction": "Write a Java function `public int countDistinctCharacters(String string)` to solve the following problem:\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> countDistinctCharacters(\"xyzXYZ\")\n3\n>>> countDistinctCharacters(\"Jerry\")\n4", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int COUNT_DISTINCT_CHARACTERS(String string) {\n        Set<Character> set = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            set.add(c);\n        }\n        return set.size();\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.COUNT_DISTINCT_CHARACTERS(\"\") == 0,\n                s.COUNT_DISTINCT_CHARACTERS(\"abcde\") == 5,\n                s.COUNT_DISTINCT_CHARACTERS(\"abcde\" + \"cade\" + \"CADE\") == 5,\n                s.COUNT_DISTINCT_CHARACTERS(\"aaaaAAAAaaaa\") == 1,\n                s.COUNT_DISTINCT_CHARACTERS(\"Jerry jERRY JeRRRY\") == 5\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "COUNT_DISTINCT_CHARACTERS", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int COUNT_DISTINCT_CHARACTERS(String string) {\n"}
{"task_id": "Java/17", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> parseMusic(String string) {\n", "canonical_solution": "        String[] notes = string.split(\" \");\n        List<Integer> result = new ArrayList<>();\n        for (String s : notes) {\n            switch (s) {\n                case \"o\" -> result.add(4);\n                case \"o|\" -> result.add(2);\n                case \".|\" -> result.add(1);\n            }\n        }\n        return result;\n    }\n}", "buggy_solution": "        String[] notes = string.split(\" \");\n        List<Integer> result = new ArrayList<>();\n        for (String s : notes) {\n            switch (s) {\n                case \"o\" -> result.add(3);\n                case \"o|\" -> result.add(2);\n                case \".|\" -> result.add(1);\n            }\n        }\n        return result;\n    }\n}", "bug_type": "value misuse", "failure_symptoms": "incorrect output", "entry_point": "parseMusic", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.parseMusic(\"\").equals(List.of()),\n                s.parseMusic(\"o o o o\").equals(Arrays.asList(4, 4, 4, 4)),\n                s.parseMusic(\".| .| .| .|\").equals(Arrays.asList(1, 1, 1, 1)),\n                s.parseMusic(\"o| o| .| .| o o o o\").equals(Arrays.asList(2, 2, 1, 1, 4, 4, 4, 4)),\n                s.parseMusic(\"o| .| o| .| o o| o o|\").equals(Arrays.asList(2, 1, 2, 1, 4, 2, 4, 2))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.parseMusic(\"o o| .| o| o| .| .| .| .| o o\").equals(Arrays.asList(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<Integer> parseMusic(String string)", "docstring": "Input to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return list of integers corresponding to how many beats does each\nnot last.\nHere is a legend:\n\"o\" - whole note, lasts four beats\n\"o|\" - half note, lasts two beats\n\".|\" - quater note, lasts one beat\n>>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]", "instruction": "Write a Java function `public List<Integer> parseMusic(String string)` to solve the following problem:\nInput to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return list of integers corresponding to how many beats does each\nnot last.\nHere is a legend:\n\"o\" - whole note, lasts four beats\n\"o|\" - half note, lasts two beats\n\".|\" - quater note, lasts one beat\n>>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> PARSE_MUSIC(String string) {\n        String[] notes = string.split(\" \");\n        List<Integer> result = new ArrayList<>();\n        for (String s : notes) {\n            switch (s) {\n                case \"o\" -> result.add(3);\n                case \"o|\" -> result.add(2);\n                case \".|\" -> result.add(1);\n            }\n        }\n        return result;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.PARSE_MUSIC(\"\").equals(List.of()),\n                s.PARSE_MUSIC(\"o o o o\").equals(Arrays.asList(4, 4, 4, 4)),\n                s.PARSE_MUSIC(\".| .| .| .|\").equals(Arrays.asList(1, 1, 1, 1)),\n                s.PARSE_MUSIC(\"o| o| .| .| o o o o\").equals(Arrays.asList(2, 2, 1, 1, 4, 4, 4, 4)),\n                s.PARSE_MUSIC(\"o| .| o| .| o o| o o|\").equals(Arrays.asList(2, 1, 2, 1, 4, 2, 4, 2))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "PARSE_MUSIC", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> PARSE_MUSIC(String string) {\n"}
{"task_id": "Java/18", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int howManyTimes(String string, String substring) {\n", "canonical_solution": "        int times = 0;\n\n        for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                times += 1;\n            }\n        }\n\n        return times;\n    }\n}", "buggy_solution": "        int times = 0;\n\n        for (int i = 0; i < string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                times += 1;\n            }\n        }\n\n        return times;\n    }\n}", "bug_type": "value misuse", "failure_symptoms": "incorrect output", "entry_point": "howManyTimes", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.howManyTimes(\"\", \"x\") == 0,\n                s.howManyTimes(\"xyxyxyx\", \"x\") == 4,\n                s.howManyTimes(\"cacacacac\", \"cac\") == 4,\n                s.howManyTimes(\"john doe\", \"john\") == 1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.howManyTimes(\"\", \"a\") == 0,\n                s.howManyTimes(\"aaa\", \"a\") == 3,\n                s.howManyTimes(\"aaaa\", \"aa\") == 3\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public int howManyTimes(String string, String substring)", "docstring": "Find how many times a given substring can be found in the original string. Count overlaping cases.\n>>> howManyTimes(\"\", \"a\")\n0\n>>> howManyTimes(\"aaa\", \"a\")\n3\n>>> howManyTimes(\"aaaa\", \"aa\")\n3", "instruction": "Write a Java function `public int howManyTimes(String string, String substring)` to solve the following problem:\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> howManyTimes(\"\", \"a\")\n0\n>>> howManyTimes(\"aaa\", \"a\")\n3\n>>> howManyTimes(\"aaaa\", \"aa\")\n3", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int HOW_MANY_TIMES(String string, String substring) {\n        int times = 0;\n\n        for (int i = 0; i < string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                times += 1;\n            }\n        }\n\n        return times;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.HOW_MANY_TIMES(\"\", \"x\") == 0,\n                s.HOW_MANY_TIMES(\"xyxyxyx\", \"x\") == 4,\n                s.HOW_MANY_TIMES(\"cacacacac\", \"cac\") == 4,\n                s.HOW_MANY_TIMES(\"john doe\", \"john\") == 1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "HOW_MANY_TIMES", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int HOW_MANY_TIMES(String string, String substring) {\n"}
{"task_id": "Java/19", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String sortNumbers(String numbers) {\n", "canonical_solution": "        String[] nums = numbers.split(\" \");\n        List<Integer> num = new ArrayList<>();\n        for (String string : nums) {\n            switch (string) {\n                case \"zero\" -> num.add(0);\n                case \"one\" -> num.add(1);\n                case \"two\" -> num.add(2);\n                case \"three\" -> num.add(3);\n                case \"four\" -> num.add(4);\n                case \"five\" -> num.add(5);\n                case \"six\" -> num.add(6);\n                case \"seven\" -> num.add(7);\n                case \"eight\" -> num.add(8);\n                case \"nine\" -> num.add(9);\n            }\n        }\n        Collections.sort(num);\n        List<String> result = new ArrayList<>();\n        for (int m : num) {\n            switch (m) {\n                case 0 -> result.add(\"zero\");\n                case 1 -> result.add(\"one\");\n                case 2 -> result.add(\"two\");\n                case 3 -> result.add(\"three\");\n                case 4 -> result.add(\"four\");\n                case 5 -> result.add(\"five\");\n                case 6 -> result.add(\"six\");\n                case 7 -> result.add(\"seven\");\n                case 8 -> result.add(\"eight\");\n                case 9 -> result.add(\"nine\");\n            }\n        }\n        return String.join(\" \", result);\n    }\n}", "buggy_solution": "        String[] nums = numbers.split(\" \");\n        List<Integer> num = new ArrayList<>();\n        for (String string : nums) {\n            switch (string) {\n                case \"zero\" -> num.add(0);\n                case \"one\" -> num.add(1);\n                case \"two\" -> num.add(2);\n                case \"three\" -> num.add(3);\n                case \"four\" -> num.add(4);\n                case \"five\" -> num.add(5);\n                case \"six\" -> num.add(6);\n                case \"seven\" -> num.add(7);\n                case \"eight\" -> num.add(8);\n                case \"nine\" -> num.add(9);\n            }\n        }\n        List<String> result = new ArrayList<>();\n        for (int m : num) {\n            switch (m) {\n                case 0 -> result.add(\"zero\");\n                case 1 -> result.add(\"one\");\n                case 2 -> result.add(\"two\");\n                case 3 -> result.add(\"three\");\n                case 4 -> result.add(\"four\");\n                case 5 -> result.add(\"five\");\n                case 6 -> result.add(\"six\");\n                case 7 -> result.add(\"seven\");\n                case 8 -> result.add(\"eight\");\n                case 9 -> result.add(\"nine\");\n            }\n        }\n        return String.join(\" \", result);\n    }\n}", "bug_type": "missing logic", "failure_symptoms": "incorrect output", "entry_point": "sortNumbers", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sortNumbers(\"\").equals(\"\"),\n                s.sortNumbers(\"three\").equals(\"three\"),\n                s.sortNumbers(\"three five nine\").equals(\"three five nine\"),\n                s.sortNumbers(\"five zero four seven nine eight\").equals(\"zero four five seven eight nine\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sortNumbers(\"three one five\").equals(\"one three five\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public String sortNumbers(String numbers)", "docstring": "Input is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest to largest\n>>> sortNumbers(\"three one five\")\n\"one three five\"", "instruction": "Write a Java function `public String sortNumbers(String numbers)` to solve the following problem:\nInput is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest to largest\n>>> sortNumbers(\"three one five\")\n\"one three five\"", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String SORT_NUMBERS(String numbers) {\n        String[] nums = numbers.split(\" \");\n        List<Integer> num = new ArrayList<>();\n        for (String string : nums) {\n            switch (string) {\n                case \"zero\" -> num.add(0);\n                case \"one\" -> num.add(1);\n                case \"two\" -> num.add(2);\n                case \"three\" -> num.add(3);\n                case \"four\" -> num.add(4);\n                case \"five\" -> num.add(5);\n                case \"six\" -> num.add(6);\n                case \"seven\" -> num.add(7);\n                case \"eight\" -> num.add(8);\n                case \"nine\" -> num.add(9);\n            }\n        }\n        List<String> result = new ArrayList<>();\n        for (int m : num) {\n            switch (m) {\n                case 0 -> result.add(\"zero\");\n                case 1 -> result.add(\"one\");\n                case 2 -> result.add(\"two\");\n                case 3 -> result.add(\"three\");\n                case 4 -> result.add(\"four\");\n                case 5 -> result.add(\"five\");\n                case 6 -> result.add(\"six\");\n                case 7 -> result.add(\"seven\");\n                case 8 -> result.add(\"eight\");\n                case 9 -> result.add(\"nine\");\n            }\n        }\n        return String.join(\" \", result);\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.SORT_NUMBERS(\"\").equals(\"\"),\n                s.SORT_NUMBERS(\"three\").equals(\"three\"),\n                s.SORT_NUMBERS(\"three five nine\").equals(\"three five nine\"),\n                s.SORT_NUMBERS(\"five zero four seven nine eight\").equals(\"zero four five seven eight nine\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "SORT_NUMBERS", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String SORT_NUMBERS(String numbers) {\n"}
{"task_id": "Java/20", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> findClosestElements(List<Double> numbers) {\n", "canonical_solution": "        List<Double> closestPair = new ArrayList<>();\n        closestPair.add(numbers.get(0));\n        closestPair.add(numbers.get(1));\n        double distance = Math.abs(numbers.get(1) - numbers.get(0));\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < distance) {\n                    closestPair.clear();\n                    closestPair.add(numbers.get(i));\n                    closestPair.add(numbers.get(j));\n                    distance = Math.abs(numbers.get(i) - numbers.get(j));\n                }\n            }\n        }\n        Collections.sort(closestPair);\n        return closestPair;\n    }\n}", "buggy_solution": "        List<Double> closestPair = new ArrayList<>();\n        closestPair.add(numbers.get(0));\n        closestPair.add(numbers.get(1));\n        double distance = Math.abs(numbers.get(1) - numbers.get(0));\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) > distance) {\n                    closestPair.clear();\n                    closestPair.add(numbers.get(i));\n                    closestPair.add(numbers.get(j));\n                    distance = Math.abs(numbers.get(i) - numbers.get(j));\n                }\n            }\n        }\n        Collections.sort(closestPair);\n        return closestPair;\n    }\n}", "bug_type": "operator misuse", "failure_symptoms": "incorrect output", "entry_point": "findClosestElements", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.findClosestElements(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.9, 4.0, 5.0, 2.2))).equals(Arrays.asList(3.9, 4.0)),\n                s.findClosestElements(new ArrayList<>(Arrays.asList(1.0, 2.0, 5.9, 4.0, 5.0))).equals(Arrays.asList(5.0, 5.9)),\n                s.findClosestElements(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))).equals(Arrays.asList(2.0, 2.2)),\n                s.findClosestElements(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))).equals(Arrays.asList(2.0, 2.0)),\n                s.findClosestElements(new ArrayList<>(Arrays.asList(1.1, 2.2, 3.1, 4.1, 5.1))).equals(Arrays.asList(2.2, 3.1))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.findClosestElements(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))).equals(Arrays.asList(2.0, 2.2)),\n                s.findClosestElements(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))).equals(Arrays.asList(2.0, 2.0))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<Double> findClosestElements(List<Double> numbers)", "docstring": "From a supplied list of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n[2.0, 2.2]\n>>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n[2.0, 2.0]", "instruction": "Write a Java function `public List<Double> findClosestElements(List<Double> numbers)` to solve the following problem:\nFrom a supplied list of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n[2.0, 2.2]\n>>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n[2.0, 2.0]", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> FIND_CLOSEST_ELEMENTS(List<Double> numbers) {\n        List<Double> CLOSEST_PAIR = new ArrayList<>();\n        CLOSEST_PAIR.add(numbers.get(0));\n        CLOSEST_PAIR.add(numbers.get(1));\n        double distance = Math.abs(numbers.get(1) - numbers.get(0));\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) > distance) {\n                    CLOSEST_PAIR.clear();\n                    CLOSEST_PAIR.add(numbers.get(i));\n                    CLOSEST_PAIR.add(numbers.get(j));\n                    distance = Math.abs(numbers.get(i) - numbers.get(j));\n                }\n            }\n        }\n        Collections.sort(CLOSEST_PAIR);\n        return CLOSEST_PAIR;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.FIND_CLOSEST_ELEMENTS(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.9, 4.0, 5.0, 2.2))).equals(Arrays.asList(3.9, 4.0)),\n                s.FIND_CLOSEST_ELEMENTS(new ArrayList<>(Arrays.asList(1.0, 2.0, 5.9, 4.0, 5.0))).equals(Arrays.asList(5.0, 5.9)),\n                s.FIND_CLOSEST_ELEMENTS(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))).equals(Arrays.asList(2.0, 2.2)),\n                s.FIND_CLOSEST_ELEMENTS(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))).equals(Arrays.asList(2.0, 2.0)),\n                s.FIND_CLOSEST_ELEMENTS(new ArrayList<>(Arrays.asList(1.1, 2.2, 3.1, 4.1, 5.1))).equals(Arrays.asList(2.2, 3.1))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "FIND_CLOSEST_ELEMENTS", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> FIND_CLOSEST_ELEMENTS(List<Double> numbers) {\n"}
{"task_id": "Java/21", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n", "canonical_solution": "        double minNumber = Collections.min(numbers);\n        double maxNumber = Collections.max(numbers);\n        List<Double> result = new ArrayList<>();\n        for (double x : numbers) {\n            result.add((x - minNumber) / (maxNumber - minNumber));\n        }\n        return result;\n    }\n}", "buggy_solution": "        double minNumber = Collections.min(numbers);\n        double maxNumber = Collections.max(numbers);\n        List<Double> result = new ArrayList<>();\n        for (double x : numbers) {\n            result.add((x - minNumber) / (maxNumber + minNumber));\n        }\n        return result;\n    }\n}", "bug_type": "operator misuse", "failure_symptoms": "incorrect output", "entry_point": "rescaleToUnit", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.rescaleToUnit(new ArrayList<>(Arrays.asList(2.0, 49.9))).equals(Arrays.asList(0.0, 1.0)),\n                s.rescaleToUnit(new ArrayList<>(Arrays.asList(100.0, 49.9))).equals(Arrays.asList(1.0, 0.0)),\n                s.rescaleToUnit(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))).equals(Arrays.asList(0.0, 0.25, 0.5, 0.75, 1.0)),\n                s.rescaleToUnit(new ArrayList<>(Arrays.asList(2.0, 1.0, 5.0, 3.0, 4.0))).equals(Arrays.asList(0.25, 0.0, 1.0, 0.5, 0.75)),\n                s.rescaleToUnit(new ArrayList<>(Arrays.asList(12.0, 11.0, 15.0, 13.0, 14.0))).equals(Arrays.asList(0.25, 0.0, 1.0, 0.5, 0.75))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.rescaleToUnit(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))).equals(Arrays.asList(0.0, 0.25, 0.5, 0.75, 1.0))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<Double> rescaleToUnit(List<Double> numbers)", "docstring": "Given list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n[0.0, 0.25, 0.5, 0.75, 1.0]", "instruction": "Write a Java function `public List<Double> rescaleToUnit(List<Double> numbers)` to solve the following problem:\nGiven list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n[0.0, 0.25, 0.5, 0.75, 1.0]", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> RESCALE_TO_UNIT(List<Double> numbers) {\n        double MIN_NUMBER = Collections.min(numbers);\n        double MAX_NUMBER = Collections.max(numbers);\n        List<Double> result = new ArrayList<>();\n        for (double x : numbers) {\n            result.add((x - MIN_NUMBER) / (MAX_NUMBER + MIN_NUMBER));\n        }\n        return result;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.RESCALE_TO_UNIT(new ArrayList<>(Arrays.asList(2.0, 49.9))).equals(Arrays.asList(0.0, 1.0)),\n                s.RESCALE_TO_UNIT(new ArrayList<>(Arrays.asList(100.0, 49.9))).equals(Arrays.asList(1.0, 0.0)),\n                s.RESCALE_TO_UNIT(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))).equals(Arrays.asList(0.0, 0.25, 0.5, 0.75, 1.0)),\n                s.RESCALE_TO_UNIT(new ArrayList<>(Arrays.asList(2.0, 1.0, 5.0, 3.0, 4.0))).equals(Arrays.asList(0.25, 0.0, 1.0, 0.5, 0.75)),\n                s.RESCALE_TO_UNIT(new ArrayList<>(Arrays.asList(12.0, 11.0, 15.0, 13.0, 14.0))).equals(Arrays.asList(0.25, 0.0, 1.0, 0.5, 0.75))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "RESCALE_TO_UNIT", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> RESCALE_TO_UNIT(List<Double> numbers) {\n"}
{"task_id": "Java/22", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> filterIntegers(List<Object> values) {\n", "canonical_solution": "        List<Integer> result = new ArrayList<>();\n        for (Object x : values) {\n            if (x instanceof Integer) {\n                result.add((Integer) x);\n            }\n        }\n        return result;\n    }\n}", "buggy_solution": "        List<Integer> result = new ArrayList<>();\n        for (Object x : values) {\n            if (x instanceof Integer) {\n                values.add((Integer) x);\n            }\n        }\n        return result;\n    }\n}", "bug_type": "variable misuse", "failure_symptoms": "incorrect output", "entry_point": "filterIntegers", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.filterIntegers(new ArrayList<>(List.of())).equals(List.of()),\n                s.filterIntegers(new ArrayList<>(Arrays.asList(4, Map.of(), List.of(), 23.2, 9, \"adasd\"))).equals(Arrays.asList(4, 9)),\n                s.filterIntegers(new ArrayList<>(Arrays.asList(3, 'c', 3, 3, 'a', 'b'))).equals(Arrays.asList(3, 3, 3))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.filterIntegers(new ArrayList<>(Arrays.asList('a', 3.14, 5))).equals(Arrays.asList(5)),\n                s.filterIntegers(new ArrayList<>(Arrays.asList(1,2,3,\"abc\", Map.of(), List.of()))).equals(Arrays.asList(1,2,3))       \n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<Integer> filterIntegers(List<Object> values)", "docstring": "Filter given list of any values only for integers\n>>> filter_integers(Arrays.asList('a', 3.14, 5))\n[5]\n>>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n[1, 2, 3]", "instruction": "Write a Java function `public List<Integer> filterIntegers(List<Object> values)` to solve the following problem:\nFilter given list of any values only for integers\n>>> filter_integers(Arrays.asList('a', 3.14, 5))\n[5]\n>>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n[1, 2, 3]", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> FILTER_INTEGERS(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object x : values) {\n            if (x instanceof Integer) {\n                values.add((Integer) x);\n            }\n        }\n        return result;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.FILTER_INTEGERS(new ArrayList<>(List.of())).equals(List.of()),\n                s.FILTER_INTEGERS(new ArrayList<>(Arrays.asList(4, Map.of(), List.of(), 23.2, 9, \"adasd\"))).equals(Arrays.asList(4, 9)),\n                s.FILTER_INTEGERS(new ArrayList<>(Arrays.asList(3, 'c', 3, 3, 'a', 'b'))).equals(Arrays.asList(3, 3, 3))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "FILTER_INTEGERS", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> FILTER_INTEGERS(List<Object> values) {\n"}
{"task_id": "Java/24", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largestDivisor(int n) {\n", "canonical_solution": "        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1;\n    }\n}", "buggy_solution": "        for (int i = n - 1; i > 0; i--) {\n            if (n - i == 0) {\n                return i;\n            }\n        }\n        return 1;\n    }\n}", "bug_type": "operator misuse", "failure_symptoms": "incorrect output", "entry_point": "largestDivisor", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.largestDivisor(3) == 1,\n                s.largestDivisor(7) == 1,\n                s.largestDivisor(10) == 5,\n                s.largestDivisor(100) == 50,\n                s.largestDivisor(49) == 7\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.largestDivisor(15) == 5\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public int largestDivisor(int n)", "docstring": "For a given number n, find the largest number that divides n evenly, smaller than n\n>>> largestDivisor(15)\n5", "instruction": "Write a Java function `public int largestDivisor(int n)` to solve the following problem:\nFor a given number n, find the largest number that divides n evenly, smaller than n\n>>> largestDivisor(15)\n5", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int LARGEST_DIVISOR(int n) {\n        for (int i = n - 1; i > 0; i--) {\n            if (n - i == 0) {\n                return i;\n            }\n        }\n        return 1;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.LARGEST_DIVISOR(3) == 1,\n                s.LARGEST_DIVISOR(7) == 1,\n                s.LARGEST_DIVISOR(10) == 5,\n                s.LARGEST_DIVISOR(100) == 50,\n                s.LARGEST_DIVISOR(49) == 7\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "LARGEST_DIVISOR", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int LARGEST_DIVISOR(int n) {\n"}
{"task_id": "Java/26", "prompt": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n", "canonical_solution": "        Map<Integer, Integer> c = new HashMap<>();\n        for (int i : numbers) {\n            c.put(i, c.getOrDefault(i, 0) + 1);\n        }\n        return numbers.stream().filter(i -> c.get(i) == 1).collect(Collectors.toList());\n    }\n}", "buggy_solution": "        Map<Integer, Integer> c = new HashMap<>();\n        for (int i : numbers) {\n            c.put(i, c.getOrDefault(i, 0) + 1);\n        }\n        return numbers.stream().filter(i -> c.get(i) > 1).collect(Collectors.toList());\n    }\n}", "bug_type": "operator misuse", "failure_symptoms": "incorrect output", "entry_point": "removeDuplicates", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.removeDuplicates(new ArrayList<>(List.of())).equals(List.of()),\n                s.removeDuplicates(new ArrayList<>(Arrays.asList(1, 2, 3, 4))).equals(Arrays.asList(1, 2, 3, 4)),\n                s.removeDuplicates(new ArrayList<>(Arrays.asList(1, 2, 3, 2, 4, 3, 5))).equals(Arrays.asList(1, 4, 5))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.removeDuplicates(new ArrayList<>(Arrays.asList(1, 2, 3, 2,4))).equals(Arrays.asList(1,  3, 4))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<Integer> removeDuplicates(List<Integer> numbers)", "docstring": "From a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n[1, 3, 4]", "instruction": "Write a Java function `public List<Integer> removeDuplicates(List<Integer> numbers)` to solve the following problem:\nFrom a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n[1, 3, 4]", "modified_context": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> REMOVE_DUPLICATES(List<Integer> numbers) {\n        Map<Integer, Integer> c = new HashMap<>();\n        for (int i : numbers) {\n            c.put(i, c.getOrDefault(i, 0) + 1);\n        }\n        return numbers.stream().filter(i -> c.get(i) > 1).collect(Collectors.toList());\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.REMOVE_DUPLICATES(new ArrayList<>(List.of())).equals(List.of()),\n                s.REMOVE_DUPLICATES(new ArrayList<>(Arrays.asList(1, 2, 3, 4))).equals(Arrays.asList(1, 2, 3, 4)),\n                s.REMOVE_DUPLICATES(new ArrayList<>(Arrays.asList(1, 2, 3, 2, 4, 3, 5))).equals(Arrays.asList(1, 4, 5))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "REMOVE_DUPLICATES", "modified_declaration": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> REMOVE_DUPLICATES(List<Integer> numbers) {\n"}
{"task_id": "Java/27", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String flipCase(String string) {\n", "canonical_solution": "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            if (Character.isLowerCase(string.charAt(i))) {\n                sb.append(Character.toUpperCase(string.charAt(i)));\n            } else {\n                sb.append(Character.toLowerCase(string.charAt(i)));\n            }\n        }\n        return sb.toString();\n    }\n}", "buggy_solution": "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            if (Character.isUpperCase(string.charAt(i))) {\n                sb.append(Character.toUpperCase(string.charAt(i)));\n            } else {\n                sb.append(Character.toLowerCase(string.charAt(i)));\n            }\n        }\n        return sb.toString();\n    }\n}", "bug_type": "function misuse", "failure_symptoms": "incorrect output", "entry_point": "flipCase", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.flipCase(\"\"), \"\"),\n                Objects.equals(s.flipCase(\"Hello!\"), \"hELLO!\"),\n                Objects.equals(s.flipCase(\"These violent delights have violent ends\"), \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.flipCase(\"\"), \"\"),\n                Objects.equals(s.flipCase(\"Hello\"), \"hELLO\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public String flipCase(String string)", "docstring": "For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flipCase(\"Hello\")\n\"hELLO\"", "instruction": "Write a Java function `public String flipCase(String string)` to solve the following problem:\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flipCase(\"Hello\")\n\"hELLO\"", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String FLIP_CASE(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            if (Character.isUpperCase(string.charAt(i))) {\n                sb.append(Character.toUpperCase(string.charAt(i)));\n            } else {\n                sb.append(Character.toLowerCase(string.charAt(i)));\n            }\n        }\n        return sb.toString();\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.FLIP_CASE(\"\"), \"\"),\n                Objects.equals(s.FLIP_CASE(\"Hello!\"), \"hELLO!\"),\n                Objects.equals(s.FLIP_CASE(\"These violent delights have violent ends\"), \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "FLIP_CASE", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String FLIP_CASE(String string) {\n"}
{"task_id": "Java/29", "prompt": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n", "canonical_solution": "        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList());\n    }\n}", "buggy_solution": "        return strings.stream().filter(p -> p.endsWith(prefix)).collect(Collectors.toList());\n    }\n}", "bug_type": "function misuse", "failure_symptoms": "incorrect output", "entry_point": "filterByPrefix", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.filterByPrefix(new ArrayList<>(List.of()), \"john\").equals(List.of()),\n                s.filterByPrefix(new ArrayList<>(Arrays.asList(\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), \"xxx\").equals(Arrays.asList(\"xxx\", \"xxxAAA\", \"xxx\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.filterByPrefix(new ArrayList<>(List.of()), \"a\").equals(List.of()),\n                s.filterByPrefix(new ArrayList<>(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\")), \"a\").equals(Arrays.asList(\"abc\", \"array\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<String> filterByPrefix(List<String> strings, String prefix)", "docstring": "Filter an input list of strings only for ones that start with a given prefix.\n>>> filterByPrefix(List.of(), \"a\")\n[]\n>>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n[\"abc\", \"array\"]", "instruction": "Write a Java function `public List<String> filterByPrefix(List<String> strings, String prefix)` to solve the following problem:\nFilter an input list of strings only for ones that start with a given prefix.\n>>> filterByPrefix(List.of(), \"a\")\n[]\n>>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n[\"abc\", \"array\"]", "modified_context": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<String> FILTER_BY_PREFIX(List<String> strings, String prefix) {\n        return strings.stream().filter(p -> p.endsWith(prefix)).collect(Collectors.toList());\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.FILTER_BY_PREFIX(new ArrayList<>(List.of()), \"john\").equals(List.of()),\n                s.FILTER_BY_PREFIX(new ArrayList<>(Arrays.asList(\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), \"xxx\").equals(Arrays.asList(\"xxx\", \"xxxAAA\", \"xxx\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "FILTER_BY_PREFIX", "modified_declaration": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<String> FILTER_BY_PREFIX(List<String> strings, String prefix) {\n"}
{"task_id": "Java/30", "prompt": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> getPositive(List<Integer> l) {\n", "canonical_solution": "        return l.stream().filter(p -> p > 0).collect(Collectors.toList());\n    }\n}", "buggy_solution": "        return l.stream().filter(p -> p < 0).collect(Collectors.toList());\n    }\n}", "bug_type": "operator misuse", "failure_symptoms": "incorrect output", "entry_point": "getPositive", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.getPositive(new ArrayList<>(Arrays.asList(-1, -2, 4, 5, 6))).equals(Arrays.asList(4, 5, 6)),\n                s.getPositive(new ArrayList<>(Arrays.asList(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))).equals(Arrays.asList(5, 3, 2, 3, 3, 9, 123, 1)),\n                s.getPositive(new ArrayList<>(Arrays.asList(-1, -2))).equals(List.of()),\n                s.getPositive(List.of()).equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.getPositive(new ArrayList<>(Arrays.asList(-1, 2, -4, 5, 6))).equals(Arrays.asList(2, 5, 6)),\n                s.getPositive(new ArrayList<>(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))).equals(Arrays.asList(5, 3, 2, 3, 9, 123, 1))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<Integer> getPositive(List<Integer> l)", "docstring": "Return only positive numbers in the list.\n>>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n[2, 5, 6]\n>>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n[5, 3, 2, 3, 9, 123, 1]", "instruction": "Write a Java function `public List<Integer> getPositive(List<Integer> l)` to solve the following problem:\nReturn only positive numbers in the list.\n>>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n[2, 5, 6]\n>>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n[5, 3, 2, 3, 9, 123, 1]", "modified_context": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> GET_POSITIVE(List<Integer> l) {\n        return l.stream().filter(p -> p < 0).collect(Collectors.toList());\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.GET_POSITIVE(new ArrayList<>(Arrays.asList(-1, -2, 4, 5, 6))).equals(Arrays.asList(4, 5, 6)),\n                s.GET_POSITIVE(new ArrayList<>(Arrays.asList(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))).equals(Arrays.asList(5, 3, 2, 3, 3, 9, 123, 1)),\n                s.GET_POSITIVE(new ArrayList<>(Arrays.asList(-1, -2))).equals(List.of()),\n                s.GET_POSITIVE(List.of()).equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "GET_POSITIVE", "modified_declaration": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> GET_POSITIVE(List<Integer> l) {\n"}
{"task_id": "Java/31", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isPrime(int n) {\n", "canonical_solution": "        if (n < 2) {\n            return false;\n        }\n        for (int k = 2; k < n; k++) {\n            if (n % k == 0) {\n                return false;\n            }\n        }\n         return true;\n    }\n}", "buggy_solution": "        if (n < 1) {\n            return false;\n        }\n        for (int k = 1; k < n; k++) {\n            if (n % k == 0) {\n                return false;\n            }\n        }\n         return true;\n    }\n}", "bug_type": "value misuse", "failure_symptoms": "incorrect output", "entry_point": "isPrime", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.isPrime(6),\n                s.isPrime(101),\n                s.isPrime(11),\n                s.isPrime(13441),\n                s.isPrime(61),\n                !s.isPrime(4),\n                !s.isPrime(1),\n                s.isPrime(5),\n                s.isPrime(11),\n                s.isPrime(17),\n                !s.isPrime(5 * 17),\n                !s.isPrime(11 * 7),\n                !s.isPrime(13441 * 19)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.isPrime(6),\n                s.isPrime(101),\n                s.isPrime(11),\n                s.isPrime(13441),\n                s.isPrime(61),\n                !s.isPrime(4),\n                !s.isPrime(1)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public boolean isPrime(int n)", "docstring": "Return true if a given number is prime, and false otherwise.\n>>> isPrime(6)\nfalse\n>>> isPrime(101)\ntrue\n>>> isPrime(11)\ntrue\n>>> isPrime(13441)\ntrue\n>>> isPrime(61)\ntrue\n>>> isPrime(4)\nfalse\n>>> isPrime(1)\nfalse", "instruction": "Write a Java function `public boolean isPrime(int n)` to solve the following problem:\nReturn true if a given number is prime, and false otherwise.\n>>> isPrime(6)\nfalse\n>>> isPrime(101)\ntrue\n>>> isPrime(11)\ntrue\n>>> isPrime(13441)\ntrue\n>>> isPrime(61)\ntrue\n>>> isPrime(4)\nfalse\n>>> isPrime(1)\nfalse", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean IS_PRIME(int n) {\n        if (n < 1) {\n            return false;\n        }\n        for (int k = 1; k < n; k++) {\n            if (n % k == 0) {\n                return false;\n            }\n        }\n         return true;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.IS_PRIME(6),\n                s.IS_PRIME(101),\n                s.IS_PRIME(11),\n                s.IS_PRIME(13441),\n                s.IS_PRIME(61),\n                !s.IS_PRIME(4),\n                !s.IS_PRIME(1),\n                s.IS_PRIME(5),\n                s.IS_PRIME(11),\n                s.IS_PRIME(17),\n                !s.IS_PRIME(5 * 17),\n                !s.IS_PRIME(11 * 7),\n                !s.IS_PRIME(13441 * 19)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "IS_PRIME", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean IS_PRIME(int n) {\n"}
{"task_id": "Java/32", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs) {\n", "canonical_solution": "        double begin = -1, end = 1;\n        while (poly(xs, begin) * poly(xs, end) > 0) {\n            begin *= 2;\n            end *= 2;\n        }\n        while (end - begin > 1e-10) {\n            double center = (begin + end) / 2;\n            if (poly(xs, begin) * poly(xs, center) > 0) {\n                begin = center;\n            } else {\n                end = center;\n            }\n        }\n        return begin;\n    }\n}", "buggy_solution": "        double begin = -1, end = 1;\n        while (poly(xs, begin) * poly(xs, end) > 0) {\n            begin *= 2;\n            end *= 2;\n        }\n        while (begin - end  > 1e-10) {\n            double center = (begin + end) / 2;\n            if (poly(xs, begin) * poly(xs, center) > 0) {\n                begin = center;\n            } else {\n                end = center;\n            }\n        }\n        return begin;\n    }\n}", "bug_type": "variable misuse", "failure_symptoms": "incorrect output", "entry_point": "findZero", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        Random rand = new Random(42);\n        for (int i = 0; i < 100; i++) {\n            int ncoeff = 2 * (rand.nextInt(3) + 1);\n            List<Double> coeffs = new ArrayList<>();\n            for (int j = 0; j < ncoeff; j++) {\n                int coeff = rand.nextInt(20) - 10;\n                if (coeff == 0) {\n                    coeff = 1;\n                }\n                coeffs.add((double) coeff);\n            }\n            double solution = s.findZero(coeffs);\n            if (Math.abs(s.poly(coeffs, solution)) > 1e-4) {\n                throw new AssertionError();\n            }\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n            Math.abs(s.findZero(new ArrayList<>(Arrays.asList(1.,2.)))+0.5)<1e-4,\n            Math.abs(s.findZero(new ArrayList<>(Arrays.asList(-6.,11.,-6.,1.)))-1)<1e-4\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public double findZero(List<Double> xs)", "docstring": "xs are coefficients of a polynomial.\nfindZero find x such that poly(x) = 0.\nfindZero returns only only zero point, even if there are many.\nMoreover, findZero only takes list xs having even number of coefficients\nand largest non zero coefficient as it guarantees\na solution.\n>>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n-0.5\n>>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n1.0", "instruction": "Write a Java function `public double findZero(List<Double> xs)` to solve the following problem:\nxs are coefficients of a polynomial.\nfindZero find x such that poly(x) = 0.\nfindZero returns only only zero point, even if there are many.\nMoreover, findZero only takes list xs having even number of coefficients\nand largest non zero coefficient as it guarantees\na solution.\n>>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n-0.5\n>>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n1.0", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    public double FIND_ZERO(List<Double> xs) {\n        double begin = -1, end = 1;\n        while (poly(xs, begin) * poly(xs, end) > 0) {\n            begin *= 2;\n            end *= 2;\n        }\n        while (begin - end  > 1e-10) {\n            double center = (begin + end) / 2;\n            if (poly(xs, begin) * poly(xs, center) > 0) {\n                begin = center;\n            } else {\n                end = center;\n            }\n        }\n        return begin;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        Random rand = new Random(42);\n        for (int i = 0; i < 100; i++) {\n            int ncoeff = 2 * (rand.nextInt(3) + 1);\n            List<Double> coeffs = new ArrayList<>();\n            for (int j = 0; j < ncoeff; j++) {\n                int coeff = rand.nextInt(20) - 10;\n                if (coeff == 0) {\n                    coeff = 1;\n                }\n                coeffs.add((double) coeff);\n            }\n            double solution = s.FIND_ZERO(coeffs);\n            if (Math.abs(s.poly(coeffs, solution)) > 1e-4) {\n                throw new AssertionError();\n            }\n        }\n    }\n}", "modified_entry_point": "FIND_ZERO", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    public double FIND_ZERO(List<Double> xs) {\n"}
{"task_id": "Java/33", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortThird(List<Integer> l) {\n", "canonical_solution": "        List<Integer> thirds = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 3) {\n            thirds.add(l.get(i));\n        }\n        Collections.sort(thirds);\n        List<Integer> result = l;\n        for (int i = 0; i < l.size(); i += 3) {\n            result.set(i, thirds.get(i / 3));\n        }\n        return result;\n    }\n}", "buggy_solution": "        List<Integer> thirds = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 3) {\n            thirds.add(l.get(i));\n        }\n        List<Integer> result = l;\n        for (int i = 0; i < l.size(); i += 3) {\n            result.set(i, thirds.get(i / 3));\n        }\n        return result;\n    }\n}", "bug_type": "missing logic", "failure_symptoms": "incorrect output", "entry_point": "sortThird", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sortThird(new ArrayList<>(Arrays.asList(5, 6, 3, 4, 8, 9, 2))).equals(Arrays.asList(2, 6, 3, 4, 8, 9, 5)),\n                s.sortThird(new ArrayList<>(Arrays.asList(5, 8, 3, 4, 6, 9, 2))).equals(Arrays.asList(2, 8, 3, 4, 6, 9, 5)),\n                s.sortThird(new ArrayList<>(Arrays.asList(5, 6, 9, 4, 8, 3, 2))).equals(Arrays.asList(2, 6, 9, 4, 8, 3, 5)),\n                s.sortThird(new ArrayList<>(Arrays.asList(5, 6, 3, 4, 8, 9, 2, 1))).equals(Arrays.asList(2, 6, 3, 4, 8, 9, 5, 1))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n            s.sortThird(new ArrayList<>(Arrays.asList(1,2,3))).equals(Arrays.asList(1,2,3)),\n            s.sortThird(new ArrayList<>(Arrays.asList(5, 6, 3, 4, 8, 9, 2))).equals(Arrays.asList(2, 6, 3, 4, 8, 9, 5))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<Integer> sortThird(List<Integer> l)", "docstring": "This function takes a list l and returns a list l' such that\nl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\nto the values of the corresponding indicies of l, but sorted.\n>>> sortThird(Arrays.asList(1, 2, 3))\n[1, 2, 3]\n>>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n[2, 6, 3, 4, 8, 9, 5]", "instruction": "Write a Java function `public List<Integer> sortThird(List<Integer> l)` to solve the following problem:\nThis function takes a list l and returns a list l' such that\nl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\nto the values of the corresponding indicies of l, but sorted.\n>>> sortThird(Arrays.asList(1, 2, 3))\n[1, 2, 3]\n>>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n[2, 6, 3, 4, 8, 9, 5]", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> SORT_THIRD(List<Integer> l) {\n        List<Integer> thirds = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 3) {\n            thirds.add(l.get(i));\n        }\n        List<Integer> result = l;\n        for (int i = 0; i < l.size(); i += 3) {\n            result.set(i, thirds.get(i / 3));\n        }\n        return result;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.SORT_THIRD(new ArrayList<>(Arrays.asList(5, 6, 3, 4, 8, 9, 2))).equals(Arrays.asList(2, 6, 3, 4, 8, 9, 5)),\n                s.SORT_THIRD(new ArrayList<>(Arrays.asList(5, 8, 3, 4, 6, 9, 2))).equals(Arrays.asList(2, 8, 3, 4, 6, 9, 5)),\n                s.SORT_THIRD(new ArrayList<>(Arrays.asList(5, 6, 9, 4, 8, 3, 2))).equals(Arrays.asList(2, 6, 9, 4, 8, 3, 5)),\n                s.SORT_THIRD(new ArrayList<>(Arrays.asList(5, 6, 3, 4, 8, 9, 2, 1))).equals(Arrays.asList(2, 6, 3, 4, 8, 9, 5, 1))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "SORT_THIRD", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> SORT_THIRD(List<Integer> l) {\n"}
{"task_id": "Java/35", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int maxElement(List<Integer> l) {\n", "canonical_solution": "        return Collections.max(l);\n    }\n}", "buggy_solution": "        return Collections.min(l);\n    }\n}", "bug_type": "operator misuse", "failure_symptoms": "incorrect output", "entry_point": "maxElement", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.maxElement(new ArrayList<>(Arrays.asList(1, 2, 3))) == 3,\n                s.maxElement(new ArrayList<>(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10))) == 124\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.maxElement(new ArrayList<>(Arrays.asList(1, 2, 3))) == 3,\n                s.maxElement(new ArrayList<>(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))) == 123\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public int maxElement(List<Integer> l)", "docstring": "Return maximum element in the list.\n>>> maxElement(Arrays.asList(1, 2, 3))\n3\n>>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n123", "instruction": "Write a Java function `public int maxElement(List<Integer> l)` to solve the following problem:\nReturn maximum element in the list.\n>>> maxElement(Arrays.asList(1, 2, 3))\n3\n>>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n123", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int MAX_ELEMENT(List<Integer> l) {\n        return Collections.min(l);\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.MAX_ELEMENT(new ArrayList<>(Arrays.asList(1, 2, 3))) == 3,\n                s.MAX_ELEMENT(new ArrayList<>(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10))) == 124\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "MAX_ELEMENT", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int MAX_ELEMENT(List<Integer> l) {\n"}
{"task_id": "Java/36", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fizzBuzz(int n) {\n", "canonical_solution": "        int result = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                char[] digits = String.valueOf(i).toCharArray();\n                for (char c : digits) {\n                    if (c == '7') {\n                        result += 1;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}", "buggy_solution": "        int result = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 && i % 13 == 0) {\n                char[] digits = String.valueOf(i).toCharArray();\n                for (char c : digits) {\n                    if (c == '7') {\n                        result += 1;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}", "bug_type": "operator misuse", "failure_symptoms": "incorrect output", "entry_point": "fizzBuzz", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.fizzBuzz(50) == 0,\n                s.fizzBuzz(78) == 2,\n                s.fizzBuzz(79) == 3,\n                s.fizzBuzz(100) == 3,\n                s.fizzBuzz(200) == 6,\n                s.fizzBuzz(4000) == 192,\n                s.fizzBuzz(10000) == 639,\n                s.fizzBuzz(100000) == 8026\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.fizzBuzz(50) == 0,\n                s.fizzBuzz(78) == 2,\n                s.fizzBuzz(79) == 3\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public int fizzBuzz(int n)", "docstring": "Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizzBuzz(50)\n0\n>>> fizzBuzz(78)\n2\n>>> fizzBuzz(79)\n3", "instruction": "Write a Java function `public int fizzBuzz(int n)` to solve the following problem:\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizzBuzz(50)\n0\n>>> fizzBuzz(78)\n2\n>>> fizzBuzz(79)\n3", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int FIZZ_BUZZ(int n) {\n        int result = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 && i % 13 == 0) {\n                char[] digits = String.valueOf(i).toCharArray();\n                for (char c : digits) {\n                    if (c == '7') {\n                        result += 1;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.FIZZ_BUZZ(50) == 0,\n                s.FIZZ_BUZZ(78) == 2,\n                s.FIZZ_BUZZ(79) == 3,\n                s.FIZZ_BUZZ(100) == 3,\n                s.FIZZ_BUZZ(200) == 6,\n                s.FIZZ_BUZZ(4000) == 192,\n                s.FIZZ_BUZZ(10000) == 639,\n                s.FIZZ_BUZZ(100000) == 8026\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "FIZZ_BUZZ", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int FIZZ_BUZZ(int n) {\n"}
{"task_id": "Java/37", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortEven(List<Integer> l) {\n", "canonical_solution": "        List<Integer> even = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 2) {\n            even.add(l.get(i));\n        }\n        Collections.sort(even);\n        List<Integer> result = l;\n        for (int i = 0; i < l.size(); i += 2) {\n            result.set(i, even.get(i / 2));\n        }\n        return result;\n    }\n}", "buggy_solution": "        List<Integer> even = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 2) {\n            even.add(l.get(i));\n        }\n        Collections.sort(l);\n        List<Integer> result = l;\n        for (int i = 0; i < l.size(); i += 2) {\n            result.set(i, even.get(i / 2));\n        }\n        return result;\n    }\n}", "bug_type": "variable misuse", "failure_symptoms": "incorrect output", "entry_point": "sortEven", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sortEven(new ArrayList<>(Arrays.asList(1, 2, 3))).equals(Arrays.asList(1, 2, 3)),\n                s.sortEven(new ArrayList<>(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))).equals(Arrays.asList(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)),\n                s.sortEven(new ArrayList<>(Arrays.asList(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))).equals(Arrays.asList(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sortEven(new ArrayList<>(Arrays.asList(1, 2, 3))).equals(Arrays.asList(1, 2, 3)),\n                s.sortEven(new ArrayList<>(Arrays.asList(5,6,3,4))).equals(Arrays.asList(3,6,5,4))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<Integer> sortEven(List<Integer> l)", "docstring": "This function takes a list l and returns a list l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sortEven(Arrays.asList(1, 2, 3))\n[1, 2, 3]\n>>> sortEven(Arrays.asList(5, 6, 3, 4))\n[3, 6, 5, 4]", "instruction": "Write a Java function `public List<Integer> sortEven(List<Integer> l)` to solve the following problem:\nThis function takes a list l and returns a list l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sortEven(Arrays.asList(1, 2, 3))\n[1, 2, 3]\n>>> sortEven(Arrays.asList(5, 6, 3, 4))\n[3, 6, 5, 4]", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> SORT_EVEN(List<Integer> l) {\n        List<Integer> even = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 2) {\n            even.add(l.get(i));\n        }\n        Collections.sort(l);\n        List<Integer> result = l;\n        for (int i = 0; i < l.size(); i += 2) {\n            result.set(i, even.get(i / 2));\n        }\n        return result;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.SORT_EVEN(new ArrayList<>(Arrays.asList(1, 2, 3))).equals(Arrays.asList(1, 2, 3)),\n                s.SORT_EVEN(new ArrayList<>(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))).equals(Arrays.asList(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)),\n                s.SORT_EVEN(new ArrayList<>(Arrays.asList(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))).equals(Arrays.asList(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "SORT_EVEN", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> SORT_EVEN(List<Integer> l) {\n"}
{"task_id": "Java/38", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public String decodeCyclic(String s) {\n", "canonical_solution": "        return encodeCyclic(encodeCyclic(s));\n    }\n}", "buggy_solution": "        return encodeCyclic(s);\n    }\n}", "bug_type": "missing logic", "failure_symptoms": "incorrect output", "entry_point": "decodeCyclic", "import": "", "test_setup": "", "test": "\npublic class Main {\n    static char[] letters = \"abcdefghijklmnopqrstuvwxyz\".toCharArray();\n    static Random rand = new Random(42);\n    public static String random_string(int length) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < length; i++) {\n            sb.append(letters[rand.nextInt(26)]);\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        for (int i = 0; i < 100; i++) {\n            String str = random_string(rand.nextInt(10) + 10);\n            String encode_str = s.encodeCyclic(str);\n            if (!s.decodeCyclic(encode_str).equals(str)) {\n                throw new AssertionError();\n            }\n        }\n    }\n}", "example_test": "", "signature": "public String decodeCyclic(String s)", "docstring": "takes as input string encoded with encodeCyclic function. Returns decoded string.", "instruction": "Write a Java function `public String decodeCyclic(String s)` to solve the following problem:\ntakes as input string encoded with encodeCyclic function. Returns decoded string.", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String ENCODE_CYCLIC(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public String DECODE_CYCLIC(String s) {\n        return ENCODE_CYCLIC(s);\n    }\n}", "modified_test": "\n\npublic class Main {\n    static char[] letters = \"abcdefghijklmnopqrstuvwxyz\".toCharArray();\n    static Random rand = new Random(42);\n    public static String random_string(int length) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < length; i++) {\n            sb.append(letters[rand.nextInt(26)]);\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        for (int i = 0; i < 100; i++) {\n            String str = random_string(rand.nextInt(10) + 10);\n            String encode_str = s.ENCODE_CYCLIC(str);\n            if (!s.DECODE_CYCLIC(encode_str).equals(str)) {\n                throw new AssertionError();\n            }\n        }\n    }\n}", "modified_entry_point": "DECODE_CYCLIC", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String ENCODE_CYCLIC(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public String DECODE_CYCLIC(String s) {\n"}
{"task_id": "Java/39", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int primeFib(int n) {\n", "canonical_solution": "        int f0 = 0, f1 = 1;\n        while (true) {\n            int p = f0 + f1;\n            boolean isPrime = p >= 2;\n            for (int k = 2; k < Math.min(Math.sqrt(p) + 1, p - 1); k++) {\n                if (p % k == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                n -= 1;\n            }\n            if (n == 0) {\n                return p;\n            }\n            f0 = f1;\n            f1 = p;\n        }\n    }\n}", "buggy_solution": "        int f0 = 0, f1 = 0;\n        while (true) {\n            int p = f0 + f1;\n            boolean isPrime = p >= 2;\n            for (int k = 2; k < Math.min(Math.sqrt(p), p); k++) {\n                if (p % k == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                n -= 1;\n            }\n            if (n == 0) {\n                return p;\n            }\n            f0 = f1;\n            f1 = p;\n        }\n    }\n}", "bug_type": "value misuse", "failure_symptoms": "incorrect output", "entry_point": "primeFib", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.primeFib(1) == 2,\n                s.primeFib(2) == 3,\n                s.primeFib(3) == 5,\n                s.primeFib(4) == 13,\n                s.primeFib(5) == 89,\n                s.primeFib(6) == 233,\n                s.primeFib(7) == 1597,\n                s.primeFib(8) == 28657,\n                s.primeFib(9) == 514229,\n                s.primeFib(10) == 433494437\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.primeFib(1) == 2,\n                s.primeFib(2) == 3,\n                s.primeFib(3) == 5,\n                s.primeFib(4) == 13,\n                s.primeFib(5) == 89\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public int primeFib(int n)", "docstring": "primeFib returns n-th number that is a Fibonacci number and it's also prime.\n>>> primeFib(1)\n2\n>>> primeFib(2)\n3\n>>> primeFib(3)\n5\n>>> primeFib(4)\n13\n>>> primeFib(5)\n89", "instruction": "Write a Java function `public int primeFib(int n)` to solve the following problem:\nprimeFib returns n-th number that is a Fibonacci number and it's also prime.\n>>> primeFib(1)\n2\n>>> primeFib(2)\n3\n>>> primeFib(3)\n5\n>>> primeFib(4)\n13\n>>> primeFib(5)\n89", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int PRIME_FIB(int n) {\n        int f0 = 0, f1 = 0;\n        while (true) {\n            int p = f0 + f1;\n            boolean IS_PRIME = p >= 2;\n            for (int k = 2; k < Math.min(Math.sqrt(p), p); k++) {\n                if (p % k == 0) {\n                    IS_PRIME = false;\n                    break;\n                }\n            }\n            if (IS_PRIME) {\n                n -= 1;\n            }\n            if (n == 0) {\n                return p;\n            }\n            f0 = f1;\n            f1 = p;\n        }\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.PRIME_FIB(1) == 2,\n                s.PRIME_FIB(2) == 3,\n                s.PRIME_FIB(3) == 5,\n                s.PRIME_FIB(4) == 13,\n                s.PRIME_FIB(5) == 89,\n                s.PRIME_FIB(6) == 233,\n                s.PRIME_FIB(7) == 1597,\n                s.PRIME_FIB(8) == 28657,\n                s.PRIME_FIB(9) == 514229,\n                s.PRIME_FIB(10) == 433494437\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "PRIME_FIB", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int PRIME_FIB(int n) {\n"}
{"task_id": "Java/40", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean triplesSumToZero(List<Integer> l) {\n", "canonical_solution": "        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}", "buggy_solution": "        for (int i = 1; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}", "bug_type": "value misuse", "failure_symptoms": "incorrect output", "entry_point": "triplesSumToZero", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.triplesSumToZero(new ArrayList<>(Arrays.asList(1, 3, 5, 0))),\n                !s.triplesSumToZero(new ArrayList<>(Arrays.asList(1, 3, 5, -1))),\n                s.triplesSumToZero(new ArrayList<>(Arrays.asList(1, 3, -2, 1))),\n                !s.triplesSumToZero(new ArrayList<>(Arrays.asList(1, 2, 3, 7))),\n                !s.triplesSumToZero(new ArrayList<>(Arrays.asList(1, 2, 5, 7))),\n                s.triplesSumToZero(new ArrayList<>(Arrays.asList(2, 4, -5, 3, 9, 7))),\n                !s.triplesSumToZero(new ArrayList<>(Arrays.asList(1))),\n                !s.triplesSumToZero(new ArrayList<>(Arrays.asList(1, 3, 5, -100))),\n                !s.triplesSumToZero(new ArrayList<>(Arrays.asList(100, 3, 5, -100)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.triplesSumToZero(new ArrayList<>(Arrays.asList(1, 3, 5, 0))),\n                s.triplesSumToZero(new ArrayList<>(Arrays.asList(1, 3, -2, 1))),\n                !s.triplesSumToZero(new ArrayList<>(Arrays.asList(1, 2, 3, 7))),\n                s.triplesSumToZero(new ArrayList<>(Arrays.asList(2, 4, -5, 3, 9, 7)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public boolean triplesSumToZero(List<Integer> l)", "docstring": "triplesSumToZero takes a list of integers as an input.\nit returns True if there are three distinct elements in the list that\nsum to zero, and False otherwise.\n>>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\nfalse\n>>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\ntrue\n>>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\nfalse\n>>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\ntrue\n>>> triplesSumToZero(Arrays.asList(1))\nfalse", "instruction": "Write a Java function `public boolean triplesSumToZero(List<Integer> l)` to solve the following problem:\ntriplesSumToZero takes a list of integers as an input.\nit returns True if there are three distinct elements in the list that\nsum to zero, and False otherwise.\n>>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\nfalse\n>>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\ntrue\n>>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\nfalse\n>>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\ntrue\n>>> triplesSumToZero(Arrays.asList(1))\nfalse", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean TRIPLES_SUM_TO_ZERO(List<Integer> l) {\n        for (int i = 1; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.TRIPLES_SUM_TO_ZERO(new ArrayList<>(Arrays.asList(1, 3, 5, 0))),\n                !s.TRIPLES_SUM_TO_ZERO(new ArrayList<>(Arrays.asList(1, 3, 5, -1))),\n                s.TRIPLES_SUM_TO_ZERO(new ArrayList<>(Arrays.asList(1, 3, -2, 1))),\n                !s.TRIPLES_SUM_TO_ZERO(new ArrayList<>(Arrays.asList(1, 2, 3, 7))),\n                !s.TRIPLES_SUM_TO_ZERO(new ArrayList<>(Arrays.asList(1, 2, 5, 7))),\n                s.TRIPLES_SUM_TO_ZERO(new ArrayList<>(Arrays.asList(2, 4, -5, 3, 9, 7))),\n                !s.TRIPLES_SUM_TO_ZERO(new ArrayList<>(Arrays.asList(1))),\n                !s.TRIPLES_SUM_TO_ZERO(new ArrayList<>(Arrays.asList(1, 3, 5, -100))),\n                !s.TRIPLES_SUM_TO_ZERO(new ArrayList<>(Arrays.asList(100, 3, 5, -100)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "TRIPLES_SUM_TO_ZERO", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean TRIPLES_SUM_TO_ZERO(List<Integer> l) {\n"}
{"task_id": "Java/41", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int carRaceCollision(int n) {\n", "canonical_solution": "        return n * n;\n    }\n}", "buggy_solution": "        return n * n * n;\n    }\n}", "bug_type": "value misuse", "failure_symptoms": "incorrect output", "entry_point": "carRaceCollision", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.carRaceCollision(2) == 4,\n                s.carRaceCollision(3) == 9,\n                s.carRaceCollision(4) == 16,\n                s.carRaceCollision(8) == 64,\n                s.carRaceCollision(10) == 100\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "", "signature": "public int carRaceCollision(int n)", "docstring": "Imagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\nThis function outputs the number of such collisions.", "instruction": "Write a Java function `public int carRaceCollision(int n)` to solve the following problem:\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\nThis function outputs the number of such collisions.", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int CAR_RACE_COLLISION(int n) {\n        return n * n * n;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.CAR_RACE_COLLISION(2) == 4,\n                s.CAR_RACE_COLLISION(3) == 9,\n                s.CAR_RACE_COLLISION(4) == 16,\n                s.CAR_RACE_COLLISION(8) == 64,\n                s.CAR_RACE_COLLISION(10) == 100\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "CAR_RACE_COLLISION", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int CAR_RACE_COLLISION(int n) {\n"}
{"task_id": "Java/42", "prompt": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> incrList(List<Integer> l) {\n", "canonical_solution": "        return l.stream().map(p -> p + 1).collect(Collectors.toList());\n    }\n}", "buggy_solution": "        return l.stream().map(p -> p + 2).collect(Collectors.toList());\n    }\n}", "bug_type": "value misuse", "failure_symptoms": "incorrect output", "entry_point": "incrList", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.incrList(new ArrayList<>(Arrays.asList())).equals(List.of()),\n                s.incrList(new ArrayList<>(Arrays.asList(3, 2, 1))).equals(Arrays.asList(4, 3, 2)),\n                s.incrList(new ArrayList<>(Arrays.asList(5, 2, 5, 2, 3, 3, 9, 0, 123))).equals(Arrays.asList(6, 3, 6, 3, 4, 4, 10, 1, 124))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.incrList(new ArrayList<>(Arrays.asList(1, 2, 3))).equals(Arrays.asList(2, 3, 4)),\n                s.incrList(new ArrayList<>(Arrays.asList(5, 2, 5, 2, 3, 3, 9, 0, 123))).equals(Arrays.asList(6, 3, 6, 3, 4, 4, 10, 1, 124))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<Integer> incrList(List<Integer> l)", "docstring": "Return list with elements incremented by 1.\n>>> incrList(Arrays.asList(1, 2, 3))\n[2, 3, 4]\n>>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n[6, 4, 6, 3, 4, 4, 10, 1, 124]", "instruction": "Write a Java function `public List<Integer> incrList(List<Integer> l)` to solve the following problem:\nReturn list with elements incremented by 1.\n>>> incrList(Arrays.asList(1, 2, 3))\n[2, 3, 4]\n>>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n[6, 4, 6, 3, 4, 4, 10, 1, 124]", "modified_context": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> INCR_LIST(List<Integer> l) {\n        return l.stream().map(p -> p + 2).collect(Collectors.toList());\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.INCR_LIST(new ArrayList<>(Arrays.asList())).equals(List.of()),\n                s.INCR_LIST(new ArrayList<>(Arrays.asList(3, 2, 1))).equals(Arrays.asList(4, 3, 2)),\n                s.INCR_LIST(new ArrayList<>(Arrays.asList(5, 2, 5, 2, 3, 3, 9, 0, 123))).equals(Arrays.asList(6, 3, 6, 3, 4, 4, 10, 1, 124))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "INCR_LIST", "modified_declaration": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> INCR_LIST(List<Integer> l) {\n"}
{"task_id": "Java/43", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean pairsSumToZero(List<Integer> l) {\n", "canonical_solution": "        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                if (l.get(i) + l.get(j) == 0) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "buggy_solution": "        for (int i = 0; i < l.size(); i++) {\n            for (int j = i; j < l.size(); j++) {\n                if (l.get(i) + l.get(j) == 0) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "bug_type": "value misuse", "failure_symptoms": "incorrect output", "entry_point": "pairsSumToZero", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.pairsSumToZero(new ArrayList<>(Arrays.asList(1, 3, 5, 0))),\n                !s.pairsSumToZero(new ArrayList<>(Arrays.asList(1, 3, -2, 1))),\n                !s.pairsSumToZero(new ArrayList<>(Arrays.asList(1, 2, 3, 7))),\n                s.pairsSumToZero(new ArrayList<>(Arrays.asList(2, 4, -5, 3, 5, 7))),\n                !s.pairsSumToZero(new ArrayList<>(List.of(1))),\n                s.pairsSumToZero(new ArrayList<>(Arrays.asList(-3, 9, -1, 3, 2, 30))),\n                s.pairsSumToZero(new ArrayList<>(Arrays.asList(-3, 9, -1, 3, 2, 31))),\n                !s.pairsSumToZero(new ArrayList<>(Arrays.asList(-3, 9, -1, 4, 2, 30))),\n                !s.pairsSumToZero(new ArrayList<>(Arrays.asList(-3, 9, -1, 4, 2, 31)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.pairsSumToZero(new ArrayList<>(Arrays.asList(1, 3, 5, 0))),\n                !s.pairsSumToZero(new ArrayList<>(Arrays.asList(1, 3, -2, 1))),\n                !s.pairsSumToZero(new ArrayList<>(Arrays.asList(1, 2, 3, 7))),\n                s.pairsSumToZero(new ArrayList<>(Arrays.asList(2, 4, -5, 3, 5, 7)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public boolean pairsSumToZero(List<Integer> l)", "docstring": "pairsSumToZero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\nfalse\n>>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\nfalse\n>>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\nfalse\n>>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\ntrue\n>>> pairsSumToZero(Arrays.asList(1))\nfalse", "instruction": "Write a Java function `public boolean pairsSumToZero(List<Integer> l)` to solve the following problem:\npairsSumToZero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\nfalse\n>>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\nfalse\n>>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\nfalse\n>>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\ntrue\n>>> pairsSumToZero(Arrays.asList(1))\nfalse", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean PAIRS_SUM_TO_ZERO(List<Integer> l) {\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i; j < l.size(); j++) {\n                if (l.get(i) + l.get(j) == 0) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.PAIRS_SUM_TO_ZERO(new ArrayList<>(Arrays.asList(1, 3, 5, 0))),\n                !s.PAIRS_SUM_TO_ZERO(new ArrayList<>(Arrays.asList(1, 3, -2, 1))),\n                !s.PAIRS_SUM_TO_ZERO(new ArrayList<>(Arrays.asList(1, 2, 3, 7))),\n                s.PAIRS_SUM_TO_ZERO(new ArrayList<>(Arrays.asList(2, 4, -5, 3, 5, 7))),\n                !s.PAIRS_SUM_TO_ZERO(new ArrayList<>(List.of(1))),\n                s.PAIRS_SUM_TO_ZERO(new ArrayList<>(Arrays.asList(-3, 9, -1, 3, 2, 30))),\n                s.PAIRS_SUM_TO_ZERO(new ArrayList<>(Arrays.asList(-3, 9, -1, 3, 2, 31))),\n                !s.PAIRS_SUM_TO_ZERO(new ArrayList<>(Arrays.asList(-3, 9, -1, 4, 2, 30))),\n                !s.PAIRS_SUM_TO_ZERO(new ArrayList<>(Arrays.asList(-3, 9, -1, 4, 2, 31)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "PAIRS_SUM_TO_ZERO", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean PAIRS_SUM_TO_ZERO(List<Integer> l) {\n"}
{"task_id": "Java/44", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String changeBase(int x, int base) {\n", "canonical_solution": "        StringBuilder ret = new StringBuilder();\n        while (x > 0) {\n            ret.append(String.valueOf(x % base));\n            x /= base;\n        }\n        return ret.reverse().toString();\n    }\n}", "buggy_solution": "        StringBuilder ret = new StringBuilder();\n        while (x > 0) {\n            ret.append(String.valueOf(x % base));\n            x -= base;\n        }\n        return ret.reverse().toString();\n    }\n}", "bug_type": "operator misuse", "failure_symptoms": "infinite loop", "entry_point": "changeBase", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.changeBase(8, 3), \"22\"),\n                Objects.equals(s.changeBase(9, 3), \"100\"),\n                Objects.equals(s.changeBase(234, 2), \"11101010\"),\n                Objects.equals(s.changeBase(16, 2), \"10000\"),\n                Objects.equals(s.changeBase(8, 2), \"1000\"),\n                Objects.equals(s.changeBase(7, 2), \"111\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n        for (int x = 2; x < 8; x++) {\n            if (!Objects.equals(s.changeBase(x, x + 1), String.valueOf(x))) {\n                throw new AssertionError();\n            }\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.changeBase(8, 3), \"22\"),\n                Objects.equals(s.changeBase(8, 2), \"1000\"),\n                Objects.equals(s.changeBase(7, 2), \"111\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public String changeBase(int x, int base)", "docstring": "Change numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> changeBase(8, 3)\n\"22\"\n>>> changeBase(8, 2)\n\"1000\"\n>>> changeBase(7, 2)\n\"111\"", "instruction": "Write a Java function `public String changeBase(int x, int base)` to solve the following problem:\nChange numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> changeBase(8, 3)\n\"22\"\n>>> changeBase(8, 2)\n\"1000\"\n>>> changeBase(7, 2)\n\"111\"", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String CHANGE_BASE(int x, int base) {\n        StringBuilder ret = new StringBuilder();\n        while (x > 0) {\n            ret.append(String.valueOf(x % base));\n            x -= base;\n        }\n        return ret.reverse().toString();\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.CHANGE_BASE(8, 3), \"22\"),\n                Objects.equals(s.CHANGE_BASE(9, 3), \"100\"),\n                Objects.equals(s.CHANGE_BASE(234, 2), \"11101010\"),\n                Objects.equals(s.CHANGE_BASE(16, 2), \"10000\"),\n                Objects.equals(s.CHANGE_BASE(8, 2), \"1000\"),\n                Objects.equals(s.CHANGE_BASE(7, 2), \"111\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n        for (int x = 2; x < 8; x++) {\n            if (!Objects.equals(s.CHANGE_BASE(x, x + 1), String.valueOf(x))) {\n                throw new AssertionError();\n            }\n        }\n    }\n}", "modified_entry_point": "CHANGE_BASE", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String CHANGE_BASE(int x, int base) {\n"}
{"task_id": "Java/45", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangleArea(double a, double h) {\n", "canonical_solution": "        return a * h / 2;\n    }\n}", "buggy_solution": "        return a * h / 0.5;\n    }\n}", "bug_type": "value misuse", "failure_symptoms": "incorrect output", "entry_point": "triangleArea", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.triangleArea(5, 3) == 7.5,\n                s.triangleArea(2, 2) == 2.0,\n                s.triangleArea(10, 8) == 40.0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.triangleArea(5, 3) == 7.5\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public double triangleArea(double a, double h)", "docstring": "Given length of a side and high return area for a triangle.\n>>> triangleArea(5, 3)\n7.5", "instruction": "Write a Java function `public double triangleArea(double a, double h)` to solve the following problem:\nGiven length of a side and high return area for a triangle.\n>>> triangleArea(5, 3)\n7.5", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double TRIANGLE_AREA(double a, double h) {\n        return a * h / 0.5;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.TRIANGLE_AREA(5, 3) == 7.5,\n                s.TRIANGLE_AREA(2, 2) == 2.0,\n                s.TRIANGLE_AREA(10, 8) == 40.0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "TRIANGLE_AREA", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double TRIANGLE_AREA(double a, double h) {\n"}
{"task_id": "Java/48", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isPalindrome(String text) {\n", "canonical_solution": "        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) != text.charAt(text.length() - 1 - i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "buggy_solution": "        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) != text.charAt(text.length() - i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "bug_type": "value misuse", "failure_symptoms": "incorrect output", "entry_point": "isPalindrome", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.isPalindrome(\"\"),\n                s.isPalindrome(\"aba\"),\n                s.isPalindrome(\"aaaaa\"),\n                !s.isPalindrome(\"zbcd\"),\n                s.isPalindrome(\"xywyx\"),\n                !s.isPalindrome(\"xywyz\"),\n                !s.isPalindrome(\"xywzx\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.isPalindrome(\"\"),\n                s.isPalindrome(\"aba\"),\n                s.isPalindrome(\"aaaaa\"),\n                !s.isPalindrome(\"zbcd\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public boolean isPalindrome(String text)", "docstring": "Checks if given string is a palindrome\n>>> isPalindrome(\"\")\ntrue\n>>> isPalindrome(\"aba\")\ntrue\n>>> isPalindrome(\"aaaaa\")\ntrue\n>>> isPalindrome(\"zbcd\")\nfalse", "instruction": "Write a Java function `public boolean isPalindrome(String text)` to solve the following problem:\nChecks if given string is a palindrome\n>>> isPalindrome(\"\")\ntrue\n>>> isPalindrome(\"aba\")\ntrue\n>>> isPalindrome(\"aaaaa\")\ntrue\n>>> isPalindrome(\"zbcd\")\nfalse", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean IS_PALINDROME(String text) {\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) != text.charAt(text.length() - i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.IS_PALINDROME(\"\"),\n                s.IS_PALINDROME(\"aba\"),\n                s.IS_PALINDROME(\"aaaaa\"),\n                !s.IS_PALINDROME(\"zbcd\"),\n                s.IS_PALINDROME(\"xywyx\"),\n                !s.IS_PALINDROME(\"xywyz\"),\n                !s.IS_PALINDROME(\"xywzx\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "IS_PALINDROME", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean IS_PALINDROME(String text) {\n"}
{"task_id": "Java/50", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public String decodeShift(String s) {\n", "canonical_solution": "        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 21 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}", "buggy_solution": "        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 21 - ch) % 26)));\n        }\n        return sb.toString();\n    }\n}", "bug_type": "variable misuse", "failure_symptoms": "incorrect output", "entry_point": "decodeShift", "import": "", "test_setup": "", "test": "\npublic class Main {\n    static char[] letters = \"abcdefghijklmnopqrstuvwxyz\".toCharArray();\n    static Random rand = new Random(42);\n\n    public static String random_string(int length) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < length; i++) {\n            sb.append(letters[rand.nextInt(26)]);\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        for (int i = 0; i < 100; i++) {\n            String str = random_string(rand.nextInt(10) + 10);\n            String encode_str = s.encodeShift(str);\n            if (!s.decodeShift(encode_str).equals(str)) {\n                throw new AssertionError();\n            }\n        }\n    }\n}", "example_test": "", "signature": "public String decodeShift(String s)", "docstring": "takes as input string encoded with encodeShift function. Returns decoded string.", "instruction": "Write a Java function `public String decodeShift(String s)` to solve the following problem:\ntakes as input string encoded with encodeShift function. Returns decoded string.", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String ENCODE_SHIFT(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public String DECODE_SHIFT(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 21 - ch) % 26)));\n        }\n        return sb.toString();\n    }\n}", "modified_test": "\n\npublic class Main {\n    static char[] letters = \"abcdefghijklmnopqrstuvwxyz\".toCharArray();\n    static Random rand = new Random(42);\n\n    public static String random_string(int length) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < length; i++) {\n            sb.append(letters[rand.nextInt(26)]);\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        for (int i = 0; i < 100; i++) {\n            String str = random_string(rand.nextInt(10) + 10);\n            String encode_str = s.ENCODE_SHIFT(str);\n            if (!s.DECODE_SHIFT(encode_str).equals(str)) {\n                throw new AssertionError();\n            }\n        }\n    }\n}", "modified_entry_point": "DECODE_SHIFT", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String ENCODE_SHIFT(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public String DECODE_SHIFT(String s) {\n"}
{"task_id": "Java/51", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String removeVowels(String text) {\n", "canonical_solution": "        StringBuilder sb = new StringBuilder();\n        for (char ch : text.toCharArray()) {\n            if (\"aeiou\".indexOf(Character.toLowerCase(ch)) == -1) {\n                sb.append(ch);\n            }\n        }\n        return sb.toString();\n    }\n}", "buggy_solution": "        StringBuilder sb = new StringBuilder();\n        for (char ch : text.toCharArray()) {\n            if (\"aeiouwy\".indexOf(Character.toLowerCase(ch)) == -1) {\n                sb.append(ch);\n            }\n        }\n        return sb.toString();\n    }\n}", "bug_type": "excess logic", "failure_symptoms": "incorrect output", "entry_point": "removeVowels", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.removeVowels(\"\"), \"\"),\n                Objects.equals(s.removeVowels(\"abcdef\\nghijklm\"), \"bcdf\\nghjklm\"),\n                Objects.equals(s.removeVowels(\"fedcba\"), \"fdcb\"),\n                Objects.equals(s.removeVowels(\"eeeee\"), \"\"),\n                Objects.equals(s.removeVowels(\"acBAA\"), \"cB\"),\n                Objects.equals(s.removeVowels(\"EcBOO\"), \"cB\"),\n                Objects.equals(s.removeVowels(\"ybcd\"), \"ybcd\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.removeVowels(\"\"), \"\"),\n                Objects.equals(s.removeVowels(\"abcdef\\nghijklm\"), \"bcdf\\nghjklm\"),\n                Objects.equals(s.removeVowels(\"abcdef\"), \"bcdf\"),\n                Objects.equals(s.removeVowels(\"aaaaa\"), \"\"),\n                Objects.equals(s.removeVowels(\"aaBAA\"), \"B\"),\n                Objects.equals(s.removeVowels(\"zbcd\"), \"zbcd\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public String removeVowels(String text)", "docstring": "removeVowels is a function that takes string and returns string without vowels.\n>>> removeVowels(\"\")\n\"\"\n>>> removeVowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> removeVowels(\"abcdef\")\n\"bcdf\"\n>>> removeVowels(\"aaaaa\")\n\"\"\n>>> removeVowels(\"aaBAA\")\n\"B\"\n>>> removeVowels(\"zbcd\")\n\"zbcd\"", "instruction": "Write a Java function `public String removeVowels(String text)` to solve the following problem:\nremoveVowels is a function that takes string and returns string without vowels.\n>>> removeVowels(\"\")\n\"\"\n>>> removeVowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> removeVowels(\"abcdef\")\n\"bcdf\"\n>>> removeVowels(\"aaaaa\")\n\"\"\n>>> removeVowels(\"aaBAA\")\n\"B\"\n>>> removeVowels(\"zbcd\")\n\"zbcd\"", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String REMOVE_VOWELS(String text) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : text.toCharArray()) {\n            if (\"aeiouwy\".indexOf(Character.toLowerCase(ch)) == -1) {\n                sb.append(ch);\n            }\n        }\n        return sb.toString();\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.REMOVE_VOWELS(\"\"), \"\"),\n                Objects.equals(s.REMOVE_VOWELS(\"abcdef\\nghijklm\"), \"bcdf\\nghjklm\"),\n                Objects.equals(s.REMOVE_VOWELS(\"fedcba\"), \"fdcb\"),\n                Objects.equals(s.REMOVE_VOWELS(\"eeeee\"), \"\"),\n                Objects.equals(s.REMOVE_VOWELS(\"acBAA\"), \"cB\"),\n                Objects.equals(s.REMOVE_VOWELS(\"EcBOO\"), \"cB\"),\n                Objects.equals(s.REMOVE_VOWELS(\"ybcd\"), \"ybcd\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "REMOVE_VOWELS", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String REMOVE_VOWELS(String text) {\n"}
{"task_id": "Java/52", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean belowThreshold(List<Integer> l, int t) {\n", "canonical_solution": "        for (int e : l) {\n            if (e >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "buggy_solution": "        for (int e : l) {\n            if (e >= t) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "bug_type": "operator misuse", "failure_symptoms": "incorrect output", "entry_point": "belowThreshold", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.belowThreshold(new ArrayList<>(Arrays.asList(1, 2, 4, 10)), 100),\n                !s.belowThreshold(new ArrayList<>(Arrays.asList(1, 20, 4, 10)), 5),\n                s.belowThreshold(new ArrayList<>(Arrays.asList(1, 20, 4, 10)), 21),\n                s.belowThreshold(new ArrayList<>(Arrays.asList(1, 20, 4, 10)), 22),\n                s.belowThreshold(new ArrayList<>(Arrays.asList(1, 8, 4, 10)), 11),\n                !s.belowThreshold(new ArrayList<>(Arrays.asList(1, 8, 4, 10)), 10)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.belowThreshold(new ArrayList<>(Arrays.asList(1, 2, 4, 10)), 100),\n                !s.belowThreshold(new ArrayList<>(Arrays.asList(1, 20, 4, 10)), 5)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public boolean belowThreshold(List<Integer> l, int t)", "docstring": "Return True if all numbers in the list l are below threshold t.\n>>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\ntrue\n>>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\nfalse", "instruction": "Write a Java function `public boolean belowThreshold(List<Integer> l, int t)` to solve the following problem:\nReturn True if all numbers in the list l are below threshold t.\n>>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\ntrue\n>>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\nfalse", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean BELOW_THRESHOLD(List<Integer> l, int t) {\n        for (int e : l) {\n            if (e >= t) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.BELOW_THRESHOLD(new ArrayList<>(Arrays.asList(1, 2, 4, 10)), 100),\n                !s.BELOW_THRESHOLD(new ArrayList<>(Arrays.asList(1, 20, 4, 10)), 5),\n                s.BELOW_THRESHOLD(new ArrayList<>(Arrays.asList(1, 20, 4, 10)), 21),\n                s.BELOW_THRESHOLD(new ArrayList<>(Arrays.asList(1, 20, 4, 10)), 22),\n                s.BELOW_THRESHOLD(new ArrayList<>(Arrays.asList(1, 8, 4, 10)), 11),\n                !s.BELOW_THRESHOLD(new ArrayList<>(Arrays.asList(1, 8, 4, 10)), 10)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "BELOW_THRESHOLD", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean BELOW_THRESHOLD(List<Integer> l, int t) {\n"}
{"task_id": "Java/54", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean sameChars(String s0, String s1) {\n", "canonical_solution": "        Set<Character> set0 = new HashSet<>();\n        for (char c : s0.toCharArray()) {\n            set0.add(c);\n        }\n        Set<Character> set1 = new HashSet<>();\n        for (char c : s1.toCharArray()) {\n            set1.add(c);\n        }\n        return set0.equals(set1);\n    }\n}", "buggy_solution": "        Set<Character> set0 = new HashSet<>();\n        for (char c : s0.toCharArray()) {\n            set0.add(c);\n        }\n        Set<Character> set1 = new HashSet<>();\n        for (char c : s0.toCharArray()) {\n            set1.add(c);\n        }\n        return set0.equals(set1);\n    }\n}", "bug_type": "missing logic", "failure_symptoms": "incorrect output", "entry_point": "sameChars", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\n                s.sameChars(\"abcd\", \"dddddddabc\"),\n                s.sameChars(\"dddddddabc\", \"abcd\"),\n                !s.sameChars(\"eabcd\", \"dddddddabc\"),\n                !s.sameChars(\"abcd\", \"dddddddabcf\"),\n                !s.sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"),\n                !s.sameChars(\"aabb\", \"aaccc\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\n                s.sameChars(\"abcd\", \"dddddddabc\"),\n                s.sameChars(\"dddddddabc\", \"abcd\"),\n                !s.sameChars(\"eabcd\", \"dddddddabc\"),\n                !s.sameChars(\"abcd\", \"dddddddabcf\"),\n                !s.sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public boolean sameChars(String s0, String s1)", "docstring": "Check if two words have the same characters.\n>>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> sameChars(\"abcd\", \"dddddddabc\")\ntrue\n>>> sameChars(\"dddddddabc\", \"abcd\")\ntrue\n>>> sameChars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> sameChars(\"abcd\", \"dddddddabce\")\nfalse\n>>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse", "instruction": "Write a Java function `public boolean sameChars(String s0, String s1)` to solve the following problem:\nCheck if two words have the same characters.\n>>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> sameChars(\"abcd\", \"dddddddabc\")\ntrue\n>>> sameChars(\"dddddddabc\", \"abcd\")\ntrue\n>>> sameChars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> sameChars(\"abcd\", \"dddddddabce\")\nfalse\n>>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean SAME_CHARS(String s0, String s1) {\n        Set<Character> set0 = new HashSet<>();\n        for (char c : s0.toCharArray()) {\n            set0.add(c);\n        }\n        Set<Character> set1 = new HashSet<>();\n        for (char c : s0.toCharArray()) {\n            set1.add(c);\n        }\n        return set0.equals(set1);\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.SAME_CHARS(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\n                s.SAME_CHARS(\"abcd\", \"dddddddabc\"),\n                s.SAME_CHARS(\"dddddddabc\", \"abcd\"),\n                !s.SAME_CHARS(\"eabcd\", \"dddddddabc\"),\n                !s.SAME_CHARS(\"abcd\", \"dddddddabcf\"),\n                !s.SAME_CHARS(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"),\n                !s.SAME_CHARS(\"aabb\", \"aaccc\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "SAME_CHARS", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean SAME_CHARS(String s0, String s1) {\n"}
{"task_id": "Java/56", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correctBracketing(String brackets) {\n", "canonical_solution": "        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}", "buggy_solution": "        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '>') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}", "bug_type": "operator misuse", "failure_symptoms": "incorrect output", "entry_point": "correctBracketing", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.correctBracketing(\"<>\"),\n                s.correctBracketing(\"<<><>>\"),\n                s.correctBracketing(\"<><><<><>><>\"),\n                s.correctBracketing(\"<><><<<><><>><>><<><><<>>>\"),\n                !s.correctBracketing(\"<<<><>>>>\"),\n                !s.correctBracketing(\"><<>\"),\n                !s.correctBracketing(\"<\"),\n                !s.correctBracketing(\"<<<<\"),\n                !s.correctBracketing(\">\"),\n                !s.correctBracketing(\"<<>\"),\n                !s.correctBracketing(\"<><><<><>><>><<>\"),\n                !s.correctBracketing(\"<><><<><>><>>><>\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.correctBracketing(\"<>\"),\n                s.correctBracketing(\"<<><>>\"),\n                !s.correctBracketing(\"><<>\"),\n                !s.correctBracketing(\"<\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public boolean correctBracketing(String brackets)", "docstring": "brackets is a string of \"<\" and \">\".\nreturn True if every opening bracket has a corresponding closing bracket.\n>>> correctBracketing(\"<\")\nfalse\n>>> correctBracketing(\"<>\")\ntrue\n>>> correctBracketing(\"<<><>>\")\ntrue\n>>> correctBracketing(\"><<>\")\nfalse", "instruction": "Write a Java function `public boolean correctBracketing(String brackets)` to solve the following problem:\nbrackets is a string of \"<\" and \">\".\nreturn True if every opening bracket has a corresponding closing bracket.\n>>> correctBracketing(\"<\")\nfalse\n>>> correctBracketing(\"<>\")\ntrue\n>>> correctBracketing(\"<<><>>\")\ntrue\n>>> correctBracketing(\"><<>\")\nfalse", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean CORRECT_BRACKETING(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '>') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.CORRECT_BRACKETING(\"<>\"),\n                s.CORRECT_BRACKETING(\"<<><>>\"),\n                s.CORRECT_BRACKETING(\"<><><<><>><>\"),\n                s.CORRECT_BRACKETING(\"<><><<<><><>><>><<><><<>>>\"),\n                !s.CORRECT_BRACKETING(\"<<<><>>>>\"),\n                !s.CORRECT_BRACKETING(\"><<>\"),\n                !s.CORRECT_BRACKETING(\"<\"),\n                !s.CORRECT_BRACKETING(\"<<<<\"),\n                !s.CORRECT_BRACKETING(\">\"),\n                !s.CORRECT_BRACKETING(\"<<>\"),\n                !s.CORRECT_BRACKETING(\"<><><<><>><>><<>\"),\n                !s.CORRECT_BRACKETING(\"<><><<><>><>>><>\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "CORRECT_BRACKETING", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean CORRECT_BRACKETING(String brackets) {\n"}
{"task_id": "Java/59", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largestPrimeFactor(int n) {\n", "canonical_solution": "        int largest = 1;\n        for (int j = 2; j <= n; j++) {\n            if (n % j == 0) {\n                boolean isPrime = j >= 2;\n                for (int i = 2; i < j - 1; i++) {\n                    if (j % i == 0) {\n                        isPrime = false;\n                        break;\n                    }\n                }\n                if (isPrime) {\n                    largest = Math.max(largest, j);\n                }\n            }\n        }\n        return largest;\n    }\n}", "buggy_solution": "        int largest = 1;\n        for (int j = 2; j <= n; j++) {\n            if (n % j == 0) {\n                boolean isPrime = j >= 2;\n                for (int i = 2; i < j - 1; i++) {\n                    if (n % i == 0) {\n                        isPrime = false;\n                        break;\n                    }\n                }\n                if (isPrime) {\n                    largest = Math.max(largest, j);\n                }\n            }\n        }\n        return largest;\n    }\n}", "bug_type": "variable misuse", "failure_symptoms": "incorrect output", "entry_point": "largestPrimeFactor", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.largestPrimeFactor(15) == 5,\n                s.largestPrimeFactor(27) == 3,\n                s.largestPrimeFactor(63) == 7,\n                s.largestPrimeFactor(330) == 11,\n                s.largestPrimeFactor(13195) == 29\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.largestPrimeFactor(2048) ==2,\n                s.largestPrimeFactor(13195) == 29\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public int largestPrimeFactor(int n)", "docstring": "Return the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largestPrimeFactor(13195)\n29\n>>> largestPrimeFactor(2048)\n2", "instruction": "Write a Java function `public int largestPrimeFactor(int n)` to solve the following problem:\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largestPrimeFactor(13195)\n29\n>>> largestPrimeFactor(2048)\n2", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int LARGEST_PRIME_FACTOR(int n) {\n        int largest = 1;\n        for (int j = 2; j <= n; j++) {\n            if (n % j == 0) {\n                boolean IS_PRIME = j >= 2;\n                for (int i = 2; i < j - 1; i++) {\n                    if (n % i == 0) {\n                        IS_PRIME = false;\n                        break;\n                    }\n                }\n                if (IS_PRIME) {\n                    largest = Math.max(largest, j);\n                }\n            }\n        }\n        return largest;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.LARGEST_PRIME_FACTOR(15) == 5,\n                s.LARGEST_PRIME_FACTOR(27) == 3,\n                s.LARGEST_PRIME_FACTOR(63) == 7,\n                s.LARGEST_PRIME_FACTOR(330) == 11,\n                s.LARGEST_PRIME_FACTOR(13195) == 29\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "LARGEST_PRIME_FACTOR", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int LARGEST_PRIME_FACTOR(int n) {\n"}
{"task_id": "Java/60", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sumToN(int n) {\n", "canonical_solution": "        int result = 0;\n        for (int i = 1; i <= n; i++) {\n            result += i;\n        }\n        return result;\n    }\n}", "buggy_solution": "        int result = 0;\n        for (int i = 1; i < n; i++) {\n            result += i;\n        }\n        return result;\n    }\n}", "bug_type": "value misuse", "failure_symptoms": "incorrect output", "entry_point": "sumToN", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sumToN(1) == 1,\n                s.sumToN(6) == 21,\n                s.sumToN(11) == 66,\n                s.sumToN(30) == 465,\n                s.sumToN(100) == 5050\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sumToN(1) == 1,\n                s.sumToN(5) == 15,\n                s.sumToN(10) == 55,\n                s.sumToN(30) == 465,\n                s.sumToN(100) == 5050\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public int sumToN(int n)", "docstring": "sumToN is a function that sums numbers from 1 to n.\n>>> sumToN(30)\n465\n>>> sumToN(100)\n5050\n>>> sumToN(5)\n15\n>>> sumToN(10)\n55\n>>> sumToN(1)\n1", "instruction": "Write a Java function `public int sumToN(int n)` to solve the following problem:\nsumToN is a function that sums numbers from 1 to n.\n>>> sumToN(30)\n465\n>>> sumToN(100)\n5050\n>>> sumToN(5)\n15\n>>> sumToN(10)\n55\n>>> sumToN(1)\n1", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int SUM_TO_N(int n) {\n        int result = 0;\n        for (int i = 1; i < n; i++) {\n            result += i;\n        }\n        return result;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.SUM_TO_N(1) == 1,\n                s.SUM_TO_N(6) == 21,\n                s.SUM_TO_N(11) == 66,\n                s.SUM_TO_N(30) == 465,\n                s.SUM_TO_N(100) == 5050\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "SUM_TO_N", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int SUM_TO_N(int n) {\n"}
{"task_id": "Java/61", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correctBracketing(String brackets) {\n", "canonical_solution": "        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '(') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}", "buggy_solution": "        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '(') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return true;\n            }\n        }\n        return depth == 0;\n    }\n}", "bug_type": "operator misuse", "failure_symptoms": "incorrect output", "entry_point": "correctBracketing", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.correctBracketing(\"()\"),\n                s.correctBracketing(\"(()())\"),\n                s.correctBracketing(\"()()(()())()\"),\n                s.correctBracketing(\"()()((()()())())(()()(()))\"),\n                !s.correctBracketing(\"((()())))\"),\n                !s.correctBracketing(\")(()\"),\n                !s.correctBracketing(\"(\"),\n                !s.correctBracketing(\"((((\"),\n                !s.correctBracketing(\")\"),\n                !s.correctBracketing(\"(()\"),\n                !s.correctBracketing(\"()()(()())())(()\"),\n                !s.correctBracketing(\"()()(()())()))()\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.correctBracketing(\"()\"),\n                s.correctBracketing(\"(()())\"),\n                !s.correctBracketing(\")(()\"),\n                !s.correctBracketing(\"(\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public boolean correctBracketing(String brackets)", "docstring": "brackets is a string of \"(\" and \")\".\nreturn True if every opening bracket has a corresponding closing bracket.\n>>> correctBracketing(\"(\")\nfalse\n>>> correctBracketing(\"()\")\ntrue\n>>> correctBracketing(\"(()())\")\ntrue\n>>> correctBracketing(\")(()\")\nfalse", "instruction": "Write a Java function `public boolean correctBracketing(String brackets)` to solve the following problem:\nbrackets is a string of \"(\" and \")\".\nreturn True if every opening bracket has a corresponding closing bracket.\n>>> correctBracketing(\"(\")\nfalse\n>>> correctBracketing(\"()\")\ntrue\n>>> correctBracketing(\"(()())\")\ntrue\n>>> correctBracketing(\")(()\")\nfalse", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean CORRECT_BRACKETING(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '(') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return true;\n            }\n        }\n        return depth == 0;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.CORRECT_BRACKETING(\"()\"),\n                s.CORRECT_BRACKETING(\"(()())\"),\n                s.CORRECT_BRACKETING(\"()()(()())()\"),\n                s.CORRECT_BRACKETING(\"()()((()()())())(()()(()))\"),\n                !s.CORRECT_BRACKETING(\"((()())))\"),\n                !s.CORRECT_BRACKETING(\")(()\"),\n                !s.CORRECT_BRACKETING(\"(\"),\n                !s.CORRECT_BRACKETING(\"((((\"),\n                !s.CORRECT_BRACKETING(\")\"),\n                !s.CORRECT_BRACKETING(\"(()\"),\n                !s.CORRECT_BRACKETING(\"()()(()())())(()\"),\n                !s.CORRECT_BRACKETING(\"()()(()())()))()\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "CORRECT_BRACKETING", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean CORRECT_BRACKETING(String brackets) {\n"}
{"task_id": "Java/64", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int vowelsCount(String s) {\n", "canonical_solution": "        String vowels = \"aeiouAEIOU\";\n        int nVowels = 0;\n        for (char c : s.toCharArray()) {\n            if (vowels.indexOf(c) != -1) {\n                nVowels += 1;\n            }\n        }\n        if (s.charAt(s.length() - 1) == 'y' || s.charAt(s.length() - 1) == 'Y') {\n            nVowels += 1;\n        }\n        return nVowels;\n    }\n}", "buggy_solution": "        String vowels = \"aeiouyAEIOUY\";\n        int nVowels = 0;\n        for (char c : s.toCharArray()) {\n            if (vowels.indexOf(c) != -1) {\n                nVowels += 1;\n            }\n        }\n        return nVowels;\n    }\n}", "bug_type": "missing logic", "failure_symptoms": "incorrect output", "entry_point": "vowelsCount", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.vowelsCount(\"abcde\") == 2,\n                s.vowelsCount(\"Alone\") == 3,\n                s.vowelsCount(\"key\") == 2,\n                s.vowelsCount(\"bye\") == 1,\n                s.vowelsCount(\"keY\") == 2,\n                s.vowelsCount(\"bYe\") == 1,\n                s.vowelsCount(\"ACEDY\") == 3\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.vowelsCount(\"abcde\") == 2,\n                s.vowelsCount(\"ACEDY\") == 3\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public int vowelsCount(String s)", "docstring": "Write a function vowelsCount which takes a string representing\na word as input and returns the number of vowels in the string.\nVowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\nvowel, but only when it is at the end of the given word.\nExample:\n>>> vowelsCount(\"abcde\")\n2\n>>> vowelsCount(\"ACEDY\")\n3", "instruction": "Write a Java function `public int vowelsCount(String s)` to solve the following problem:\nWrite a function vowelsCount which takes a string representing\na word as input and returns the number of vowels in the string.\nVowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\nvowel, but only when it is at the end of the given word.\nExample:\n>>> vowelsCount(\"abcde\")\n2\n>>> vowelsCount(\"ACEDY\")\n3", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int VOWELS_COUNT(String s) {\n        String vowels = \"aeiouyAEIOUY\";\n        int N_VOWELS = 0;\n        for (char c : s.toCharArray()) {\n            if (vowels.indexOf(c) != -1) {\n                N_VOWELS += 1;\n            }\n        }\n        return N_VOWELS;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.VOWELS_COUNT(\"abcde\") == 2,\n                s.VOWELS_COUNT(\"Alone\") == 3,\n                s.VOWELS_COUNT(\"key\") == 2,\n                s.VOWELS_COUNT(\"bye\") == 1,\n                s.VOWELS_COUNT(\"keY\") == 2,\n                s.VOWELS_COUNT(\"bYe\") == 1,\n                s.VOWELS_COUNT(\"ACEDY\") == 3\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "VOWELS_COUNT", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int VOWELS_COUNT(String s) {\n"}
{"task_id": "Java/65", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String circularShift(int x, int shift) {\n", "canonical_solution": "        String s = String.valueOf(x);\n        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n        } else {\n            return s.substring(s.length() - shift) + s.substring(0, s.length() - shift);\n        }\n    }\n}", "buggy_solution": "        String s = String.valueOf(x);\n        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n        } else {\n            return s.substring(0, s.length() - shift) + s.substring(s.length() - shift);\n        }\n    }\n}", "bug_type": "variable misuse", "failure_symptoms": "incorrect output", "entry_point": "circularShift", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.circularShift(100, 2).equals(\"001\"),\n                s.circularShift(12, 2).equals(\"12\"),\n                s.circularShift(97, 8).equals(\"79\"),\n                s.circularShift(12, 1).equals(\"21\"),\n                s.circularShift(11, 101).equals(\"11\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.circularShift(12, 2).equals(\"12\"),\n                s.circularShift(12, 1).equals(\"21\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public String circularShift(int x, int shift)", "docstring": "Circular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circularShift(12, 1)\n\"21\"\n>>> circularShift(12, 2)\n\"12\"", "instruction": "Write a Java function `public String circularShift(int x, int shift)` to solve the following problem:\nCircular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circularShift(12, 1)\n\"21\"\n>>> circularShift(12, 2)\n\"12\"", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String CIRCULAR_SHIFT(int x, int shift) {\n        String s = String.valueOf(x);\n        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n        } else {\n            return s.substring(0, s.length() - shift) + s.substring(s.length() - shift);\n        }\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.CIRCULAR_SHIFT(100, 2).equals(\"001\"),\n                s.CIRCULAR_SHIFT(12, 2).equals(\"12\"),\n                s.CIRCULAR_SHIFT(97, 8).equals(\"79\"),\n                s.CIRCULAR_SHIFT(12, 1).equals(\"21\"),\n                s.CIRCULAR_SHIFT(11, 101).equals(\"11\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "CIRCULAR_SHIFT", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String CIRCULAR_SHIFT(int x, int shift) {\n"}
{"task_id": "Java/66", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digitSum(String s) {\n", "canonical_solution": "        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}", "buggy_solution": "        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}", "bug_type": "function misuse", "failure_symptoms": "incorrect output", "entry_point": "digitSum", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.digitSum(\"\") == 0,\n                s.digitSum(\"abAB\") == 131,\n                s.digitSum(\"abcCd\") == 67,\n                s.digitSum(\"helloE\") == 69,\n                s.digitSum(\"woArBld\") == 131,\n                s.digitSum(\"aAaaaXa\") == 153,\n                s.digitSum(\" How are yOu?\") == 151,\n                s.digitSum(\"You arE Very Smart\") == 327\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.digitSum(\"\") == 0,\n                s.digitSum(\"abAB\") == 131,\n                s.digitSum(\"abcCd\") == 67,\n                s.digitSum(\"helloE\") == 69,\n                s.digitSum(\"woArBld\") == 131,\n                s.digitSum(\"aAaaaXa\") == 153\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public int digitSum(String s)", "docstring": "Write a function that takes a string as input and returns the sum of the upper characters only'\nASCII codes.\nExamples:\ndigitSum(\"\") => 0\ndigitSum(\"abAB\") => 131\ndigitSum(\"abcCd\") => 67\ndigitSum(\"helloE\") => 69\ndigitSum(\"woArBld\") => 131\ndigitSum(\"aAaaaXa\") => 153", "instruction": "Write a Java function `public int digitSum(String s)` to solve the following problem:\nWrite a function that takes a string as input and returns the sum of the upper characters only'\nASCII codes.\nExamples:\ndigitSum(\"\") => 0\ndigitSum(\"abAB\") => 131\ndigitSum(\"abcCd\") => 67\ndigitSum(\"helloE\") => 69\ndigitSum(\"woArBld\") => 131\ndigitSum(\"aAaaaXa\") => 153", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int DIGIT_SUM(String s) {\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.DIGIT_SUM(\"\") == 0,\n                s.DIGIT_SUM(\"abAB\") == 131,\n                s.DIGIT_SUM(\"abcCd\") == 67,\n                s.DIGIT_SUM(\"helloE\") == 69,\n                s.DIGIT_SUM(\"woArBld\") == 131,\n                s.DIGIT_SUM(\"aAaaaXa\") == 153,\n                s.DIGIT_SUM(\" How are yOu?\") == 151,\n                s.DIGIT_SUM(\"You arE Very Smart\") == 327\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "DIGIT_SUM", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int DIGIT_SUM(String s) {\n"}
{"task_id": "Java/67", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n", "canonical_solution": "        List<Integer> lis = new ArrayList<>();\n        for (String i : s.split(\" \")) {\n            try {\n                lis.add(Integer.parseInt(i));\n            } catch (NumberFormatException ignored) {\n\n            }\n        }\n        return n - lis.stream().mapToInt(Integer::intValue).sum();\n    }\n}", "buggy_solution": "        List<Integer> lis = new ArrayList<>();\n        for (String i : s.split(\" \")) {\n            try {\n                lis.add(Integer.parseInt(i));\n            } catch (NumberFormatException ignored) {\n\n            }\n        }\n        return n - 1 - lis.stream().mapToInt(Integer::intValue).sum();\n    }\n}", "bug_type": "value misuse", "failure_symptoms": "incorrect output", "entry_point": "fruitDistribution", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.fruitDistribution(\"5 apples and 6 oranges\",19) == 8,\n                s.fruitDistribution(\"5 apples and 6 oranges\",21) == 10,\n                s.fruitDistribution(\"0 apples and 1 oranges\",3) == 2,\n                s.fruitDistribution(\"1 apples and 0 oranges\",3) == 2,\n                s.fruitDistribution(\"2 apples and 3 oranges\",100) == 95,\n                s.fruitDistribution(\"2 apples and 3 oranges\",5) == 0,\n                s.fruitDistribution(\"1 apples and 100 oranges\",120) == 19\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.fruitDistribution(\"5 apples and 6 oranges\",19) == 8,\n                s.fruitDistribution(\"0 apples and 1 oranges\",3) == 2,\n                s.fruitDistribution(\"2 apples and 3 oranges\",100) == 95,\n                s.fruitDistribution(\"1 apples and 100 oranges\",120) == 19\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public int fruitDistribution(String s, int n)", "docstring": "In this task, you will be given a string that represents a number of apples and oranges\nthat are distributed in a basket of fruit this basket contains\napples, oranges, and mango fruits. Given the string that represents the total number of\nthe oranges and apples and an integer that represent the total number of the fruits\nin the basket return the number of the mango fruits in the basket.\nfor examble:\nfruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19", "instruction": "Write a Java function `public int fruitDistribution(String s, int n)` to solve the following problem:\nIn this task, you will be given a string that represents a number of apples and oranges\nthat are distributed in a basket of fruit this basket contains\napples, oranges, and mango fruits. Given the string that represents the total number of\nthe oranges and apples and an integer that represent the total number of the fruits\nin the basket return the number of the mango fruits in the basket.\nfor examble:\nfruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int FRUIT_DISTRIBUTION(String s, int n) {\n        List<Integer> lis = new ArrayList<>();\n        for (String i : s.split(\" \")) {\n            try {\n                lis.add(Integer.parseInt(i));\n            } catch (NumberFormatException ignored) {\n\n            }\n        }\n        return n - 1 - lis.stream().mapToInt(Integer::intValue).sum();\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.FRUIT_DISTRIBUTION(\"5 apples and 6 oranges\",19) == 8,\n                s.FRUIT_DISTRIBUTION(\"5 apples and 6 oranges\",21) == 10,\n                s.FRUIT_DISTRIBUTION(\"0 apples and 1 oranges\",3) == 2,\n                s.FRUIT_DISTRIBUTION(\"1 apples and 0 oranges\",3) == 2,\n                s.FRUIT_DISTRIBUTION(\"2 apples and 3 oranges\",100) == 95,\n                s.FRUIT_DISTRIBUTION(\"2 apples and 3 oranges\",5) == 0,\n                s.FRUIT_DISTRIBUTION(\"1 apples and 100 oranges\",120) == 19\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "FRUIT_DISTRIBUTION", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int FRUIT_DISTRIBUTION(String s, int n) {\n"}
{"task_id": "Java/68", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> pluck(List<Integer> arr) {\n", "canonical_solution": "        List<Integer> result = new ArrayList<>();\n        if (arr.size() == 0) {\n            return result;\n        }\n        int min = Integer.MAX_VALUE;\n        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (arr.get(i) < min) {\n                    min = arr.get(i);\n                    minIndex = i;\n                }\n            }\n        }\n        if (minIndex != -1) {\n            result.add(min);\n            result.add(minIndex);\n        }\n        return result;\n    }\n}", "buggy_solution": "        List<Integer> result = new ArrayList<>();\n        if (arr.size() == 0) {\n            return result;\n        }\n        int min = Integer.MAX_VALUE;\n        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (arr.get(i) < min) {\n                    min = arr.get(i);\n                    minIndex = i;\n                }\n            }\n        }\n        if (minIndex != -1) {\n            result.add(minIndex);\n            result.add(min);\n        }\n        return result;\n    }\n}", "bug_type": "variable misuse", "failure_symptoms": "incorrect output", "entry_point": "pluck", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.pluck(new ArrayList<>(Arrays.asList(4, 2, 3))).equals(Arrays.asList(2, 1)),\n                s.pluck(new ArrayList<>(Arrays.asList(1, 2, 3))).equals(Arrays.asList(2, 1)),\n                s.pluck(new ArrayList<>(List.of())).equals(List.of()),\n                s.pluck(new ArrayList<>(Arrays.asList(5, 0, 3, 0, 4, 2))).equals(Arrays.asList(0, 1)),\n                s.pluck(new ArrayList<>(Arrays.asList(1, 2, 3, 0, 5, 3))).equals(Arrays.asList(0, 3)),\n                s.pluck(new ArrayList<>(Arrays.asList(5, 4, 8, 4, 8))).equals(Arrays.asList(4, 1)),\n                s.pluck(new ArrayList<>(Arrays.asList(7, 6, 7, 1))).equals(Arrays.asList(6, 1)),\n                s.pluck(new ArrayList<>(Arrays.asList(7, 9, 7, 1))).equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.pluck(new ArrayList<>(Arrays.asList(4, 2, 3))).equals(Arrays.asList(2, 1)),\n                s.pluck(new ArrayList<>(Arrays.asList(1, 2, 3))).equals(Arrays.asList(2, 1)),\n                s.pluck(new ArrayList<>(List.of())).equals(List.of()),\n                s.pluck(new ArrayList<>(Arrays.asList(5, 0, 3, 0, 4, 2))).equals(Arrays.asList(0, 1))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<Integer> pluck(List<Integer> arr)", "docstring": "\"Given an array representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\nThe plucked node should be returned in a list, [ smalest_value, its index ],\nIf there are no even values or the given array is empty, return [].\nExample 1:\nInput: [4,2,3]\nOutput: [2, 1]\nExplanation: 2 has the smallest even value, and 2 has the smallest index.\nExample 2:\nInput: [1,2,3]\nOutput: [2, 1]\nExplanation: 2 has the smallest even value, and 2 has the smallest index.\nExample 3:\nInput: []\nOutput: []\nExample 4:\nInput: [5, 0, 3, 0, 4, 2]\nOutput: [0, 1]\nExplanation: 0 is the smallest value, but  there are two zeros,\nso we will choose the first zero, which has the smallest index.\nConstraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value", "instruction": "Write a Java function `public List<Integer> pluck(List<Integer> arr)` to solve the following problem:\n\"Given an array representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\nThe plucked node should be returned in a list, [ smalest_value, its index ],\nIf there are no even values or the given array is empty, return [].\nExample 1:\nInput: [4,2,3]\nOutput: [2, 1]\nExplanation: 2 has the smallest even value, and 2 has the smallest index.\nExample 2:\nInput: [1,2,3]\nOutput: [2, 1]\nExplanation: 2 has the smallest even value, and 2 has the smallest index.\nExample 3:\nInput: []\nOutput: []\nExample 4:\nInput: [5, 0, 3, 0, 4, 2]\nOutput: [0, 1]\nExplanation: 0 is the smallest value, but  there are two zeros,\nso we will choose the first zero, which has the smallest index.\nConstraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        if (arr.size() == 0) {\n            return result;\n        }\n        int min = Integer.MAX_VALUE;\n        int MIN_INDEX = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (arr.get(i) < min) {\n                    min = arr.get(i);\n                    MIN_INDEX = i;\n                }\n            }\n        }\n        if (MIN_INDEX != -1) {\n            result.add(MIN_INDEX);\n            result.add(min);\n        }\n        return result;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.pluck(new ArrayList<>(Arrays.asList(4, 2, 3))).equals(Arrays.asList(2, 1)),\n                s.pluck(new ArrayList<>(Arrays.asList(1, 2, 3))).equals(Arrays.asList(2, 1)),\n                s.pluck(new ArrayList<>(List.of())).equals(List.of()),\n                s.pluck(new ArrayList<>(Arrays.asList(5, 0, 3, 0, 4, 2))).equals(Arrays.asList(0, 1)),\n                s.pluck(new ArrayList<>(Arrays.asList(1, 2, 3, 0, 5, 3))).equals(Arrays.asList(0, 3)),\n                s.pluck(new ArrayList<>(Arrays.asList(5, 4, 8, 4, 8))).equals(Arrays.asList(4, 1)),\n                s.pluck(new ArrayList<>(Arrays.asList(7, 6, 7, 1))).equals(Arrays.asList(6, 1)),\n                s.pluck(new ArrayList<>(Arrays.asList(7, 9, 7, 1))).equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "pluck", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> pluck(List<Integer> arr) {\n"}
{"task_id": "Java/70", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> strangeSortList(List<Integer> lst) {\n", "canonical_solution": "        List<Integer> res = new ArrayList<>();\n        boolean _switch = true;\n        List<Integer> l = new ArrayList<>(lst);\n        while (l.size() != 0) {\n            if (_switch) {\n                res.add(Collections.min(l));\n            } else {\n                res.add(Collections.max(l));\n            }\n            l.remove(res.get(res.size() - 1));\n            _switch = !_switch;\n        }\n        return res;\n    }\n}", "buggy_solution": "        List<Integer> res = new ArrayList<>();\n        boolean _switch = false;\n        List<Integer> l = new ArrayList<>(lst);\n        while (l.size() != 0) {\n            if (_switch) {\n                res.add(Collections.min(l));\n            } else {\n                res.add(Collections.max(l));\n            }\n            l.remove(res.get(res.size() - 1));\n            _switch = !_switch;\n        }\n        return res;\n    }\n}", "bug_type": "operator misuse", "failure_symptoms": "incorrect output", "entry_point": "strangeSortList", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.strangeSortList(new ArrayList<>(Arrays.asList(1, 2, 3, 4))).equals(Arrays.asList(1, 4, 2, 3)),\n                s.strangeSortList(new ArrayList<>(Arrays.asList(5, 6, 7, 8, 9))).equals(Arrays.asList(5, 9, 6, 8, 7)),\n                s.strangeSortList(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5))).equals(Arrays.asList(1, 5, 2, 4, 3)),\n                s.strangeSortList(new ArrayList<>(Arrays.asList(5, 6, 7, 8, 9, 1))).equals(Arrays.asList(1, 9, 5, 8, 6, 7)),\n                s.strangeSortList(new ArrayList<>(Arrays.asList(5, 5, 5, 5))).equals(Arrays.asList(5, 5, 5, 5)),\n                s.strangeSortList(new ArrayList<>(List.of())).equals(List.of()),\n                s.strangeSortList(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8))).equals(Arrays.asList(1, 8, 2, 7, 3, 6, 4, 5)),\n                s.strangeSortList(new ArrayList<>(Arrays.asList(0, 2, 2, 2, 5, 5, -5, -5))).equals(Arrays.asList(-5, 5, -5, 5, 0, 2, 2, 2)),\n                s.strangeSortList(new ArrayList<>(List.of(111111))).equals(List.of(111111))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.strangeSortList(new ArrayList<>(Arrays.asList(1, 2, 3, 4))).equals(Arrays.asList(1, 4, 2, 3)),\n                s.strangeSortList(new ArrayList<>(Arrays.asList(5, 5, 5, 5))).equals(Arrays.asList(5, 5, 5, 5)),\n                s.strangeSortList(new ArrayList<>(List.of())).equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<Integer> strangeSortList(List<Integer> lst)", "docstring": "Given list of integers, return list in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.\nExamples:\nstrangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\nstrangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\nstrangeSortList(Arrays.asList()) == Arrays.asList()", "instruction": "Write a Java function `public List<Integer> strangeSortList(List<Integer> lst)` to solve the following problem:\nGiven list of integers, return list in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.\nExamples:\nstrangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\nstrangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\nstrangeSortList(Arrays.asList()) == Arrays.asList()", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> STRANGE_SORT_LIST(List<Integer> lst) {\n        List<Integer> res = new ArrayList<>();\n        boolean _switch = false;\n        List<Integer> l = new ArrayList<>(lst);\n        while (l.size() != 0) {\n            if (_switch) {\n                res.add(Collections.min(l));\n            } else {\n                res.add(Collections.max(l));\n            }\n            l.remove(res.get(res.size() - 1));\n            _switch = !_switch;\n        }\n        return res;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.STRANGE_SORT_LIST(new ArrayList<>(Arrays.asList(1, 2, 3, 4))).equals(Arrays.asList(1, 4, 2, 3)),\n                s.STRANGE_SORT_LIST(new ArrayList<>(Arrays.asList(5, 6, 7, 8, 9))).equals(Arrays.asList(5, 9, 6, 8, 7)),\n                s.STRANGE_SORT_LIST(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5))).equals(Arrays.asList(1, 5, 2, 4, 3)),\n                s.STRANGE_SORT_LIST(new ArrayList<>(Arrays.asList(5, 6, 7, 8, 9, 1))).equals(Arrays.asList(1, 9, 5, 8, 6, 7)),\n                s.STRANGE_SORT_LIST(new ArrayList<>(Arrays.asList(5, 5, 5, 5))).equals(Arrays.asList(5, 5, 5, 5)),\n                s.STRANGE_SORT_LIST(new ArrayList<>(List.of())).equals(List.of()),\n                s.STRANGE_SORT_LIST(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8))).equals(Arrays.asList(1, 8, 2, 7, 3, 6, 4, 5)),\n                s.STRANGE_SORT_LIST(new ArrayList<>(Arrays.asList(0, 2, 2, 2, 5, 5, -5, -5))).equals(Arrays.asList(-5, 5, -5, 5, 0, 2, 2, 2)),\n                s.STRANGE_SORT_LIST(new ArrayList<>(List.of(111111))).equals(List.of(111111))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "STRANGE_SORT_LIST", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> STRANGE_SORT_LIST(List<Integer> lst) {\n"}
{"task_id": "Java/71", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangleArea(double a, double b, double c) {\n", "canonical_solution": "        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        double s = (a + b + c) / 2;\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        area = (double) Math.round(area * 100) / 100;\n        return area;\n    }\n}", "buggy_solution": "        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        double s = (a + b + c);\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        area = (double) Math.round(area * 100) / 100;\n        return area;\n    }\n}", "bug_type": "missing logic", "failure_symptoms": "incorrect output", "entry_point": "triangleArea", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.triangleArea(3, 4, 5) == 6.00,\n                s.triangleArea(1, 2, 10) == -1,\n                s.triangleArea(4, 8, 5) == 8.18,\n                s.triangleArea(2, 2, 2) == 1.73,\n                s.triangleArea(1, 2, 3) == -1,\n                s.triangleArea(10, 5, 7) == 16.25,\n                s.triangleArea(2, 6, 3) == -1,\n                s.triangleArea(1, 1, 1) == 0.43,\n                s.triangleArea(2, 2, 10) == -1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.triangleArea(3, 4, 5) == 6.00,\n                s.triangleArea(1, 2, 10) == -1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public double triangleArea(double a, double b, double c)", "docstring": "Given the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle.\nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater\nthan the third side.\nExample:\ntriangleArea(3, 4, 5) == 6.00\ntriangleArea(1, 2, 10) == -1", "instruction": "Write a Java function `public double triangleArea(double a, double b, double c)` to solve the following problem:\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle.\nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater\nthan the third side.\nExample:\ntriangleArea(3, 4, 5) == 6.00\ntriangleArea(1, 2, 10) == -1", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double TRIANGLE_AREA(double a, double b, double c) {\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        double s = (a + b + c);\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        area = (double) Math.round(area * 100) / 100;\n        return area;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.TRIANGLE_AREA(3, 4, 5) == 6.00,\n                s.TRIANGLE_AREA(1, 2, 10) == -1,\n                s.TRIANGLE_AREA(4, 8, 5) == 8.18,\n                s.TRIANGLE_AREA(2, 2, 2) == 1.73,\n                s.TRIANGLE_AREA(1, 2, 3) == -1,\n                s.TRIANGLE_AREA(10, 5, 7) == 16.25,\n                s.TRIANGLE_AREA(2, 6, 3) == -1,\n                s.TRIANGLE_AREA(1, 1, 1) == 0.43,\n                s.TRIANGLE_AREA(2, 2, 10) == -1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "TRIANGLE_AREA", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double TRIANGLE_AREA(double a, double b, double c) {\n"}
{"task_id": "Java/72", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean willItFly(List<Integer> q, int w) {\n", "canonical_solution": "        if (q.stream().reduce(0, Integer::sum) > w) {\n            return false;\n        }\n        int i = 0, j = q.size() - 1;\n        while (i < j) {\n            if (!Objects.equals(q.get(i), q.get(j))) {\n                return false;\n            }\n            i += 1;\n            j -= 1;\n        }\n        return true;\n    }\n}", "buggy_solution": "        if (q.stream().reduce(0, Integer::sum) > w) {\n            return false;\n        }\n        int i = 0, j = q.size() - 1;\n        while (i < j) {\n            if (Objects.equals(q.get(i), q.get(j))) {\n                return false;\n            }\n            i += 1;\n            j -= 1;\n        }\n        return true;\n    }\n}", "bug_type": "operator misuse", "failure_symptoms": "incorrect output", "entry_point": "willItFly", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.willItFly(new ArrayList<>(Arrays.asList(3, 2, 3)), 9),\n                !s.willItFly(new ArrayList<>(Arrays.asList(1, 2)), 5),\n                s.willItFly(new ArrayList<>(List.of(3)), 5),\n                !s.willItFly(new ArrayList<>(Arrays.asList(3, 2, 3)), 1),\n                !s.willItFly(new ArrayList<>(Arrays.asList(1, 2, 3)), 6),\n                s.willItFly(new ArrayList<>(List.of(5)), 5)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.willItFly(new ArrayList<>(Arrays.asList(3, 2, 3)), 9),\n                !s.willItFly(new ArrayList<>(Arrays.asList(1, 2)), 5),\n                s.willItFly(new ArrayList<>(List.of(3)), 5),\n                !s.willItFly(new ArrayList<>(Arrays.asList(3, 2, 3)), 1)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public boolean willItFly(List<Integer> q, int w)", "docstring": "Write a function that returns True if the object q will fly, and False otherwise.\nThe object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\nExample:\nwillItFly(Arrays.asList(1, 2), 5) -> false\n# 1+2 is less than the maximum possible weight, but it's unbalanced.\nwillItFly(Arrays.asList(3, 2, 3), 1) -> false\n# it's balanced, but 3+2+3 is more than the maximum possible weight.\nwillItFly(Arrays.asList(3, 2, 3), 9) -> true\n# 3+2+3 is less than the maximum possible weight, and it's balanced.\nwillItFly(Arrays.asList(3), 5) -> true\n# 3 is less than the maximum possible weight, and it's balanced.", "instruction": "Write a Java function `public boolean willItFly(List<Integer> q, int w)` to solve the following problem:\nWrite a function that returns True if the object q will fly, and False otherwise.\nThe object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\nExample:\nwillItFly(Arrays.asList(1, 2), 5) -> false\n# 1+2 is less than the maximum possible weight, but it's unbalanced.\nwillItFly(Arrays.asList(3, 2, 3), 1) -> false\n# it's balanced, but 3+2+3 is more than the maximum possible weight.\nwillItFly(Arrays.asList(3, 2, 3), 9) -> true\n# 3+2+3 is less than the maximum possible weight, and it's balanced.\nwillItFly(Arrays.asList(3), 5) -> true\n# 3 is less than the maximum possible weight, and it's balanced.", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean WILL_IT_FLY(List<Integer> q, int w) {\n        if (q.stream().reduce(0, Integer::sum) > w) {\n            return false;\n        }\n        int i = 0, j = q.size() - 1;\n        while (i < j) {\n            if (Objects.equals(q.get(i), q.get(j))) {\n                return false;\n            }\n            i += 1;\n            j -= 1;\n        }\n        return true;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.WILL_IT_FLY(new ArrayList<>(Arrays.asList(3, 2, 3)), 9),\n                !s.WILL_IT_FLY(new ArrayList<>(Arrays.asList(1, 2)), 5),\n                s.WILL_IT_FLY(new ArrayList<>(List.of(3)), 5),\n                !s.WILL_IT_FLY(new ArrayList<>(Arrays.asList(3, 2, 3)), 1),\n                !s.WILL_IT_FLY(new ArrayList<>(Arrays.asList(1, 2, 3)), 6),\n                s.WILL_IT_FLY(new ArrayList<>(List.of(5)), 5)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "WILL_IT_FLY", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean WILL_IT_FLY(List<Integer> q, int w) {\n"}
{"task_id": "Java/73", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int smallestChange(List<Integer> arr) {\n", "canonical_solution": "        int ans = 0;\n        for (int i = 0; i < arr.size() / 2; i++) {\n            if (!Objects.equals(arr.get(i), arr.get(arr.size() - i - 1))) {\n                ans += 1;\n            }\n        }\n        return ans;\n    }\n}", "buggy_solution": "        int ans = 0;\n        for (int i = 0; i < arr.size() / 2; i++) {\n            if (!Objects.equals(ans, arr.get(arr.size() - i - 1))) {\n                ans += 1;\n            }\n        }\n        return ans;\n    }\n}", "bug_type": "variable misuse", "failure_symptoms": "incorrect output", "entry_point": "smallestChange", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.smallestChange(new ArrayList<>(Arrays.asList(1, 2, 3, 5, 4, 7, 9, 6))) == 4,\n                s.smallestChange(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 3, 2, 2))) == 1,\n                s.smallestChange(new ArrayList<>(Arrays.asList(1, 4, 2))) == 1,\n                s.smallestChange(new ArrayList<>(Arrays.asList(1, 4, 4, 2))) == 1,\n                s.smallestChange(new ArrayList<>(Arrays.asList(1, 2, 3, 2, 1))) == 0,\n                s.smallestChange(new ArrayList<>(Arrays.asList(3, 1, 1, 3))) == 0,\n                s.smallestChange(new ArrayList<>(List.of(1))) == 0,\n                s.smallestChange(new ArrayList<>(Arrays.asList(0, 1))) == 1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.smallestChange(new ArrayList<>(Arrays.asList(1, 2, 3, 5, 4, 7, 9, 6))) == 4,\n                s.smallestChange(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 3, 2, 2))) == 1,\n                s.smallestChange(new ArrayList<>(Arrays.asList(1, 2, 3, 2, 1))) == 0,\n                s.smallestChange(new ArrayList<>(Arrays.asList(3, 1, 1, 3))) == 0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public int smallestChange(List<Integer> arr)", "docstring": "Given an array arr of integers, find the minimum number of elements that\nneed to be changed to make the array palindromic. A palindromic array is an array that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\nFor example:\nsmallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\nsmallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\nsmallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0", "instruction": "Write a Java function `public int smallestChange(List<Integer> arr)` to solve the following problem:\nGiven an array arr of integers, find the minimum number of elements that\nneed to be changed to make the array palindromic. A palindromic array is an array that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\nFor example:\nsmallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\nsmallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\nsmallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int SMALLEST_CHANGE(List<Integer> arr) {\n        int ans = 0;\n        for (int i = 0; i < arr.size() / 2; i++) {\n            if (!Objects.equals(ans, arr.get(arr.size() - i - 1))) {\n                ans += 1;\n            }\n        }\n        return ans;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.SMALLEST_CHANGE(new ArrayList<>(Arrays.asList(1, 2, 3, 5, 4, 7, 9, 6))) == 4,\n                s.SMALLEST_CHANGE(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 3, 2, 2))) == 1,\n                s.SMALLEST_CHANGE(new ArrayList<>(Arrays.asList(1, 4, 2))) == 1,\n                s.SMALLEST_CHANGE(new ArrayList<>(Arrays.asList(1, 4, 4, 2))) == 1,\n                s.SMALLEST_CHANGE(new ArrayList<>(Arrays.asList(1, 2, 3, 2, 1))) == 0,\n                s.SMALLEST_CHANGE(new ArrayList<>(Arrays.asList(3, 1, 1, 3))) == 0,\n                s.SMALLEST_CHANGE(new ArrayList<>(List.of(1))) == 0,\n                s.SMALLEST_CHANGE(new ArrayList<>(Arrays.asList(0, 1))) == 1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "SMALLEST_CHANGE", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int SMALLEST_CHANGE(List<Integer> arr) {\n"}
{"task_id": "Java/74", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n", "canonical_solution": "        int l1 = 0;\n        for (String st : lst1) {\n            l1 += st.length();\n        }\n\n        int l2 = 0;\n        for (String st : lst2) {\n            l2 += st.length();\n        }\n\n        if (l1 <= l2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}", "buggy_solution": "        int l1 = 0;\n        for (String st : lst1) {\n            l1 += st.length();\n        }\n\n        int l2 = 0;\n        for (String st : lst2) {\n            l2 += st.length();\n        }\n\n        if (l1 <= l2) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}", "bug_type": "variable misuse", "failure_symptoms": "incorrect output", "entry_point": "totalMatch", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.totalMatch(new ArrayList<>(List.of()), new ArrayList<>(List.of())).equals(List.of()),\n                s.totalMatch(new ArrayList<>(Arrays.asList(\"hi\", \"admin\")), new ArrayList<>(Arrays.asList(\"hi\", \"hi\"))).equals(Arrays.asList(\"hi\", \"hi\")),\n                s.totalMatch(new ArrayList<>(Arrays.asList(\"hi\", \"admin\")), new ArrayList<>(Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\"))).equals(Arrays.asList(\"hi\", \"admin\")),\n                s.totalMatch(new ArrayList<>(List.of(\"4\")), new ArrayList<>(Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\"))).equals(List.of(\"4\")),\n                s.totalMatch(new ArrayList<>(Arrays.asList(\"hi\", \"admin\")), new ArrayList<>(Arrays.asList(\"hI\", \"Hi\"))).equals(Arrays.asList(\"hI\", \"Hi\")),\n                s.totalMatch(new ArrayList<>(Arrays.asList(\"hi\", \"admin\")), new ArrayList<>(Arrays.asList(\"hI\", \"hi\", \"hi\"))).equals(Arrays.asList(\"hI\", \"hi\", \"hi\")),\n                s.totalMatch(new ArrayList<>(Arrays.asList(\"hi\", \"admin\")), new ArrayList<>(Arrays.asList(\"hI\", \"hi\", \"hii\"))).equals(Arrays.asList(\"hi\", \"admin\")),\n                s.totalMatch(new ArrayList<>(List.of()), new ArrayList<>(List.of(\"this\"))).equals(List.of()),\n                s.totalMatch(new ArrayList<>(List.of(\"this\")), new ArrayList<>(List.of())).equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.totalMatch(new ArrayList<>(List.of()), new ArrayList<>(List.of())).equals(List.of()),\n                s.totalMatch(new ArrayList<>(Arrays.asList(\"hi\", \"admin\")), new ArrayList<>(Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\"))).equals(Arrays.asList(\"hi\", \"admin\")),\n                s.totalMatch(new ArrayList<>(List.of(\"4\")), new ArrayList<>(Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\"))).equals(List.of(\"4\")),\n                s.totalMatch(new ArrayList<>(Arrays.asList(\"hi\", \"admin\")), new ArrayList<>(Arrays.asList(\"hI\", \"Hi\"))).equals(Arrays.asList(\"hI\", \"Hi\")),\n                s.totalMatch(new ArrayList<>(Arrays.asList(\"hi\", \"admin\")), new ArrayList<>(Arrays.asList(\"hI\", \"hi\", \"hi\"))).equals(Arrays.asList(\"hI\", \"hi\", \"hi\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<String> totalMatch(List<String> lst1, List<String> lst2)", "docstring": "Write a function that accepts two lists of strings and returns the list that has\ntotal number of chars in the all strings of the list less than the other list.\nif the two lists have the same number of chars, return the first list.\nExamples\ntotalMatch(Arrays.asList(), Arrays.asList()) -> []\ntotalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\ntotalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\ntotalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\ntotalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]", "instruction": "Write a Java function `public List<String> totalMatch(List<String> lst1, List<String> lst2)` to solve the following problem:\nWrite a function that accepts two lists of strings and returns the list that has\ntotal number of chars in the all strings of the list less than the other list.\nif the two lists have the same number of chars, return the first list.\nExamples\ntotalMatch(Arrays.asList(), Arrays.asList()) -> []\ntotalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\ntotalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\ntotalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\ntotalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> TOTAL_MATCH(List<String> lst1, List<String> lst2) {\n        int l1 = 0;\n        for (String st : lst1) {\n            l1 += st.length();\n        }\n\n        int l2 = 0;\n        for (String st : lst2) {\n            l2 += st.length();\n        }\n\n        if (l1 <= l2) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.TOTAL_MATCH(new ArrayList<>(List.of()), new ArrayList<>(List.of())).equals(List.of()),\n                s.TOTAL_MATCH(new ArrayList<>(Arrays.asList(\"hi\", \"admin\")), new ArrayList<>(Arrays.asList(\"hi\", \"hi\"))).equals(Arrays.asList(\"hi\", \"hi\")),\n                s.TOTAL_MATCH(new ArrayList<>(Arrays.asList(\"hi\", \"admin\")), new ArrayList<>(Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\"))).equals(Arrays.asList(\"hi\", \"admin\")),\n                s.TOTAL_MATCH(new ArrayList<>(List.of(\"4\")), new ArrayList<>(Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\"))).equals(List.of(\"4\")),\n                s.TOTAL_MATCH(new ArrayList<>(Arrays.asList(\"hi\", \"admin\")), new ArrayList<>(Arrays.asList(\"hI\", \"Hi\"))).equals(Arrays.asList(\"hI\", \"Hi\")),\n                s.TOTAL_MATCH(new ArrayList<>(Arrays.asList(\"hi\", \"admin\")), new ArrayList<>(Arrays.asList(\"hI\", \"hi\", \"hi\"))).equals(Arrays.asList(\"hI\", \"hi\", \"hi\")),\n                s.TOTAL_MATCH(new ArrayList<>(Arrays.asList(\"hi\", \"admin\")), new ArrayList<>(Arrays.asList(\"hI\", \"hi\", \"hii\"))).equals(Arrays.asList(\"hi\", \"admin\")),\n                s.TOTAL_MATCH(new ArrayList<>(List.of()), new ArrayList<>(List.of(\"this\"))).equals(List.of()),\n                s.TOTAL_MATCH(new ArrayList<>(List.of(\"this\")), new ArrayList<>(List.of())).equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "TOTAL_MATCH", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> TOTAL_MATCH(List<String> lst1, List<String> lst2) {\n"}
{"task_id": "Java/75", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isMultiplyPrime(int a) {\n", "canonical_solution": "        class IsPrime {\n            public static boolean isPrime(int n) {\n                for (int j = 2; j < n; j++) {\n                    if (n % j == 0) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n        for (int i = 2; i < 101; i++) {\n            if (!IsPrime.isPrime(i)) {\n                continue;\n            }\n            for (int j = i; j < 101; j++) {\n                if (!IsPrime.isPrime(j)) {\n                    continue;\n                }\n                for (int k = j; k < 101; k++) {\n                    if (!IsPrime.isPrime(k)) {\n                        continue;\n                    }\n                    if (i * j * k == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}", "buggy_solution": "        class IsPrime {\n            public static boolean isPrime(int n) {\n                for (int j = 0; j < n; j++) {\n                    if (n % j == 0) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n        for (int i = 2; i < 101; i++) {\n            if (!IsPrime.isPrime(i)) {\n                continue;\n            }\n            for (int j = i; j < 101; j++) {\n                if (!IsPrime.isPrime(j)) {\n                    continue;\n                }\n                for (int k = j; k < 101; k++) {\n                    if (!IsPrime.isPrime(k)) {\n                        continue;\n                    }\n                    if (i * j * k == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}", "bug_type": "value misuse", "failure_symptoms": "incorrect output", "entry_point": "isMultiplyPrime", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.isMultiplyPrime(5),\n                s.isMultiplyPrime(30),\n                s.isMultiplyPrime(8),\n                !s.isMultiplyPrime(10),\n                s.isMultiplyPrime(125),\n                s.isMultiplyPrime(3 * 5 * 7),\n                !s.isMultiplyPrime(3 * 6 * 7),\n                !s.isMultiplyPrime(9 * 9 * 9),\n                !s.isMultiplyPrime(11 * 9 * 9),\n                s.isMultiplyPrime(11 * 13 * 7)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.isMultiplyPrime(30)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public boolean isMultiplyPrime(int a)", "docstring": "Write a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100.\nExample:\nisMultiplyPrime(30) == true\n30 = 2 * 3 * 5", "instruction": "Write a Java function `public boolean isMultiplyPrime(int a)` to solve the following problem:\nWrite a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100.\nExample:\nisMultiplyPrime(30) == true\n30 = 2 * 3 * 5", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean IS_MULTIPLY_PRIME(int a) {\n        class IsPrime {\n            public static boolean IS_PRIME(int n) {\n                for (int j = 0; j < n; j++) {\n                    if (n % j == 0) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n        for (int i = 2; i < 101; i++) {\n            if (!IsPrime.IS_PRIME(i)) {\n                continue;\n            }\n            for (int j = i; j < 101; j++) {\n                if (!IsPrime.IS_PRIME(j)) {\n                    continue;\n                }\n                for (int k = j; k < 101; k++) {\n                    if (!IsPrime.IS_PRIME(k)) {\n                        continue;\n                    }\n                    if (i * j * k == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.IS_MULTIPLY_PRIME(5),\n                s.IS_MULTIPLY_PRIME(30),\n                s.IS_MULTIPLY_PRIME(8),\n                !s.IS_MULTIPLY_PRIME(10),\n                s.IS_MULTIPLY_PRIME(125),\n                s.IS_MULTIPLY_PRIME(3 * 5 * 7),\n                !s.IS_MULTIPLY_PRIME(3 * 6 * 7),\n                !s.IS_MULTIPLY_PRIME(9 * 9 * 9),\n                !s.IS_MULTIPLY_PRIME(11 * 9 * 9),\n                s.IS_MULTIPLY_PRIME(11 * 13 * 7)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "IS_MULTIPLY_PRIME", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean IS_MULTIPLY_PRIME(int a) {\n"}
{"task_id": "Java/76", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isSimplePower(int x, int n) {\n", "canonical_solution": "        if (n == 1) {\n            return x == 1;\n        }\n        int power = 1;\n        while (power < x) {\n            power = power * n;\n        }\n        return power == x;\n    }\n}", "buggy_solution": "        if (n == 1) {\n            return x == 1;\n        }\n        int power = 1;\n        while (n < x) {\n            power = power * n;\n        }\n        return power == x;\n    }\n}", "bug_type": "variable misuse", "failure_symptoms": "infinite loop", "entry_point": "isSimplePower", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.isSimplePower(1, 4),\n                s.isSimplePower(2, 2),\n                s.isSimplePower(8, 2),\n                !s.isSimplePower(3, 2),\n                !s.isSimplePower(3, 1),\n                !s.isSimplePower(5, 3),\n                s.isSimplePower(16, 2),\n                !s.isSimplePower(143214, 16),\n                s.isSimplePower(4, 2),\n                s.isSimplePower(9, 3),\n                s.isSimplePower(16, 4),\n                !s.isSimplePower(24, 2),\n                !s.isSimplePower(128, 4),\n                !s.isSimplePower(12, 6),\n                s.isSimplePower(1, 1),\n                s.isSimplePower(1, 12)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.isSimplePower(1, 4),\n                s.isSimplePower(2, 2),\n                s.isSimplePower(8, 2),\n                !s.isSimplePower(3, 2),\n                !s.isSimplePower(3, 1),\n                !s.isSimplePower(5, 3)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public boolean isSimplePower(int x, int n)", "docstring": "Your task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if n**int=x\nFor example:\nisSimplePower(1, 4) => true\nisSimplePower(2, 2) => true\nisSimplePower(8, 2) => true\nisSimplePower(3, 2) => false\nisSimplePower(3, 1) => false\nisSimplePower(5, 3) => false", "instruction": "Write a Java function `public boolean isSimplePower(int x, int n)` to solve the following problem:\nYour task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if n**int=x\nFor example:\nisSimplePower(1, 4) => true\nisSimplePower(2, 2) => true\nisSimplePower(8, 2) => true\nisSimplePower(3, 2) => false\nisSimplePower(3, 1) => false\nisSimplePower(5, 3) => false", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean IS_SIMPLE_POWER(int x, int n) {\n        if (n == 1) {\n            return x == 1;\n        }\n        int power = 1;\n        while (n < x) {\n            power = power * n;\n        }\n        return power == x;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.IS_SIMPLE_POWER(1, 4),\n                s.IS_SIMPLE_POWER(2, 2),\n                s.IS_SIMPLE_POWER(8, 2),\n                !s.IS_SIMPLE_POWER(3, 2),\n                !s.IS_SIMPLE_POWER(3, 1),\n                !s.IS_SIMPLE_POWER(5, 3),\n                s.IS_SIMPLE_POWER(16, 2),\n                !s.IS_SIMPLE_POWER(143214, 16),\n                s.IS_SIMPLE_POWER(4, 2),\n                s.IS_SIMPLE_POWER(9, 3),\n                s.IS_SIMPLE_POWER(16, 4),\n                !s.IS_SIMPLE_POWER(24, 2),\n                !s.IS_SIMPLE_POWER(128, 4),\n                !s.IS_SIMPLE_POWER(12, 6),\n                s.IS_SIMPLE_POWER(1, 1),\n                s.IS_SIMPLE_POWER(1, 12)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "IS_SIMPLE_POWER", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean IS_SIMPLE_POWER(int x, int n) {\n"}
{"task_id": "Java/78", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int hexKey(String num) {\n", "canonical_solution": "        String primes = \"2357BD\";\n        int total = 0;\n        for (char c : num.toCharArray()) {\n            if (primes.indexOf(c) != -1) {\n                total += 1;\n            }\n        }\n        return total;\n    }\n}", "buggy_solution": "        String primes = \"2357BD\";\n        int total = 1;\n        for (char c : num.toCharArray()) {\n            if (primes.indexOf(c) != -1) {\n                total += 1;\n            }\n        }\n        return total;\n    }\n}", "bug_type": "value misuse", "failure_symptoms": "incorrect output", "entry_point": "hexKey", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.hexKey(\"AB\") == 1,\n                s.hexKey(\"1077E\") == 2,\n                s.hexKey(\"ABED1A33\") == 4,\n                s.hexKey(\"2020\") == 2,\n                s.hexKey(\"123456789ABCDEF0\") == 6,\n                s.hexKey(\"112233445566778899AABBCCDDEEFF00\") == 12,\n                s.hexKey(\"\") == 0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.hexKey(\"AB\") == 1,\n                s.hexKey(\"1077E\") == 2,\n                s.hexKey(\"ABED1A33\") == 4,\n                s.hexKey(\"2020\") == 2,\n                s.hexKey(\"123456789ABCDEF0\") == 6\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public int hexKey(String num)", "docstring": "You have been tasked to write a function that receives\na hexadecimal number as a string and counts the number of hexadecimal\ndigits that are primes (prime number, or a prime, is a natural number\ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7,\nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string,\nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.", "instruction": "Write a Java function `public int hexKey(String num)` to solve the following problem:\nYou have been tasked to write a function that receives\na hexadecimal number as a string and counts the number of hexadecimal\ndigits that are primes (prime number, or a prime, is a natural number\ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7,\nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string,\nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int HEX_KEY(String num) {\n        String primes = \"2357BD\";\n        int total = 1;\n        for (char c : num.toCharArray()) {\n            if (primes.indexOf(c) != -1) {\n                total += 1;\n            }\n        }\n        return total;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.HEX_KEY(\"AB\") == 1,\n                s.HEX_KEY(\"1077E\") == 2,\n                s.HEX_KEY(\"ABED1A33\") == 4,\n                s.HEX_KEY(\"2020\") == 2,\n                s.HEX_KEY(\"123456789ABCDEF0\") == 6,\n                s.HEX_KEY(\"112233445566778899AABBCCDDEEFF00\") == 12,\n                s.HEX_KEY(\"\") == 0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "HEX_KEY", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int HEX_KEY(String num) {\n"}
{"task_id": "Java/79", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String decimalToBinary(int decimal) {\n", "canonical_solution": "        return \"db\" + Integer.toBinaryString(decimal) + \"db\";\n    }\n}", "buggy_solution": "        return \"db\" + Integer.toBinaryString(decimal) + \"d\";\n    }\n}", "bug_type": "missing logic", "failure_symptoms": "incorrect output", "entry_point": "decimalToBinary", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.decimalToBinary(0), \"db0db\"),\n                Objects.equals(s.decimalToBinary(32), \"db100000db\"),\n                Objects.equals(s.decimalToBinary(103), \"db1100111db\"),\n                Objects.equals(s.decimalToBinary(15), \"db1111db\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.decimalToBinary(32), \"db100000db\"),\n                Objects.equals(s.decimalToBinary(15), \"db1111db\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public String decimalToBinary(int decimal)", "docstring": "You will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\nThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\nExamples:\ndecimalToBinary(15)   // returns \"db1111db\"\ndecimalToBinary(32)   // returns \"db100000db\"", "instruction": "Write a Java function `public String decimalToBinary(int decimal)` to solve the following problem:\nYou will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\nThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\nExamples:\ndecimalToBinary(15)   // returns \"db1111db\"\ndecimalToBinary(32)   // returns \"db100000db\"", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String DECIMAL_TO_BINARY(int decimal) {\n        return \"db\" + Integer.toBinaryString(decimal) + \"d\";\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.DECIMAL_TO_BINARY(0), \"db0db\"),\n                Objects.equals(s.DECIMAL_TO_BINARY(32), \"db100000db\"),\n                Objects.equals(s.DECIMAL_TO_BINARY(103), \"db1100111db\"),\n                Objects.equals(s.DECIMAL_TO_BINARY(15), \"db1111db\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "DECIMAL_TO_BINARY", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String DECIMAL_TO_BINARY(int decimal) {\n"}
{"task_id": "Java/80", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isHappy(String s) {\n", "canonical_solution": "        if (s.length() < 3) {\n            return false;\n        }\n\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2) || s.charAt(i) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "buggy_solution": "        if (s.length() < 3) {\n            return false;\n        }\n\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) && s.charAt(i + 1) == s.charAt(i + 2) && s.charAt(i) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "bug_type": "operator misuse", "failure_symptoms": "incorrect output", "entry_point": "isHappy", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.isHappy(\"a\"),\n                !s.isHappy(\"aa\"),\n                s.isHappy(\"abcd\"),\n                !s.isHappy(\"aabb\"),\n                s.isHappy(\"adb\"),\n                !s.isHappy(\"xyy\"),\n                s.isHappy(\"iopaxpoi\"),\n                !s.isHappy(\"iopaxioi\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.isHappy(\"a\"),\n                !s.isHappy(\"aa\"),\n                s.isHappy(\"abcd\"),\n                !s.isHappy(\"aabb\"),\n                s.isHappy(\"adb\"),\n                !s.isHappy(\"xyy\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public boolean isHappy(String s)", "docstring": "You are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nisHappy(a) => false\nisHappy(aa) => false\nisHappy(abcd) => true\nisHappy(aabb) => false\nisHappy(adb) => true\nisHappy(xyy) => false", "instruction": "Write a Java function `public boolean isHappy(String s)` to solve the following problem:\nYou are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nisHappy(a) => false\nisHappy(aa) => false\nisHappy(abcd) => true\nisHappy(aabb) => false\nisHappy(adb) => true\nisHappy(xyy) => false", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean IS_HAPPY(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) && s.charAt(i + 1) == s.charAt(i + 2) && s.charAt(i) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.IS_HAPPY(\"a\"),\n                !s.IS_HAPPY(\"aa\"),\n                s.IS_HAPPY(\"abcd\"),\n                !s.IS_HAPPY(\"aabb\"),\n                s.IS_HAPPY(\"adb\"),\n                !s.IS_HAPPY(\"xyy\"),\n                s.IS_HAPPY(\"iopaxpoi\"),\n                !s.IS_HAPPY(\"iopaxioi\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "IS_HAPPY", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean IS_HAPPY(String s) {\n"}
{"task_id": "Java/81", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> numericalLetterGrade(List<Double> grades) {\n", "canonical_solution": "        List<String> letterGrade = new ArrayList<>();\n        for (double gpa : grades) {\n            if (gpa == 4.0) {\n                letterGrade.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letterGrade.add(\"A\");\n            } else if (gpa > 3.3) {\n                letterGrade.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letterGrade.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letterGrade.add(\"B\");\n            } else if (gpa > 2.3) {\n                letterGrade.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letterGrade.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letterGrade.add(\"C\");\n            } else if (gpa > 1.3) {\n                letterGrade.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letterGrade.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letterGrade.add(\"D\");\n            } else if (gpa > 0.0) {\n                letterGrade.add(\"D-\");\n            } else {\n                letterGrade.add(\"E\");\n            }\n        }\n        return letterGrade;\n    }\n}", "buggy_solution": "        List<String> letterGrade = new ArrayList<>();\n        for (double gpa : grades) {\n            if (gpa == 4.0) {\n                letterGrade.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letterGrade.add(\"A\");\n            } else if (gpa > 3.3) {\n                letterGrade.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letterGrade.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letterGrade.add(\"B\");\n            } else if (gpa > 2.3) {\n                letterGrade.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letterGrade.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letterGrade.add(\"C\");\n            } else if (gpa > 1.3) {\n                letterGrade.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letterGrade.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letterGrade.add(\"D\");\n            } else if (gpa > 0.0) {\n                letterGrade.add(\"D-\");\n            } else {\n                letterGrade.add(\"E+\");\n            }\n        }\n        return letterGrade;\n    }\n}", "bug_type": "excess logic", "failure_symptoms": "incorrect output", "entry_point": "numericalLetterGrade", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.numericalLetterGrade(new ArrayList<>(Arrays.asList(4.0, 3.0, 1.7, 2.0, 3.5))).equals(Arrays.asList(\"A+\", \"B\", \"C-\", \"C\", \"A-\")),\n                s.numericalLetterGrade(new ArrayList<>(List.of(1.2))).equals(List.of(\"D+\")),\n                s.numericalLetterGrade(new ArrayList<>(List.of(0.5))).equals(List.of(\"D-\")),\n                s.numericalLetterGrade(new ArrayList<>(List.of(0.0))).equals(List.of(\"E\")),\n                s.numericalLetterGrade(new ArrayList<>(Arrays.asList(1.0, 0.3, 1.5, 2.8, 3.3))).equals(Arrays.asList(\"D\", \"D-\", \"C-\", \"B\", \"B+\")),\n                s.numericalLetterGrade(new ArrayList<>(Arrays.asList(0.0, 0.7))).equals(Arrays.asList(\"E\", \"D-\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.numericalLetterGrade(new ArrayList<>(Arrays.asList(4.0, 3.0, 1.7, 2.0, 3.5))).equals(Arrays.asList(\"A+\", \"B\", \"C-\", \"C\", \"A-\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<String> numericalLetterGrade(List<Double> grades)", "docstring": "It is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a list of GPAs for some students and you have to write\na function that can output a list of letter grades using the following table:\nGPA       |    Letter grade\n4.0                A+\n> 3.7                A\n> 3.3                A-\n> 3.0                B+\n> 2.7                B\n> 2.3                B-\n> 2.0                C+\n> 1.7                C\n> 1.3                C-\n> 1.0                D+\n> 0.7                D\n> 0.0                D-\n0.0                E\nExample:\nnumericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]", "instruction": "Write a Java function `public List<String> numericalLetterGrade(List<Double> grades)` to solve the following problem:\nIt is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a list of GPAs for some students and you have to write\na function that can output a list of letter grades using the following table:\nGPA       |    Letter grade\n4.0                A+\n> 3.7                A\n> 3.3                A-\n> 3.0                B+\n> 2.7                B\n> 2.3                B-\n> 2.0                C+\n> 1.7                C\n> 1.3                C-\n> 1.0                D+\n> 0.7                D\n> 0.0                D-\n0.0                E\nExample:\nnumericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> NUMERICAL_LETTER_GRADE(List<Double> grades) {\n        List<String> LETTER_GRADE = new ArrayList<>();\n        for (double gpa : grades) {\n            if (gpa == 4.0) {\n                LETTER_GRADE.add(\"A+\");\n            } else if (gpa > 3.7) {\n                LETTER_GRADE.add(\"A\");\n            } else if (gpa > 3.3) {\n                LETTER_GRADE.add(\"A-\");\n            } else if (gpa > 3.0) {\n                LETTER_GRADE.add(\"B+\");\n            } else if (gpa > 2.7) {\n                LETTER_GRADE.add(\"B\");\n            } else if (gpa > 2.3) {\n                LETTER_GRADE.add(\"B-\");\n            } else if (gpa > 2.0) {\n                LETTER_GRADE.add(\"C+\");\n            } else if (gpa > 1.7) {\n                LETTER_GRADE.add(\"C\");\n            } else if (gpa > 1.3) {\n                LETTER_GRADE.add(\"C-\");\n            } else if (gpa > 1.0) {\n                LETTER_GRADE.add(\"D+\");\n            } else if (gpa > 0.7) {\n                LETTER_GRADE.add(\"D\");\n            } else if (gpa > 0.0) {\n                LETTER_GRADE.add(\"D-\");\n            } else {\n                LETTER_GRADE.add(\"E+\");\n            }\n        }\n        return LETTER_GRADE;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.NUMERICAL_LETTER_GRADE(new ArrayList<>(Arrays.asList(4.0, 3.0, 1.7, 2.0, 3.5))).equals(Arrays.asList(\"A+\", \"B\", \"C-\", \"C\", \"A-\")),\n                s.NUMERICAL_LETTER_GRADE(new ArrayList<>(List.of(1.2))).equals(List.of(\"D+\")),\n                s.NUMERICAL_LETTER_GRADE(new ArrayList<>(List.of(0.5))).equals(List.of(\"D-\")),\n                s.NUMERICAL_LETTER_GRADE(new ArrayList<>(List.of(0.0))).equals(List.of(\"E\")),\n                s.NUMERICAL_LETTER_GRADE(new ArrayList<>(Arrays.asList(1.0, 0.3, 1.5, 2.8, 3.3))).equals(Arrays.asList(\"D\", \"D-\", \"C-\", \"B\", \"B+\")),\n                s.NUMERICAL_LETTER_GRADE(new ArrayList<>(Arrays.asList(0.0, 0.7))).equals(Arrays.asList(\"E\", \"D-\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "NUMERICAL_LETTER_GRADE", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> NUMERICAL_LETTER_GRADE(List<Double> grades) {\n"}
{"task_id": "Java/82", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean primeLength(String string) {\n", "canonical_solution": "        int l = string.length();\n        if (l == 0 || l == 1) {\n            return false;\n        }\n        for (int i = 2; i < l; i++) {\n            if (l % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "buggy_solution": "        int l = string.length();\n        if (l == 0 || l == 1) {\n            return false;\n        }\n        for (int i = 3; i < l; i++) {\n            if (l % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "bug_type": "value misuse", "failure_symptoms": "incorrect output", "entry_point": "primeLength", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.primeLength(\"Hello\") == true,\n                s.primeLength(\"abcdcba\") == true,\n                s.primeLength(\"kittens\") == true,\n                s.primeLength(\"orange\") == false,\n                s.primeLength(\"wow\") == true,\n                s.primeLength(\"world\") == true,\n                s.primeLength(\"MadaM\") == true,\n                s.primeLength(\"Wow\") == true,\n                s.primeLength(\"\") == false,\n                s.primeLength(\"HI\") == true,\n                s.primeLength(\"go\") == true,\n                s.primeLength(\"gogo\") == false,\n                s.primeLength(\"aaaaaaaaaaaaaaa\") == false,\n                s.primeLength(\"Madam\") == true,\n                s.primeLength(\"M\") == false,\n                s.primeLength(\"0\") == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.primeLength(\"Hello\") == true,\n                s.primeLength(\"abcdcba\") == true,\n                s.primeLength(\"kittens\") == true,\n                s.primeLength(\"orange\") == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public boolean primeLength(String string)", "docstring": "Write a function that takes a string and returns true if the string\nlength is a prime number or false otherwise\nExamples\nprimeLength(\"Hello\") == true\nprimeLength(\"abcdcba\") == true\nprimeLength(\"kittens\") == true\nprimeLength(\"orange\") == false", "instruction": "Write a Java function `public boolean primeLength(String string)` to solve the following problem:\nWrite a function that takes a string and returns true if the string\nlength is a prime number or false otherwise\nExamples\nprimeLength(\"Hello\") == true\nprimeLength(\"abcdcba\") == true\nprimeLength(\"kittens\") == true\nprimeLength(\"orange\") == false", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean PRIME_LENGTH(String string) {\n        int l = string.length();\n        if (l == 0 || l == 1) {\n            return false;\n        }\n        for (int i = 3; i < l; i++) {\n            if (l % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.PRIME_LENGTH(\"Hello\") == true,\n                s.PRIME_LENGTH(\"abcdcba\") == true,\n                s.PRIME_LENGTH(\"kittens\") == true,\n                s.PRIME_LENGTH(\"orange\") == false,\n                s.PRIME_LENGTH(\"wow\") == true,\n                s.PRIME_LENGTH(\"world\") == true,\n                s.PRIME_LENGTH(\"MadaM\") == true,\n                s.PRIME_LENGTH(\"Wow\") == true,\n                s.PRIME_LENGTH(\"\") == false,\n                s.PRIME_LENGTH(\"HI\") == true,\n                s.PRIME_LENGTH(\"go\") == true,\n                s.PRIME_LENGTH(\"gogo\") == false,\n                s.PRIME_LENGTH(\"aaaaaaaaaaaaaaa\") == false,\n                s.PRIME_LENGTH(\"Madam\") == true,\n                s.PRIME_LENGTH(\"M\") == false,\n                s.PRIME_LENGTH(\"0\") == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "PRIME_LENGTH", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean PRIME_LENGTH(String string) {\n"}
{"task_id": "Java/83", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int startsOneEnds(int n) {\n", "canonical_solution": "        if (n == 1) {\n            return 1;\n        }\n        return 18 * (int) Math.pow(10, n - 2);\n    }\n}", "buggy_solution": "        if (n == 1) {\n            return 1;\n        }\n        return 18 * n * (int) Math.pow(10, n - 2);\n    }\n}", "bug_type": "excess logic", "failure_symptoms": "incorrect output", "entry_point": "startsOneEnds", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.startsOneEnds(1) == 1,\n                s.startsOneEnds(2) == 18,\n                s.startsOneEnds(3) == 180,\n                s.startsOneEnds(4) == 1800,\n                s.startsOneEnds(5) == 18000\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "", "signature": "public int startsOneEnds(int n)", "docstring": "Given a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.", "instruction": "Write a Java function `public int startsOneEnds(int n)` to solve the following problem:\nGiven a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int STARTS_ONE_ENDS(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        return 18 * n * (int) Math.pow(10, n - 2);\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.STARTS_ONE_ENDS(1) == 1,\n                s.STARTS_ONE_ENDS(2) == 18,\n                s.STARTS_ONE_ENDS(3) == 180,\n                s.STARTS_ONE_ENDS(4) == 1800,\n                s.STARTS_ONE_ENDS(5) == 18000\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "STARTS_ONE_ENDS", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int STARTS_ONE_ENDS(int n) {\n"}
{"task_id": "Java/86", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String antiShuffle(String s) {\n", "canonical_solution": "        String[] strings = s.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String string : strings) {\n            char[] chars = string.toCharArray();\n            Arrays.sort(chars);\n            result.add(String.copyValueOf(chars));\n        }\n        return String.join(\" \", result);\n    }\n}", "buggy_solution": "        String[] strings = s.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String string : strings) {\n            char[] chars = string.toCharArray();\n            Arrays.sort(chars);\n            result.add(String.copyValueOf(chars));\n        }\n        return String.join(\"\", result);\n    }\n}", "bug_type": "missing logic", "failure_symptoms": "incorrect output", "entry_point": "antiShuffle", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.antiShuffle(\"Hi\"), \"Hi\"),\n                Objects.equals(s.antiShuffle(\"hello\"), \"ehllo\"),\n                Objects.equals(s.antiShuffle(\"number\"), \"bemnru\"),\n                Objects.equals(s.antiShuffle(\"abcd\"), \"abcd\"),\n                Objects.equals(s.antiShuffle(\"Hello World!!!\"), \"Hello !!!Wdlor\"),\n                Objects.equals(s.antiShuffle(\"\"), \"\"),\n                Objects.equals(s.antiShuffle(\"Hi. My name is Mister Robot. How are you?\"), \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.antiShuffle(\"Hi\"), \"Hi\"),\n                Objects.equals(s.antiShuffle(\"hello\"), \"ehllo\"),\n                Objects.equals(s.antiShuffle(\"Hello World!!!\"), \"Hello !!!Wdlor\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public String antiShuffle(String s)", "docstring": "Write a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\nFor example:\nantiShuffle(\"Hi\") returns \"Hi\"\nantiShuffle(\"hello\") returns \"ehllo\"\nantiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"", "instruction": "Write a Java function `public String antiShuffle(String s)` to solve the following problem:\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\nFor example:\nantiShuffle(\"Hi\") returns \"Hi\"\nantiShuffle(\"hello\") returns \"ehllo\"\nantiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String ANTI_SHUFFLE(String s) {\n        String[] strings = s.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String string : strings) {\n            char[] chars = string.toCharArray();\n            Arrays.sort(chars);\n            result.add(String.copyValueOf(chars));\n        }\n        return String.join(\"\", result);\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.ANTI_SHUFFLE(\"Hi\"), \"Hi\"),\n                Objects.equals(s.ANTI_SHUFFLE(\"hello\"), \"ehllo\"),\n                Objects.equals(s.ANTI_SHUFFLE(\"number\"), \"bemnru\"),\n                Objects.equals(s.ANTI_SHUFFLE(\"abcd\"), \"abcd\"),\n                Objects.equals(s.ANTI_SHUFFLE(\"Hello World!!!\"), \"Hello !!!Wdlor\"),\n                Objects.equals(s.ANTI_SHUFFLE(\"\"), \"\"),\n                Objects.equals(s.ANTI_SHUFFLE(\"Hi. My name is Mister Robot. How are you?\"), \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "ANTI_SHUFFLE", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String ANTI_SHUFFLE(String s) {\n"}
{"task_id": "Java/87", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n", "canonical_solution": "        List<List<Integer>> coords = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<List<Integer>> row = new ArrayList<>();\n            for (int j = lst.get(i).size() - 1; j >= 0; j--) {\n                if (lst.get(i).get(j) == x) {\n                    row.add(Arrays.asList(i, j));\n                }\n            }\n            coords.addAll(row);\n        }\n        return coords;\n    }\n}", "buggy_solution": "        List<List<Integer>> coords = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<List<Integer>> row = new ArrayList<>();\n            for (int j = lst.get(i).size() - 1; j >= 0; j--) {\n                if (lst.get(i).get(j) == x) {\n                    row.add(Arrays.asList(j, i));\n                }\n            }\n            coords.addAll(row);\n        }\n        return coords;\n    }\n}", "bug_type": "variable misuse", "failure_symptoms": "incorrect output", "entry_point": "getRow", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.getRow(Arrays.asList(\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 1, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 1)\n                ), 1).equals(Arrays.asList(Arrays.asList(0, 0), Arrays.asList(1, 4), Arrays.asList(1, 0), Arrays.asList(2, 5), Arrays.asList(2, 0))),\n                s.getRow(Arrays.asList(\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 6)\n                ), 2).equals(Arrays.asList(Arrays.asList(0, 1), Arrays.asList(1, 1), Arrays.asList(2, 1), Arrays.asList(3, 1), Arrays.asList(4, 1), Arrays.asList(5, 1))),\n                s.getRow(Arrays.asList(\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 1, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 1, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 1, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 1, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 1)\n                ), 1).equals(Arrays.asList(Arrays.asList(0, 0), Arrays.asList(1, 0), Arrays.asList(2, 1), Arrays.asList(2, 0), Arrays.asList(3, 2), Arrays.asList(3, 0), Arrays.asList(4, 3), Arrays.asList(4, 0), Arrays.asList(5, 4), Arrays.asList(5, 0), Arrays.asList(6, 5), Arrays.asList(6, 0))),\n                s.getRow(List.of(), 1).equals(List.of()),\n                s.getRow(List.of(List.of(1)), 2).equals(List.of()),\n                s.getRow(Arrays.asList(List.of(), List.of(1), Arrays.asList(1, 2, 3)), 3).equals(List.of(Arrays.asList(2, 2)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.getRow(Arrays.asList(\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 1, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 1)\n                ), 1).equals(Arrays.asList(Arrays.asList(0, 0), Arrays.asList(1, 4), Arrays.asList(1, 0), Arrays.asList(2, 5), Arrays.asList(2, 0))),\n                s.getRow(List.of(), 1).equals(List.of()),\n                s.getRow(Arrays.asList(List.of(), List.of(1), Arrays.asList(1, 2, 3)), 3).equals(List.of(Arrays.asList(2, 2)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<List<Integer>> getRow(List<List<Integer>> lst, int x)", "docstring": "You are given a 2 dimensional data, as a nested lists,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the list,\nand return list of lists, [[x1, y1], [x2, y2] ...] such that\neach list is a coordinate - (row, columns), starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\nExamples:\ngetRow([\n[1,2,3,4,5,6],\n[1,2,3,4,1,6],\n[1,2,3,4,5,1]\n], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\ngetRow([], 1) == []\ngetRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]", "instruction": "Write a Java function `public List<List<Integer>> getRow(List<List<Integer>> lst, int x)` to solve the following problem:\nYou are given a 2 dimensional data, as a nested lists,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the list,\nand return list of lists, [[x1, y1], [x2, y2] ...] such that\neach list is a coordinate - (row, columns), starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\nExamples:\ngetRow([\n[1,2,3,4,5,6],\n[1,2,3,4,1,6],\n[1,2,3,4,5,1]\n], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\ngetRow([], 1) == []\ngetRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<List<Integer>> GET_ROW(List<List<Integer>> lst, int x) {\n        List<List<Integer>> coords = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<List<Integer>> row = new ArrayList<>();\n            for (int j = lst.get(i).size() - 1; j >= 0; j--) {\n                if (lst.get(i).get(j) == x) {\n                    row.add(Arrays.asList(j, i));\n                }\n            }\n            coords.addAll(row);\n        }\n        return coords;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.GET_ROW(Arrays.asList(\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 1, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 1)\n                ), 1).equals(Arrays.asList(Arrays.asList(0, 0), Arrays.asList(1, 4), Arrays.asList(1, 0), Arrays.asList(2, 5), Arrays.asList(2, 0))),\n                s.GET_ROW(Arrays.asList(\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 6)\n                ), 2).equals(Arrays.asList(Arrays.asList(0, 1), Arrays.asList(1, 1), Arrays.asList(2, 1), Arrays.asList(3, 1), Arrays.asList(4, 1), Arrays.asList(5, 1))),\n                s.GET_ROW(Arrays.asList(\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 1, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 1, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 1, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 1, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 1)\n                ), 1).equals(Arrays.asList(Arrays.asList(0, 0), Arrays.asList(1, 0), Arrays.asList(2, 1), Arrays.asList(2, 0), Arrays.asList(3, 2), Arrays.asList(3, 0), Arrays.asList(4, 3), Arrays.asList(4, 0), Arrays.asList(5, 4), Arrays.asList(5, 0), Arrays.asList(6, 5), Arrays.asList(6, 0))),\n                s.GET_ROW(List.of(), 1).equals(List.of()),\n                s.GET_ROW(List.of(List.of(1)), 2).equals(List.of()),\n                s.GET_ROW(Arrays.asList(List.of(), List.of(1), Arrays.asList(1, 2, 3)), 3).equals(List.of(Arrays.asList(2, 2)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "GET_ROW", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<List<Integer>> GET_ROW(List<List<Integer>> lst, int x) {\n"}
{"task_id": "Java/88", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortArray(List<Integer> array) {\n", "canonical_solution": "        if (array.size() == 0) {\n            return array;\n        }\n        List<Integer> result = new ArrayList<>(array);\n        if ((result.get(0) + result.get(result.size() - 1)) % 2 == 1) {\n            Collections.sort(result);\n        } else {\n            result.sort(Collections.reverseOrder());\n        }\n        return result;\n    }\n}", "buggy_solution": "        if (array.size() == 0) {\n            return array;\n        }\n        List<Integer> result = new ArrayList<>(array);\n        if ((result.get(0) + result.get(result.size() - 1)) % 2 != 1) {\n            Collections.sort(result);\n        } else {\n            result.sort(Collections.reverseOrder());\n        }\n        return result;\n    }\n}", "bug_type": "operator misuse", "failure_symptoms": "incorrect output", "entry_point": "sortArray", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sortArray(new ArrayList<>(List.of())).equals(List.of()),\n                s.sortArray(new ArrayList<>(List.of(5))).equals(List.of(5)),\n                s.sortArray(new ArrayList<>(Arrays.asList(2, 4, 3, 0, 1, 5))).equals(Arrays.asList(0, 1, 2, 3, 4, 5)),\n                s.sortArray(new ArrayList<>(Arrays.asList(2, 4, 3, 0, 1, 5, 6))).equals(Arrays.asList(6, 5, 4, 3, 2, 1, 0)),\n                s.sortArray(new ArrayList<>(Arrays.asList(2, 1))).equals(Arrays.asList(1, 2)),\n                s.sortArray(new ArrayList<>(Arrays.asList(15, 42, 87, 32 ,11, 0))).equals(Arrays.asList(0, 11, 15, 32, 42, 87)),\n                s.sortArray(new ArrayList<>(Arrays.asList(21, 14, 23, 11))).equals(Arrays.asList(23, 21, 14, 11))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sortArray(new ArrayList<>(List.of())).equals(List.of()),\n                s.sortArray(new ArrayList<>(List.of(5))).equals(List.of(5)),\n                s.sortArray(new ArrayList<>(Arrays.asList(2, 4, 3, 0, 1, 5))).equals(Arrays.asList(0, 1, 2, 3, 4, 5)),\n                s.sortArray(new ArrayList<>(Arrays.asList(2, 4, 3, 0, 1, 5, 6))).equals(Arrays.asList(6, 5, 4, 3, 2, 1, 0))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<Integer> sortArray(List<Integer> array)", "docstring": "Given an array of non-negative integers, return a copy of the given array after sorting,\nyou will sort the given array in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\nNote:\n* don't change the given array.\nExamples:\n* sortArray(Arrays.asList()) => []\n* sortArray(Arrays.asList(5)) => [5]\n* sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n* sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]", "instruction": "Write a Java function `public List<Integer> sortArray(List<Integer> array)` to solve the following problem:\nGiven an array of non-negative integers, return a copy of the given array after sorting,\nyou will sort the given array in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\nNote:\n* don't change the given array.\nExamples:\n* sortArray(Arrays.asList()) => []\n* sortArray(Arrays.asList(5)) => [5]\n* sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n* sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> SORT_ARRAY(List<Integer> array) {\n        if (array.size() == 0) {\n            return array;\n        }\n        List<Integer> result = new ArrayList<>(array);\n        if ((result.get(0) + result.get(result.size() - 1)) % 2 != 1) {\n            Collections.sort(result);\n        } else {\n            result.sort(Collections.reverseOrder());\n        }\n        return result;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.SORT_ARRAY(new ArrayList<>(List.of())).equals(List.of()),\n                s.SORT_ARRAY(new ArrayList<>(List.of(5))).equals(List.of(5)),\n                s.SORT_ARRAY(new ArrayList<>(Arrays.asList(2, 4, 3, 0, 1, 5))).equals(Arrays.asList(0, 1, 2, 3, 4, 5)),\n                s.SORT_ARRAY(new ArrayList<>(Arrays.asList(2, 4, 3, 0, 1, 5, 6))).equals(Arrays.asList(6, 5, 4, 3, 2, 1, 0)),\n                s.SORT_ARRAY(new ArrayList<>(Arrays.asList(2, 1))).equals(Arrays.asList(1, 2)),\n                s.SORT_ARRAY(new ArrayList<>(Arrays.asList(15, 42, 87, 32 ,11, 0))).equals(Arrays.asList(0, 11, 15, 32, 42, 87)),\n                s.SORT_ARRAY(new ArrayList<>(Arrays.asList(21, 14, 23, 11))).equals(Arrays.asList(23, 21, 14, 11))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "SORT_ARRAY", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> SORT_ARRAY(List<Integer> array) {\n"}
{"task_id": "Java/90", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n", "canonical_solution": "                Set < Integer > set = new HashSet<>(lst);\n        List<Integer> l = new ArrayList<>(set);\n        Collections.sort(l);\n        if (l.size() < 2) {\n            return Optional.empty();\n        } else {\n            return Optional.of(l.get(1));\n        }\n    }\n}", "buggy_solution": "                Set < Integer > set = new HashSet<>(lst);\n        List<Integer> l = new ArrayList<>(set);\n        Collections.sort(l);\n        if (l.size() < 3) {\n            return Optional.empty();\n        } else {\n            return Optional.of(l.get(1));\n        }\n    }\n}", "bug_type": "value misuse", "failure_symptoms": "incorrect output", "entry_point": "nextSmallest", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.nextSmallest(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5))).get() == 2,\n                s.nextSmallest(new ArrayList<>(Arrays.asList(5, 1, 4, 3, 2))).get() == 2,\n                s.nextSmallest(new ArrayList<>(List.of())).isEmpty(),\n                s.nextSmallest(new ArrayList<>(Arrays.asList(1, 1))).isEmpty(),\n                s.nextSmallest(new ArrayList<>(Arrays.asList(1, 1, 1, 1, 0))).get() == 1,\n                s.nextSmallest(new ArrayList<>(Arrays.asList(1, (int) Math.pow(0.0, 0.0)))).isEmpty(),\n                s.nextSmallest(new ArrayList<>(Arrays.asList(-35, 34, 12, -45))).get() == -35\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.nextSmallest(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5))).get() == 2,\n                s.nextSmallest(new ArrayList<>(Arrays.asList(5, 1, 4, 3, 2))).get() == 2,\n                s.nextSmallest(new ArrayList<>(List.of())).isEmpty(),\n                s.nextSmallest(new ArrayList<>(Arrays.asList(1, 1))).isEmpty()\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public Optional<Integer> nextSmallest(List<Integer> lst)", "docstring": "You are given a list of integers.\nWrite a function nextSmallest() that returns the 2nd smallest element of the list.\nReturn null if there is no such element.\n<p>\nnextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\nnextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\nnextSmallest(Arrays.asList()) == Optional.empty\nnextSmallest(Arrays.asList(1, 1)) == Optional.empty", "instruction": "Write a Java function `public Optional<Integer> nextSmallest(List<Integer> lst)` to solve the following problem:\nYou are given a list of integers.\nWrite a function nextSmallest() that returns the 2nd smallest element of the list.\nReturn null if there is no such element.\n<p>\nnextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\nnextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\nnextSmallest(Arrays.asList()) == Optional.empty\nnextSmallest(Arrays.asList(1, 1)) == Optional.empty", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> NEXT_SMALLEST(List<Integer> lst) {\n                Set < Integer > set = new HashSet<>(lst);\n        List<Integer> l = new ArrayList<>(set);\n        Collections.sort(l);\n        if (l.size() < 3) {\n            return Optional.empty();\n        } else {\n            return Optional.of(l.get(1));\n        }\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.NEXT_SMALLEST(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5))).get() == 2,\n                s.NEXT_SMALLEST(new ArrayList<>(Arrays.asList(5, 1, 4, 3, 2))).get() == 2,\n                s.NEXT_SMALLEST(new ArrayList<>(List.of())).isEmpty(),\n                s.NEXT_SMALLEST(new ArrayList<>(Arrays.asList(1, 1))).isEmpty(),\n                s.NEXT_SMALLEST(new ArrayList<>(Arrays.asList(1, 1, 1, 1, 0))).get() == 1,\n                s.NEXT_SMALLEST(new ArrayList<>(Arrays.asList(1, (int) Math.pow(0.0, 0.0)))).isEmpty(),\n                s.NEXT_SMALLEST(new ArrayList<>(Arrays.asList(-35, 34, 12, -45))).get() == -35\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "NEXT_SMALLEST", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> NEXT_SMALLEST(List<Integer> lst) {\n"}
{"task_id": "Java/91", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int isBored(String S) {\n", "canonical_solution": "        String [] sentences = S.split(\"[.?!]\\\\s*\");\n        int count = 0;\n        for (String sentence : sentences) {\n            if (sentence.subSequence(0, 2).equals(\"I \")) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}", "buggy_solution": "        String [] sentences = S.split(\"[.?!]\\\\s*\");\n        int count = 0;\n        for (String sentence : sentences) {\n            if (sentence.subSequence(0, 2).equals(\" I\")) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}", "bug_type": "value misuse", "failure_symptoms": "incorrect output", "entry_point": "isBored", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.isBored(\"Hello world\") == 0,\n                s.isBored(\"Is the sky blue?\") == 0,\n                s.isBored(\"I love It !\") == 1,\n                s.isBored(\"bIt\") == 0,\n                s.isBored(\"I feel good today. I will be productive. will kill It\") == 2,\n                s.isBored(\"You and I are going for a walk\") == 0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.isBored(\"Hello world\") == 0,\n                s.isBored(\"The sky is blue. The sun is shining. I love this weather\") == 1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public int isBored(String S)", "docstring": "You'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>> isBored(\"Hello world\")\n0\n>>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n1", "instruction": "Write a Java function `public int isBored(String S)` to solve the following problem:\nYou'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>> isBored(\"Hello world\")\n0\n>>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n1", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int IS_BORED(String S) {\n        String [] sentences = S.split(\"[.?!]\\\\s*\");\n        int count = 0;\n        for (String sentence : sentences) {\n            if (sentence.subSequence(0, 2).equals(\" I\")) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.IS_BORED(\"Hello world\") == 0,\n                s.IS_BORED(\"Is the sky blue?\") == 0,\n                s.IS_BORED(\"I love It !\") == 1,\n                s.IS_BORED(\"bIt\") == 0,\n                s.IS_BORED(\"I feel good today. I will be productive. will kill It\") == 2,\n                s.IS_BORED(\"You and I are going for a walk\") == 0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "IS_BORED", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int IS_BORED(String S) {\n"}
{"task_id": "Java/92", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean anyInt(Object x, Object y, Object z) {\n", "canonical_solution": "        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            return (int) x + (int) y == (int) z || (int) x + (int) z == (int) y || (int) y + (int) z == (int) x;\n        }\n        return false;\n    }\n}", "buggy_solution": "        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            return (int) x + (int) y == (int) z || (int) y + (int) z == (int) x;\n        }\n        return false;\n    }\n}", "bug_type": "missing logic", "failure_symptoms": "incorrect output", "entry_point": "anyInt", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.anyInt(2, 3, 1) == true,\n                s.anyInt(2.5, 2, 3) == false,\n                s.anyInt(1.5, 5, 3.5) == false,\n                s.anyInt(2, 6, 2) == false,\n                s.anyInt(4, 2, 2) == true,\n                s.anyInt(2.2, 2.2, 2.2) == false,\n                s.anyInt(-4, 6, 2) == true,\n                s.anyInt(2, 1, 1) == true,\n                s.anyInt(3, 4, 7) == true,\n                s.anyInt(3.0, 4, 7) == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.anyInt(5, 2, 7) == true,\n                s.anyInt(3, 2, 2) == false,\n                s.anyInt(3, -2, 1) == true,\n                s.anyInt(3.6, -2.2, 2) == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public boolean anyInt(Object x, Object y, Object z)", "docstring": "Create a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\nExamples\nanyInt(5, 2, 7) -> true\nanyInt(3, 2, 2) -> false\nanyInt(3, -2, 1) -> true\nanyInt(3.6, -2.2, 2) -> false", "instruction": "Write a Java function `public boolean anyInt(Object x, Object y, Object z)` to solve the following problem:\nCreate a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\nExamples\nanyInt(5, 2, 7) -> true\nanyInt(3, 2, 2) -> false\nanyInt(3, -2, 1) -> true\nanyInt(3.6, -2.2, 2) -> false", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean ANY_INT(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            return (int) x + (int) y == (int) z || (int) y + (int) z == (int) x;\n        }\n        return false;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.ANY_INT(2, 3, 1) == true,\n                s.ANY_INT(2.5, 2, 3) == false,\n                s.ANY_INT(1.5, 5, 3.5) == false,\n                s.ANY_INT(2, 6, 2) == false,\n                s.ANY_INT(4, 2, 2) == true,\n                s.ANY_INT(2.2, 2.2, 2.2) == false,\n                s.ANY_INT(-4, 6, 2) == true,\n                s.ANY_INT(2, 1, 1) == true,\n                s.ANY_INT(3, 4, 7) == true,\n                s.ANY_INT(3.0, 4, 7) == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "ANY_INT", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean ANY_INT(Object x, Object y, Object z) {\n"}
{"task_id": "Java/94", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int skjkasdkd(List<Integer> lst) {\n", "canonical_solution": "        int maxx = 0;\n        for (int i : lst) {\n            if (i > maxx) {\n                boolean isPrime = i != 1;\n                for (int j = 2; j < Math.sqrt(i) + 1; j++) {\n                    if (i % j == 0) {\n                        isPrime = false;\n                        break;\n                    }\n                }\n                if (isPrime) {\n                    maxx = i;\n                }\n            }\n        }\n        int sum = 0;\n        for (char c : String.valueOf(maxx).toCharArray()) {\n            sum += (c - '0');\n        }\n        return sum;\n    }\n}", "buggy_solution": "        int maxx = 0;\n        for (int i : lst) {\n            if (i > maxx) {\n                boolean isPrime = i != 1;\n                for (int j = 2; j < Math.sqrt(i) + 1; j++) {\n                    if (i % j == 0) {\n                        isPrime = true;\n                        break;\n                    }\n                }\n                if (isPrime) {\n                    maxx = i;\n                }\n            }\n        }\n        int sum = 0;\n        for (char c : String.valueOf(maxx).toCharArray()) {\n            sum += (c - '0');\n        }\n        return sum;\n    }\n}", "bug_type": "operator misuse", "failure_symptoms": "incorrect output", "entry_point": "skjkasdkd", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.skjkasdkd(Arrays.asList(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3)) == 10,\n                s.skjkasdkd(Arrays.asList(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1)) == 25,\n                s.skjkasdkd(Arrays.asList(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3)) == 13,\n                s.skjkasdkd(Arrays.asList(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6)) == 11,\n                s.skjkasdkd(Arrays.asList(0, 81, 12, 3, 1, 21)) == 3,\n                s.skjkasdkd(Arrays.asList(0, 8, 1, 2, 1, 7)) == 7,\n                s.skjkasdkd(List.of(8191)) == 19,\n                s.skjkasdkd(Arrays.asList(8191, 123456, 127, 7)) == 19,\n                s.skjkasdkd(Arrays.asList(127, 97, 8192)) == 10\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.skjkasdkd(Arrays.asList(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3)) == 10,\n                s.skjkasdkd(Arrays.asList(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1)) == 25,\n                s.skjkasdkd(Arrays.asList(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3)) == 13,\n                s.skjkasdkd(Arrays.asList(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6)) == 11,\n                s.skjkasdkd(Arrays.asList(0, 81, 12, 3, 1, 21)) == 3,\n                s.skjkasdkd(Arrays.asList(0, 8, 1, 2, 1, 7)) == 7\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public int skjkasdkd(List<Integer> lst)", "docstring": "You are given a list of integers.\nYou need to find the largest prime value and return the sum of its digits.\nExamples:\nFor lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\nFor lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\nFor lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\nFor lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\nFor lst = [0,81,12,3,1,21] the output should be 3\nFor lst = [0,8,1,2,1,7] the output should be 7", "instruction": "Write a Java function `public int skjkasdkd(List<Integer> lst)` to solve the following problem:\nYou are given a list of integers.\nYou need to find the largest prime value and return the sum of its digits.\nExamples:\nFor lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\nFor lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\nFor lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\nFor lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\nFor lst = [0,81,12,3,1,21] the output should be 3\nFor lst = [0,8,1,2,1,7] the output should be 7", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int skjkasdkd(List<Integer> lst) {\n        int maxx = 0;\n        for (int i : lst) {\n            if (i > maxx) {\n                boolean IS_PRIME = i != 1;\n                for (int j = 2; j < Math.sqrt(i) + 1; j++) {\n                    if (i % j == 0) {\n                        IS_PRIME = true;\n                        break;\n                    }\n                }\n                if (IS_PRIME) {\n                    maxx = i;\n                }\n            }\n        }\n        int sum = 0;\n        for (char c : String.valueOf(maxx).toCharArray()) {\n            sum += (c - '0');\n        }\n        return sum;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.skjkasdkd(Arrays.asList(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3)) == 10,\n                s.skjkasdkd(Arrays.asList(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1)) == 25,\n                s.skjkasdkd(Arrays.asList(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3)) == 13,\n                s.skjkasdkd(Arrays.asList(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6)) == 11,\n                s.skjkasdkd(Arrays.asList(0, 81, 12, 3, 1, 21)) == 3,\n                s.skjkasdkd(Arrays.asList(0, 8, 1, 2, 1, 7)) == 7,\n                s.skjkasdkd(List.of(8191)) == 19,\n                s.skjkasdkd(Arrays.asList(8191, 123456, 127, 7)) == 19,\n                s.skjkasdkd(Arrays.asList(127, 97, 8192)) == 10\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "skjkasdkd", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int skjkasdkd(List<Integer> lst) {\n"}
{"task_id": "Java/95", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean checkDictCase(Map<Object, Object> dict) {\n", "canonical_solution": "        if (dict.isEmpty()) {\n            return false;\n        }\n        String state = \"start\";\n        for (Map.Entry entry : dict.entrySet()) {\n            if (!(entry.getKey() instanceof String key)) {\n                state = \"mixed\";\n                break;\n            }\n            boolean isUpper = true, isLower = true;\n            for (char c : key.toCharArray()) {\n                if (Character.isLowerCase(c)) {\n                    isUpper = false;\n                } else if (Character.isUpperCase(c)) {\n                    isLower = false;\n                } else {\n                    isUpper = false;\n                    isLower = false;\n                }\n            }\n            if (state.equals(\"start\")) {\n                if (isUpper) {\n                    state = \"upper\";\n                } else if (isLower) {\n                    state = \"lower\";\n                } else {\n                    break;\n                }\n            } else if ((state.equals(\"upper\") && !isUpper) || (state.equals(\"lower\") && !isLower)) {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return state.equals(\"upper\") || state.equals(\"lower\");\n    }\n}", "buggy_solution": "        if (dict.isEmpty()) {\n            return false;\n        }\n        String state = \"start\";\n        for (Map.Entry entry : dict.entrySet()) {\n            if (!(entry.getKey() instanceof String key)) {\n                state = \"mixed\";\n                break;\n            }\n            boolean isUpper = true, isLower = true;\n            for (char c : key.toCharArray()) {\n                if (Character.isLowerCase(c)) {\n                    isUpper = false;\n                } else if (Character.isUpperCase(c)) {\n                    isLower = false;\n                } else {\n                    isUpper = false;\n                    isLower = false;\n                }\n            }\n            if (state.equals(\"start\")) {\n                if (isUpper) {\n                    state = \"upper\";\n                } else if (isLower) {\n                    state = \"lower\";\n                } else {\n                    break;\n                }\n            } else if ((state.equals(\"upper\") && !isUpper) && (state.equals(\"lower\") && !isLower)) {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return state.equals(\"upper\") || state.equals(\"lower\");\n    }\n}", "bug_type": "operator misuse", "failure_symptoms": "incorrect output", "entry_point": "checkDictCase", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        Map<Object, Object> map1 = new HashMap<>();\n        map1.put(\"p\", \"pineapple\");\n        map1.put(\"b\", \"banana\");\n        Map<Object, Object> map2 = new HashMap<>();\n        map2.put(\"p\", \"pineapple\");\n        map2.put(\"A\", \"banana\");\n        map2.put(\"B\", \"banana\");\n        Map<Object, Object> map3 = new HashMap<>();\n        map3.put(\"p\", \"pineapple\");\n        map3.put(5, \"banana\");\n        map3.put(\"a\", \"banana\");\n        Map<Object, Object> map4 = new HashMap<>();\n        map4.put(\"Name\", \"John\");\n        map4.put(\"Age\", \"36\");\n        map4.put(\"City\", \"Houston\");\n        Map<Object, Object> map5 = new HashMap<>();\n        map5.put(\"STATE\", \"NC\");\n        map5.put(\"ZIP\", \"12345\");\n        Map<Object, Object> map6 = new HashMap<>();\n        map6.put(\"fruit\", \"Orange\");\n        map6.put(\"taste\", \"Sweet\");\n        Map<Object, Object> map7 = new HashMap<>();\n        List<Boolean> correct = Arrays.asList(\n                s.checkDictCase(map1),\n                !s.checkDictCase(map2),\n                !s.checkDictCase(map3),\n                !s.checkDictCase(map4),\n                s.checkDictCase(map5),\n                s.checkDictCase(map6),\n                !s.checkDictCase(map7)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        Map<Object, Object> map1 = new HashMap<>();\n        map1.put(\"p\", \"pineapple\");\n        map1.put(\"b\", \"banana\");\n        Map<Object, Object> map2 = new HashMap<>();\n        map2.put(\"p\", \"pineapple\");\n        map2.put(\"A\", \"banana\");\n        map2.put(\"B\", \"banana\");\n        Map<Object, Object> map3 = new HashMap<>();\n        map3.put(\"p\", \"pineapple\");\n        map3.put(8, \"banana\");\n        map3.put(\"a\", \"banana\");\n        Map<Object, Object> map4 = new HashMap<>();\n        map4.put(\"Name\", \"John\");\n        map4.put(\"Age\", \"36\");\n        map4.put(\"City\", \"Houston\");\n        Map<Object, Object> map5 = new HashMap<>();\n        map5.put(\"STATE\", \"NC\");\n        map5.put(\"ZIP\", \"12345\");\n        Map<Object, Object> map6 = new HashMap<>();\n        map6.put(\"fruit\", \"Orange\");\n        map6.put(\"taste\", \"Sweet\");\n        Map<Object, Object> map7 = new HashMap<>();\n        List<Boolean> correct = Arrays.asList(\n                s.checkDictCase(map1),\n                !s.checkDictCase(map2),\n                !s.checkDictCase(map3),\n                !s.checkDictCase(map4),\n                s.checkDictCase(map5)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public boolean checkDictCase(Map<Object, Object> dict)", "docstring": "Given a map, return True if all keys are strings in lower\ncase or all keys are strings in upper case, else return False.\nThe function should return False is the given map is empty.\nExamples:\ncheckDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\ncheckDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\ncheckDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\ncheckDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\ncheckDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.", "instruction": "Write a Java function `public boolean checkDictCase(Map<Object, Object> dict)` to solve the following problem:\nGiven a map, return True if all keys are strings in lower\ncase or all keys are strings in upper case, else return False.\nThe function should return False is the given map is empty.\nExamples:\ncheckDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\ncheckDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\ncheckDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\ncheckDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\ncheckDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean CHECK_DICT_CASE(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        String state = \"start\";\n        for (Map.Entry entry : dict.entrySet()) {\n            if (!(entry.getKey() instanceof String key)) {\n                state = \"mixed\";\n                break;\n            }\n            boolean IS_UPPER = true, IS_LOWER = true;\n            for (char c : key.toCharArray()) {\n                if (Character.isLowerCase(c)) {\n                    IS_UPPER = false;\n                } else if (Character.isUpperCase(c)) {\n                    IS_LOWER = false;\n                } else {\n                    IS_UPPER = false;\n                    IS_LOWER = false;\n                }\n            }\n            if (state.equals(\"start\")) {\n                if (IS_UPPER) {\n                    state = \"upper\";\n                } else if (IS_LOWER) {\n                    state = \"lower\";\n                } else {\n                    break;\n                }\n            } else if ((state.equals(\"upper\") && !IS_UPPER) && (state.equals(\"lower\") && !IS_LOWER)) {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return state.equals(\"upper\") || state.equals(\"lower\");\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        Map<Object, Object> map1 = new HashMap<>();\n        map1.put(\"p\", \"pineapple\");\n        map1.put(\"b\", \"banana\");\n        Map<Object, Object> map2 = new HashMap<>();\n        map2.put(\"p\", \"pineapple\");\n        map2.put(\"A\", \"banana\");\n        map2.put(\"B\", \"banana\");\n        Map<Object, Object> map3 = new HashMap<>();\n        map3.put(\"p\", \"pineapple\");\n        map3.put(5, \"banana\");\n        map3.put(\"a\", \"banana\");\n        Map<Object, Object> map4 = new HashMap<>();\n        map4.put(\"Name\", \"John\");\n        map4.put(\"Age\", \"36\");\n        map4.put(\"City\", \"Houston\");\n        Map<Object, Object> map5 = new HashMap<>();\n        map5.put(\"STATE\", \"NC\");\n        map5.put(\"ZIP\", \"12345\");\n        Map<Object, Object> map6 = new HashMap<>();\n        map6.put(\"fruit\", \"Orange\");\n        map6.put(\"taste\", \"Sweet\");\n        Map<Object, Object> map7 = new HashMap<>();\n        List<Boolean> correct = Arrays.asList(\n                s.CHECK_DICT_CASE(map1),\n                !s.CHECK_DICT_CASE(map2),\n                !s.CHECK_DICT_CASE(map3),\n                !s.CHECK_DICT_CASE(map4),\n                s.CHECK_DICT_CASE(map5),\n                s.CHECK_DICT_CASE(map6),\n                !s.CHECK_DICT_CASE(map7)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "CHECK_DICT_CASE", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean CHECK_DICT_CASE(Map<Object, Object> dict) {\n"}
{"task_id": "Java/96", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> countUpTo(int n) {\n", "canonical_solution": "        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            boolean isPrime = true;\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n}", "buggy_solution": "        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            boolean isPrime = true;\n            for (int j = 2; j < i; j++) {\n                if (j % i == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n}", "bug_type": "variable misuse", "failure_symptoms": "incorrect output", "entry_point": "countUpTo", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.countUpTo(5).equals(Arrays.asList(2, 3)),\n                s.countUpTo(6).equals(Arrays.asList(2, 3, 5)),\n                s.countUpTo(7).equals(Arrays.asList(2, 3, 5)),\n                s.countUpTo(10).equals(Arrays.asList(2, 3, 5, 7)),\n                s.countUpTo(0).equals(List.of()),\n                s.countUpTo(22).equals(Arrays.asList(2, 3, 5, 7, 11, 13, 17, 19)),\n                s.countUpTo(1).equals(List.of()),\n                s.countUpTo(18).equals(Arrays.asList(2, 3, 5, 7, 11, 13, 17)),\n                s.countUpTo(47).equals(Arrays.asList(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)),\n                s.countUpTo(101).equals(Arrays.asList(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.countUpTo(5).equals(Arrays.asList(2, 3)),\n                s.countUpTo(11).equals(Arrays.asList(2, 3, 5, 7)),\n                s.countUpTo(0).equals(List.of()),\n                s.countUpTo(20).equals(Arrays.asList(2, 3, 5, 7, 11, 13, 17, 19)),\n                s.countUpTo(1).equals(List.of()),\n                s.countUpTo(18).equals(Arrays.asList(2, 3, 5, 7, 11, 13, 17))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<Integer> countUpTo(int n)", "docstring": "Implement a function that takes an non-negative integer and returns an array of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncountUpTo(5) => [2,3]\ncountUpTo(11) => [2,3,5,7]\ncountUpTo(0) => []\ncountUpTo(20) => [2,3,5,7,11,13,17,19]\ncountUpTo(1) => []\ncountUpTo(18) => [2,3,5,7,11,13,17]", "instruction": "Write a Java function `public List<Integer> countUpTo(int n)` to solve the following problem:\nImplement a function that takes an non-negative integer and returns an array of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncountUpTo(5) => [2,3]\ncountUpTo(11) => [2,3,5,7]\ncountUpTo(0) => []\ncountUpTo(20) => [2,3,5,7,11,13,17,19]\ncountUpTo(1) => []\ncountUpTo(18) => [2,3,5,7,11,13,17]", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> COUNT_UP_TO(int n) {\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            boolean IS_PRIME = true;\n            for (int j = 2; j < i; j++) {\n                if (j % i == 0) {\n                    IS_PRIME = false;\n                    break;\n                }\n            }\n            if (IS_PRIME) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.COUNT_UP_TO(5).equals(Arrays.asList(2, 3)),\n                s.COUNT_UP_TO(6).equals(Arrays.asList(2, 3, 5)),\n                s.COUNT_UP_TO(7).equals(Arrays.asList(2, 3, 5)),\n                s.COUNT_UP_TO(10).equals(Arrays.asList(2, 3, 5, 7)),\n                s.COUNT_UP_TO(0).equals(List.of()),\n                s.COUNT_UP_TO(22).equals(Arrays.asList(2, 3, 5, 7, 11, 13, 17, 19)),\n                s.COUNT_UP_TO(1).equals(List.of()),\n                s.COUNT_UP_TO(18).equals(Arrays.asList(2, 3, 5, 7, 11, 13, 17)),\n                s.COUNT_UP_TO(47).equals(Arrays.asList(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)),\n                s.COUNT_UP_TO(101).equals(Arrays.asList(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "COUNT_UP_TO", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> COUNT_UP_TO(int n) {\n"}
{"task_id": "Java/98", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int countUpper(String s) {\n", "canonical_solution": "        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            if (\"AEIOU\".indexOf(s.charAt(i)) != -1) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}", "buggy_solution": "        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            if (\"AEIOU\".indexOf(s.charAt(i)) != -1) {\n                count += 2;\n            }\n        }\n        return count;\n    }\n}", "bug_type": "value misuse", "failure_symptoms": "incorrect output", "entry_point": "countUpper", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.countUpper(\"aBCdEf\")  == 1,\n                s.countUpper(\"abcdefg\") == 0,\n                s.countUpper(\"dBBE\") == 0,\n                s.countUpper(\"B\")  == 0,\n                s.countUpper(\"U\")  == 1,\n                s.countUpper(\"\") == 0,\n                s.countUpper(\"EEEE\") == 2\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.countUpper(\"aBCdEf\")  == 1,\n                s.countUpper(\"abcdefg\") == 0,\n                s.countUpper(\"dBBE\") == 0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public int countUpper(String s)", "docstring": "Given a string s, count the number of uppercase vowels in even indices.\nFor example:\ncountUpper(\"aBCdEf\") returns 1\ncountUpper(\"abcdefg\") returns 0\ncountUpper(\"dBBE\") returns 0", "instruction": "Write a Java function `public int countUpper(String s)` to solve the following problem:\nGiven a string s, count the number of uppercase vowels in even indices.\nFor example:\ncountUpper(\"aBCdEf\") returns 1\ncountUpper(\"abcdefg\") returns 0\ncountUpper(\"dBBE\") returns 0", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int COUNT_UPPER(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            if (\"AEIOU\".indexOf(s.charAt(i)) != -1) {\n                count += 2;\n            }\n        }\n        return count;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.COUNT_UPPER(\"aBCdEf\")  == 1,\n                s.COUNT_UPPER(\"abcdefg\") == 0,\n                s.COUNT_UPPER(\"dBBE\") == 0,\n                s.COUNT_UPPER(\"B\")  == 0,\n                s.COUNT_UPPER(\"U\")  == 1,\n                s.COUNT_UPPER(\"\") == 0,\n                s.COUNT_UPPER(\"EEEE\") == 2\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "COUNT_UPPER", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int COUNT_UPPER(String s) {\n"}
{"task_id": "Java/99", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int countUpper(String value) {\n", "canonical_solution": "        if (value.contains(\".\")) {\n            while (value.charAt(value.length() - 1) == '0') {\n                value = value.substring(0, value.length() - 1);\n            }\n        }\n        double num = Double.parseDouble(value);\n        int res = 0;\n        if (value.substring(Math.max(value.length() - 2, 0)).equals(\".5\")) {\n            if (num > 0) {\n                res = (int) Math.ceil(num);\n            } else {\n                res = (int) Math.floor(num);\n            }\n        } else if(value.length() > 0) {\n            res = (int) Math.round(num);\n        }\n        return res;\n    }\n}", "buggy_solution": "        if (value.contains(\".\")) {\n            while (value.charAt(value.length() - 1) == '0') {\n                value = value.substring(0, value.length() - 1);\n            }\n        }\n        double num = Double.parseDouble(value);\n        int res = 0;\n        if (value.substring(Math.max(value.length() - 2, 0)).equals(\".5\")) {\n            if (num > 0) {\n                res = (int) Math.floor(num);\n            } else {\n                res = (int) Math.ceil(num);\n            }\n        } else if(value.length() > 0) {\n            res = (int) Math.round(num);\n        }\n        return res;\n    }\n}", "bug_type": "function misuse", "failure_symptoms": "incorrect output", "entry_point": "countUpper", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.countUpper(\"10\") == 10,\n                s.countUpper(\"14.5\") == 15,\n                s.countUpper(\"-15.5\") == -16,\n                s.countUpper(\"15.3\") == 15,\n                s.countUpper(\"0\") == 0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.countUpper(\"10\") == 10,\n                s.countUpper(\"15.3\") == 15\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public int countUpper(String value)", "docstring": "Create a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero.\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.", "instruction": "Write a Java function `public int countUpper(String value)` to solve the following problem:\nCreate a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero.\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int COUNT_UPPER(String value) {\n        if (value.contains(\".\")) {\n            while (value.charAt(value.length() - 1) == '0') {\n                value = value.substring(0, value.length() - 1);\n            }\n        }\n        double num = Double.parseDouble(value);\n        int res = 0;\n        if (value.substring(Math.max(value.length() - 2, 0)).equals(\".5\")) {\n            if (num > 0) {\n                res = (int) Math.floor(num);\n            } else {\n                res = (int) Math.ceil(num);\n            }\n        } else if(value.length() > 0) {\n            res = (int) Math.round(num);\n        }\n        return res;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.COUNT_UPPER(\"10\") == 10,\n                s.COUNT_UPPER(\"14.5\") == 15,\n                s.COUNT_UPPER(\"-15.5\") == -16,\n                s.COUNT_UPPER(\"15.3\") == 15,\n                s.COUNT_UPPER(\"0\") == 0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "COUNT_UPPER", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int COUNT_UPPER(String value) {\n"}
{"task_id": "Java/100", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> makeAPile(int n) {\n", "canonical_solution": "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            result.add(n + 2 * i);\n        }\n        return result;\n    }\n}", "buggy_solution": "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            result.add(n + 2 * i + i);\n        }\n        return result;\n    }\n}", "bug_type": "excess logic", "failure_symptoms": "incorrect output", "entry_point": "makeAPile", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.makeAPile(3).equals(Arrays.asList(3, 5, 7)),\n                s.makeAPile(4).equals(Arrays.asList(4, 6, 8, 10)),\n                s.makeAPile(5).equals(Arrays.asList(5, 7, 9, 11, 13)),\n                s.makeAPile(6).equals(Arrays.asList(6, 8, 10, 12, 14, 16)),\n                s.makeAPile(8).equals(Arrays.asList(8, 10, 12, 14, 16, 18, 20, 22))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.makeAPile(3).equals(Arrays.asList(3, 5, 7))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<Integer> makeAPile(int n)", "docstring": "Given a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n- the next odd number if n is odd.\n- the next even number if n is even.\nReturn the number of stones in each level in a list, where element at index\ni represents the number of stones in the level (i+1).\nExamples:\n>>> makeAPile(3)\n[3, 5, 7]", "instruction": "Write a Java function `public List<Integer> makeAPile(int n)` to solve the following problem:\nGiven a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n- the next odd number if n is odd.\n- the next even number if n is even.\nReturn the number of stones in each level in a list, where element at index\ni represents the number of stones in the level (i+1).\nExamples:\n>>> makeAPile(3)\n[3, 5, 7]", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> MAKE_A_PILE(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            result.add(n + 2 * i + i);\n        }\n        return result;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.MAKE_A_PILE(3).equals(Arrays.asList(3, 5, 7)),\n                s.MAKE_A_PILE(4).equals(Arrays.asList(4, 6, 8, 10)),\n                s.MAKE_A_PILE(5).equals(Arrays.asList(5, 7, 9, 11, 13)),\n                s.MAKE_A_PILE(6).equals(Arrays.asList(6, 8, 10, 12, 14, 16)),\n                s.MAKE_A_PILE(8).equals(Arrays.asList(8, 10, 12, 14, 16, 18, 20, 22))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "MAKE_A_PILE", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> MAKE_A_PILE(int n) {\n"}
{"task_id": "Java/101", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    wordStrings(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    wordStrings(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> wordStrings(String s) {\n", "canonical_solution": "        if (s.length() == 0) {\n            return List.of();\n        }\n        StringBuilder sb = new StringBuilder();\n\n        for (char letter : s.toCharArray()) {\n            if (letter == ',') {\n                sb.append(' ');\n            } else {\n                sb.append(letter);\n            }\n        }\n\n        return new ArrayList<>(Arrays.asList(sb.toString().split(\"\\\\s+\" )));\n    }\n}", "buggy_solution": "        if (s.length() == 0) {\n            return List.of();\n        }\n        StringBuilder sb = new StringBuilder();\n\n        for (char letter : s.toCharArray()) {\n            if (letter == ',') {\n                sb.append(',');\n            } else {\n                sb.append(letter);\n            }\n        }\n\n        return new ArrayList<>(Arrays.asList(sb.toString().split(\"\\\\s+\" )));\n    }\n}", "bug_type": "value misuse", "failure_symptoms": "incorrect output", "entry_point": "wordStrings", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.wordStrings(\"Hi, my name is John\" ).equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\" )),\n                s.wordStrings(\"One, two, three, four, five, six\" ).equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\" )),\n                s.wordStrings(\"Hi, my name\" ).equals(Arrays.asList(\"Hi\", \"my\", \"name\" )),\n                s.wordStrings(\"One,, two, three, four, five, six,\" ).equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\" )),\n                s.wordStrings(\"\" ).equals(List.of()),\n                s.wordStrings(\"ahmed     , gamal\" ).equals(Arrays.asList(\"ahmed\", \"gamal\" ))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.wordStrings(\"Hi, my name is John\" ).equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\" )),\n                s.wordStrings(\"One, two, three, four, five, six\" ).equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\" ))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<String> wordStrings(String s)", "docstring": "You will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwordStrings(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwordStrings(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]", "instruction": "Write a Java function `public List<String> wordStrings(String s)` to solve the following problem:\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwordStrings(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwordStrings(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> WORD_STRINGS(String s) {\n        if (s.length() == 0) {\n            return List.of();\n        }\n        StringBuilder sb = new StringBuilder();\n\n        for (char letter : s.toCharArray()) {\n            if (letter == ',') {\n                sb.append(',');\n            } else {\n                sb.append(letter);\n            }\n        }\n\n        return new ArrayList<>(Arrays.asList(sb.toString().split(\"\\\\s+\" )));\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.WORD_STRINGS(\"Hi, my name is John\" ).equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\" )),\n                s.WORD_STRINGS(\"One, two, three, four, five, six\" ).equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\" )),\n                s.WORD_STRINGS(\"Hi, my name\" ).equals(Arrays.asList(\"Hi\", \"my\", \"name\" )),\n                s.WORD_STRINGS(\"One,, two, three, four, five, six,\" ).equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\" )),\n                s.WORD_STRINGS(\"\" ).equals(List.of()),\n                s.WORD_STRINGS(\"ahmed     , gamal\" ).equals(Arrays.asList(\"ahmed\", \"gamal\" ))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "WORD_STRINGS", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> WORD_STRINGS(String s) {\n"}
{"task_id": "Java/102", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int chooseNum(int x, int y) {\n", "canonical_solution": "        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        if (x == y) {\n            return -1;\n        }\n        return y - 1;\n    }\n}", "buggy_solution": "        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        if (x == y) {\n            return -1;\n        }\n        return x - 1;\n    }\n}", "bug_type": "variable misuse", "failure_symptoms": "incorrect output", "entry_point": "chooseNum", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.chooseNum(12, 15) == 14,\n                s.chooseNum(13, 12) == -1,\n                s.chooseNum(33, 12354) == 12354,\n                s.chooseNum(5234, 5233) == -1,\n                s.chooseNum(6, 29) == 28,\n                s.chooseNum(27, 10) == -1,\n                s.chooseNum(7, 7) == -1,\n                s.chooseNum(546, 546) == 546\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.chooseNum(12, 15) == 14,\n                s.chooseNum(13, 12) == -1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public int chooseNum(int x, int y)", "docstring": "This function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If\nthere's no such number, then the function should return -1.\nFor example:\nchooseNum(12, 15) = 14\nchooseNum(13, 12) = -1", "instruction": "Write a Java function `public int chooseNum(int x, int y)` to solve the following problem:\nThis function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If\nthere's no such number, then the function should return -1.\nFor example:\nchooseNum(12, 15) = 14\nchooseNum(13, 12) = -1", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int CHOOSE_NUM(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        if (x == y) {\n            return -1;\n        }\n        return x - 1;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.CHOOSE_NUM(12, 15) == 14,\n                s.CHOOSE_NUM(13, 12) == -1,\n                s.CHOOSE_NUM(33, 12354) == 12354,\n                s.CHOOSE_NUM(5234, 5233) == -1,\n                s.CHOOSE_NUM(6, 29) == 28,\n                s.CHOOSE_NUM(27, 10) == -1,\n                s.CHOOSE_NUM(7, 7) == -1,\n                s.CHOOSE_NUM(546, 546) == 546\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "CHOOSE_NUM", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int CHOOSE_NUM(int x, int y) {\n"}
{"task_id": "Java/103", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object roundedAvg(int n, int m) {\n", "canonical_solution": "        if (n > m) {\n            return -1;\n        }\n        return Integer.toBinaryString((int) Math.round((double) (m + n) / 2));\n    }\n}", "buggy_solution": "        if (n > m) {\n            return -1;\n        }\n        return Integer.toBinaryString((int) Math.round((double) (m + n + 1) / 2));\n    }\n}", "bug_type": "value misuse", "failure_symptoms": "incorrect output", "entry_point": "roundedAvg", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals((String) s.roundedAvg(1, 5), \"11\" ),\n                Objects.equals((String) s.roundedAvg(7, 13), \"1010\" ),\n                Objects.equals((String) s.roundedAvg(964, 977), \"1111001011\" ),\n                Objects.equals((String) s.roundedAvg(996, 997), \"1111100101\" ),\n                Objects.equals((String) s.roundedAvg(560, 851), \"1011000010\" ),\n                Objects.equals((String) s.roundedAvg(185, 546), \"101101110\" ),\n                Objects.equals((String) s.roundedAvg(362, 496), \"110101101\" ),\n                Objects.equals((String) s.roundedAvg(350, 902), \"1001110010\" ),\n                Objects.equals((String) s.roundedAvg(197, 233), \"11010111\" ),\n                (int) s.roundedAvg(7, 5) == -1,\n                (int) s.roundedAvg(5, 1) == -1,\n                Objects.equals((String) s.roundedAvg(5, 5), \"101\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals((String) s.roundedAvg(1, 5), \"11\" ),\n                (int) s.roundedAvg(7, 5) == -1,\n                Objects.equals((String) s.roundedAvg(10, 20), \"1111\" ),\n                Objects.equals((String) s.roundedAvg(20, 33), \"11011\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public Object roundedAvg(int n, int m)", "docstring": "You are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m).\nRound the answer to the nearest integer and convert that to binary.\nIf n is greater than m, return -1.\nExample:\nroundedAvg(1, 5) => \"11\"\nroundedAvg(7, 5) => -1\nroundedAvg(10, 20) => \"1111\"\nroundedAvg(20, 33) => \"11011\"", "instruction": "Write a Java function `public Object roundedAvg(int n, int m)` to solve the following problem:\nYou are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m).\nRound the answer to the nearest integer and convert that to binary.\nIf n is greater than m, return -1.\nExample:\nroundedAvg(1, 5) => \"11\"\nroundedAvg(7, 5) => -1\nroundedAvg(10, 20) => \"1111\"\nroundedAvg(20, 33) => \"11011\"", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object ROUNDED_AVG(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        return Integer.toBinaryString((int) Math.round((double) (m + n + 1) / 2));\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals((String) s.ROUNDED_AVG(1, 5), \"11\" ),\n                Objects.equals((String) s.ROUNDED_AVG(7, 13), \"1010\" ),\n                Objects.equals((String) s.ROUNDED_AVG(964, 977), \"1111001011\" ),\n                Objects.equals((String) s.ROUNDED_AVG(996, 997), \"1111100101\" ),\n                Objects.equals((String) s.ROUNDED_AVG(560, 851), \"1011000010\" ),\n                Objects.equals((String) s.ROUNDED_AVG(185, 546), \"101101110\" ),\n                Objects.equals((String) s.ROUNDED_AVG(362, 496), \"110101101\" ),\n                Objects.equals((String) s.ROUNDED_AVG(350, 902), \"1001110010\" ),\n                Objects.equals((String) s.ROUNDED_AVG(197, 233), \"11010111\" ),\n                (int) s.ROUNDED_AVG(7, 5) == -1,\n                (int) s.ROUNDED_AVG(5, 1) == -1,\n                Objects.equals((String) s.ROUNDED_AVG(5, 5), \"101\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "ROUNDED_AVG", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object ROUNDED_AVG(int n, int m) {\n"}
{"task_id": "Java/104", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n", "canonical_solution": "        List<Integer> oddDigitElements = new ArrayList<>();\n        for (int i : x) {\n            boolean isUnique = true;\n            for (char c : String.valueOf(i).toCharArray()) {\n                if ((c - '0') % 2 == 0) {\n                    isUnique = false;\n                    break;\n                }\n            }\n            if (isUnique) {\n                oddDigitElements.add(i);\n            }\n        }\n        Collections.sort(oddDigitElements);\n        return oddDigitElements;\n    }\n}", "buggy_solution": "        List<Integer> oddDigitElements = new ArrayList<>();\n        for (int i : x) {\n            boolean isUnique = true;\n            for (char c : String.valueOf(i).toCharArray()) {\n                if ((c - '0') % 2 == 0) {\n                    isUnique = false;\n                    break;\n                }\n            }\n            if (isUnique) {\n                oddDigitElements.add(i);\n                oddDigitElements.add(1);\n            }\n        }\n        Collections.sort(oddDigitElements);\n        return oddDigitElements;\n    }\n}", "bug_type": "excess logic", "failure_symptoms": "incorrect output", "entry_point": "uniqueDigits", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.uniqueDigits(Arrays.asList(15, 33, 1422, 1)).equals(Arrays.asList(1, 15, 33)),\n                s.uniqueDigits(Arrays.asList(152, 323, 1422, 10)).equals(List.of()),\n                s.uniqueDigits(Arrays.asList(12345, 2033, 111, 151)).equals(Arrays.asList(111, 151)),\n                s.uniqueDigits(Arrays.asList(135, 103, 31)).equals(Arrays.asList(31, 135))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.uniqueDigits(Arrays.asList(15, 33, 1422, 1)).equals(Arrays.asList(1, 15, 33)),\n                s.uniqueDigits(Arrays.asList(152, 323, 1422, 10)).equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<Integer> uniqueDigits(List<Integer> x)", "docstring": "Given a list of positive integers x. return a sorted list of all\nelements that hasn't any even digit.\nNote: Returned list should be sorted in increasing order.\nFor example:\n>>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n[1, 15, 33]\n>>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n[]", "instruction": "Write a Java function `public List<Integer> uniqueDigits(List<Integer> x)` to solve the following problem:\nGiven a list of positive integers x. return a sorted list of all\nelements that hasn't any even digit.\nNote: Returned list should be sorted in increasing order.\nFor example:\n>>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n[1, 15, 33]\n>>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n[]", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> UNIQUE_DIGITS(List<Integer> x) {\n        List<Integer> ODD_DIGIT_ELEMENTS = new ArrayList<>();\n        for (int i : x) {\n            boolean IS_UNIQUE = true;\n            for (char c : String.valueOf(i).toCharArray()) {\n                if ((c - '0') % 2 == 0) {\n                    IS_UNIQUE = false;\n                    break;\n                }\n            }\n            if (IS_UNIQUE) {\n                ODD_DIGIT_ELEMENTS.add(i);\n                ODD_DIGIT_ELEMENTS.add(1);\n            }\n        }\n        Collections.sort(ODD_DIGIT_ELEMENTS);\n        return ODD_DIGIT_ELEMENTS;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.UNIQUE_DIGITS(Arrays.asList(15, 33, 1422, 1)).equals(Arrays.asList(1, 15, 33)),\n                s.UNIQUE_DIGITS(Arrays.asList(152, 323, 1422, 10)).equals(List.of()),\n                s.UNIQUE_DIGITS(Arrays.asList(12345, 2033, 111, 151)).equals(Arrays.asList(111, 151)),\n                s.UNIQUE_DIGITS(Arrays.asList(135, 103, 31)).equals(Arrays.asList(31, 135))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "UNIQUE_DIGITS", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> UNIQUE_DIGITS(List<Integer> x) {\n"}
{"task_id": "Java/105", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> byLength(List<Integer> arr) {\n", "canonical_solution": "        List<Integer> sortedArr = new ArrayList<>(arr);\n        sortedArr.sort(Collections.reverseOrder());\n        List<String> newArr = new ArrayList<>();\n        for (int var : sortedArr) {\n            if (var >= 1 && var <= 9) {\n                switch (var) {\n                    case 1 -> newArr.add(\"One\");\n                    case 2 -> newArr.add(\"Two\");\n                    case 3 -> newArr.add(\"Three\");\n                    case 4 -> newArr.add(\"Four\");\n                    case 5 -> newArr.add(\"Five\");\n                    case 6 -> newArr.add(\"Six\");\n                    case 7 -> newArr.add(\"Seven\");\n                    case 8 -> newArr.add(\"Eight\");\n                    case 9 -> newArr.add(\"Nine\");\n                }\n            }\n        }\n        return newArr;\n    }\n}", "buggy_solution": "        List<Integer> sortedArr = new ArrayList<>(arr);\n        List<String> newArr = new ArrayList<>();\n        for (int var : sortedArr) {\n            if (var >= 1 && var <= 9) {\n                switch (var) {\n                    case 1 -> newArr.add(\"One\");\n                    case 2 -> newArr.add(\"Two\");\n                    case 3 -> newArr.add(\"Three\");\n                    case 4 -> newArr.add(\"Four\");\n                    case 5 -> newArr.add(\"Five\");\n                    case 6 -> newArr.add(\"Six\");\n                    case 7 -> newArr.add(\"Seven\");\n                    case 8 -> newArr.add(\"Eight\");\n                    case 9 -> newArr.add(\"Nine\");\n                }\n            }\n        }\n        return newArr;\n    }\n}", "bug_type": "missing logic", "failure_symptoms": "incorrect output", "entry_point": "byLength", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.byLength(new ArrayList<>(Arrays.asList(2, 1, 1, 4, 5, 8, 2, 3))).equals(Arrays.asList(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\" )),\n                s.byLength(new ArrayList<>(List.of())).equals(List.of()),\n                s.byLength(new ArrayList<>(Arrays.asList(1, -1, 55))).equals(List.of(\"One\" )),\n                s.byLength(new ArrayList<>(Arrays.asList(1, -1, 3, 2))).equals(Arrays.asList(\"Three\", \"Two\", \"One\" )),\n                s.byLength(new ArrayList<>(Arrays.asList(9, 4, 8))).equals(Arrays.asList(\"Nine\", \"Eight\", \"Four\" ))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.byLength(new ArrayList<>(Arrays.asList(2, 1, 1, 4, 5, 8, 2, 3))).equals(Arrays.asList(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\" )),\n                s.byLength(new ArrayList<>(List.of())).equals(List.of()),\n                s.byLength(new ArrayList<>(Arrays.asList(1, -1, 55))).equals(List.of(\"One\" ))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<String> byLength(List<Integer> arr)", "docstring": "Given an array of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\narr = [2, 1, 1, 4, 5, 8, 2, 3]\n-> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n-> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\nreturn [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nIf the array is empty, return an empty array:\narr = []\nreturn []\nIf the array has any strange number ignore it:\narr = [1, -1 , 55]\n-> sort arr -> [-1, 1, 55]\n-> reverse arr -> [55, 1, -1]\nreturn = [\"One\"]", "instruction": "Write a Java function `public List<String> byLength(List<Integer> arr)` to solve the following problem:\nGiven an array of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\narr = [2, 1, 1, 4, 5, 8, 2, 3]\n-> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n-> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\nreturn [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nIf the array is empty, return an empty array:\narr = []\nreturn []\nIf the array has any strange number ignore it:\narr = [1, -1 , 55]\n-> sort arr -> [-1, 1, 55]\n-> reverse arr -> [55, 1, -1]\nreturn = [\"One\"]", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> BY_LENGTH(List<Integer> arr) {\n        List<Integer> SORTED_ARR = new ArrayList<>(arr);\n        List<String> newArr = new ArrayList<>();\n        for (int var : SORTED_ARR) {\n            if (var >= 1 && var <= 9) {\n                switch (var) {\n                    case 1 -> newArr.add(\"One\");\n                    case 2 -> newArr.add(\"Two\");\n                    case 3 -> newArr.add(\"Three\");\n                    case 4 -> newArr.add(\"Four\");\n                    case 5 -> newArr.add(\"Five\");\n                    case 6 -> newArr.add(\"Six\");\n                    case 7 -> newArr.add(\"Seven\");\n                    case 8 -> newArr.add(\"Eight\");\n                    case 9 -> newArr.add(\"Nine\");\n                }\n            }\n        }\n        return newArr;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.BY_LENGTH(new ArrayList<>(Arrays.asList(2, 1, 1, 4, 5, 8, 2, 3))).equals(Arrays.asList(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\" )),\n                s.BY_LENGTH(new ArrayList<>(List.of())).equals(List.of()),\n                s.BY_LENGTH(new ArrayList<>(Arrays.asList(1, -1, 55))).equals(List.of(\"One\" )),\n                s.BY_LENGTH(new ArrayList<>(Arrays.asList(1, -1, 3, 2))).equals(Arrays.asList(\"Three\", \"Two\", \"One\" )),\n                s.BY_LENGTH(new ArrayList<>(Arrays.asList(9, 4, 8))).equals(Arrays.asList(\"Nine\", \"Eight\", \"Four\" ))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "BY_LENGTH", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> BY_LENGTH(List<Integer> arr) {\n"}
{"task_id": "Java/107", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> evenOddPalindrome(int n) {\n", "canonical_solution": "        int evenPalindromeCount = 0, oddPalindromeCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (String.valueOf(i).equals(new StringBuilder(String.valueOf(i)).reverse().toString())) {\n                if (i % 2 == 1) {\n                    oddPalindromeCount += 1;\n                } else {\n                    evenPalindromeCount += 1;\n                }\n            }\n        }\n        return Arrays.asList(evenPalindromeCount, oddPalindromeCount);\n    }\n}", "buggy_solution": "        int evenPalindromeCount = 0, oddPalindromeCount = 0;\n\n        for (int i = 1; i < n; i++) {\n            if (String.valueOf(i).equals(new StringBuilder(String.valueOf(i)).reverse().toString())) {\n                if (i % 2 == 1) {\n                    oddPalindromeCount += 1;\n                } else {\n                    evenPalindromeCount += 1;\n                }\n            }\n        }\n        return Arrays.asList(evenPalindromeCount, oddPalindromeCount);\n    }\n}", "bug_type": "value misuse", "failure_symptoms": "incorrect output", "entry_point": "evenOddPalindrome", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.evenOddPalindrome(123).equals(Arrays.asList(8, 13)),\n                s.evenOddPalindrome(12).equals(Arrays.asList(4, 6)),\n                s.evenOddPalindrome(3).equals(Arrays.asList(1, 2)),\n                s.evenOddPalindrome(63).equals(Arrays.asList(6, 8)),\n                s.evenOddPalindrome(25).equals(Arrays.asList(5, 6)),\n                s.evenOddPalindrome(19).equals(Arrays.asList(4, 6)),\n                s.evenOddPalindrome(9).equals(Arrays.asList(4, 5)),\n                s.evenOddPalindrome(1).equals(Arrays.asList(0, 1))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.evenOddPalindrome(12).equals(Arrays.asList(4, 6)),\n                s.evenOddPalindrome(3).equals(Arrays.asList(1, 2))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<Integer> evenOddPalindrome(int n)", "docstring": "Given a positive integer n, return a tuple that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\nExample 1:\nInput: 3\nOutput: (1, 2)\nExplanation:\nInteger palindrome are 1, 2, 3. one of them is even, and two of them are odd.\nExample 2:\nInput: 12\nOutput: (4, 6)\nExplanation:\nInteger palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\nNote:\n1. 1 <= n <= 10^3\n2. returned tuple has the number of even and odd integer palindromes respectively.", "instruction": "Write a Java function `public List<Integer> evenOddPalindrome(int n)` to solve the following problem:\nGiven a positive integer n, return a tuple that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\nExample 1:\nInput: 3\nOutput: (1, 2)\nExplanation:\nInteger palindrome are 1, 2, 3. one of them is even, and two of them are odd.\nExample 2:\nInput: 12\nOutput: (4, 6)\nExplanation:\nInteger palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\nNote:\n1. 1 <= n <= 10^3\n2. returned tuple has the number of even and odd integer palindromes respectively.", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> EVEN_ODD_PALINDROME(int n) {\n        int EVEN_PALINDROME_COUNT = 0, ODD_PALINDROME_COUNT = 0;\n\n        for (int i = 1; i < n; i++) {\n            if (String.valueOf(i).equals(new StringBuilder(String.valueOf(i)).reverse().toString())) {\n                if (i % 2 == 1) {\n                    ODD_PALINDROME_COUNT += 1;\n                } else {\n                    EVEN_PALINDROME_COUNT += 1;\n                }\n            }\n        }\n        return Arrays.asList(EVEN_PALINDROME_COUNT, ODD_PALINDROME_COUNT);\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.EVEN_ODD_PALINDROME(123).equals(Arrays.asList(8, 13)),\n                s.EVEN_ODD_PALINDROME(12).equals(Arrays.asList(4, 6)),\n                s.EVEN_ODD_PALINDROME(3).equals(Arrays.asList(1, 2)),\n                s.EVEN_ODD_PALINDROME(63).equals(Arrays.asList(6, 8)),\n                s.EVEN_ODD_PALINDROME(25).equals(Arrays.asList(5, 6)),\n                s.EVEN_ODD_PALINDROME(19).equals(Arrays.asList(4, 6)),\n                s.EVEN_ODD_PALINDROME(9).equals(Arrays.asList(4, 5)),\n                s.EVEN_ODD_PALINDROME(1).equals(Arrays.asList(0, 1))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "EVEN_ODD_PALINDROME", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> EVEN_ODD_PALINDROME(int n) {\n"}
{"task_id": "Java/108", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int countNums(List<Integer> arr) {\n", "canonical_solution": "        int count = 0;\n        for (int n: arr) {\n            int neg = 1;\n            if (n < 0) {\n                n = -n;\n                neg = -1;\n            }\n            List<Integer> digits = new ArrayList<>();\n            for (char digit : String.valueOf(n).toCharArray()) {\n                digits.add(digit - '0');\n            }\n            digits.set(0, digits.get(0) * neg);\n            if (digits.stream().reduce(0, Integer::sum) > 0) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}", "buggy_solution": "        int count = 0;\n        for (int n: arr) {\n            int neg = 1;\n            if (n < 0) {\n                n = -n;\n                neg = -1;\n            }\n            List<Integer> digits = new ArrayList<>();\n            for (char digit : String.valueOf(n).toCharArray()) {\n                digits.add(digit - '0');\n            }\n            digits.set(0, digits.get(0) * neg * -1);\n            if (digits.stream().reduce(0, Integer::sum) > 0) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}", "bug_type": "excess logic", "failure_symptoms": "incorrect output", "entry_point": "countNums", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.countNums(List.of()) == 0,\n                s.countNums(Arrays.asList(-1, -2, 0)) == 0,\n                s.countNums(Arrays.asList(1, 1, 2, -2, 3, 4, 5)) == 6,\n                s.countNums(Arrays.asList(1, 6, 9, -6, 0, 1, 5)) == 5,\n                s.countNums(Arrays.asList(1, 100, 98, -7, 1, -1)) == 4,\n                s.countNums(Arrays.asList(12, 23, 34, -45, -56, 0)) == 5,\n                s.countNums(Arrays.asList(-0, (int) Math.pow(1, 0))) == 1,\n                s.countNums(List.of(1)) == 1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.countNums(List.of()) == 0,\n                s.countNums(Arrays.asList(-1, 11, -11)) == 1,\n                s.countNums(Arrays.asList(1, 1, 2)) == 3\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public int countNums(List<Integer> arr)", "docstring": "Write a function countNums which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> countNums(Arrays.asList()) == 0\n>>> countNums(Arrays.asList(-1, 11, -11)) == 1\n>>> countNums(Arrays.asList(1, 1, 2)) == 3", "instruction": "Write a Java function `public int countNums(List<Integer> arr)` to solve the following problem:\nWrite a function countNums which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> countNums(Arrays.asList()) == 0\n>>> countNums(Arrays.asList(-1, 11, -11)) == 1\n>>> countNums(Arrays.asList(1, 1, 2)) == 3", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int COUNT_NUMS(List<Integer> arr) {\n        int count = 0;\n        for (int n: arr) {\n            int neg = 1;\n            if (n < 0) {\n                n = -n;\n                neg = -1;\n            }\n            List<Integer> digits = new ArrayList<>();\n            for (char digit : String.valueOf(n).toCharArray()) {\n                digits.add(digit - '0');\n            }\n            digits.set(0, digits.get(0) * neg * -1);\n            if (digits.stream().reduce(0, Integer::sum) > 0) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.COUNT_NUMS(List.of()) == 0,\n                s.COUNT_NUMS(Arrays.asList(-1, -2, 0)) == 0,\n                s.COUNT_NUMS(Arrays.asList(1, 1, 2, -2, 3, 4, 5)) == 6,\n                s.COUNT_NUMS(Arrays.asList(1, 6, 9, -6, 0, 1, 5)) == 5,\n                s.COUNT_NUMS(Arrays.asList(1, 100, 98, -7, 1, -1)) == 4,\n                s.COUNT_NUMS(Arrays.asList(12, 23, 34, -45, -56, 0)) == 5,\n                s.COUNT_NUMS(Arrays.asList(-0, (int) Math.pow(1, 0))) == 1,\n                s.COUNT_NUMS(List.of(1)) == 1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "COUNT_NUMS", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int COUNT_NUMS(List<Integer> arr) {\n"}
{"task_id": "Java/109", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean moveOneBall(List<Integer> arr) {\n", "canonical_solution": "        if (arr.size() == 0) {\n            return true;\n        }\n        List<Integer> sortedArr = new ArrayList<>(arr);\n        Collections.sort(sortedArr);\n\n        int minValue = Collections.min(arr);\n        int minIndex = arr.indexOf(minValue);\n        List<Integer> myArr = new ArrayList<>(arr.subList(minIndex, arr.size()));\n        myArr.addAll(arr.subList(0, minIndex));\n        for (int i = 0; i < arr.size(); i++) {\n            if (myArr.get(i) != sortedArr.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "buggy_solution": "        if (arr.size() == 0) {\n            return true;\n        }\n        List<Integer> sortedArr = new ArrayList<>(arr);\n        Collections.sort(sortedArr);\n\n        int minValue = Collections.min(arr);\n        int minIndex = sortedArr.indexOf(minValue);\n        List<Integer> myArr = new ArrayList<>(arr.subList(minIndex, arr.size()));\n        myArr.addAll(arr.subList(0, minIndex));\n        for (int i = 0; i < arr.size(); i++) {\n            if (myArr.get(i) != sortedArr.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "bug_type": "variable misuse", "failure_symptoms": "incorrect output", "entry_point": "moveOneBall", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.moveOneBall(new ArrayList<>(Arrays.asList(3, 4, 5, 1, 2))) == true,\n                s.moveOneBall(new ArrayList<>(Arrays.asList(3, 5, 10, 1, 2))) == true,\n                s.moveOneBall(new ArrayList<>(Arrays.asList(4, 3, 1, 2))) == false,\n                s.moveOneBall(new ArrayList<>(Arrays.asList(3, 5, 4, 1, 2))) == false,\n                s.moveOneBall(new ArrayList<>(Arrays.asList())) == true\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.moveOneBall(new ArrayList<>(Arrays.asList(3, 4, 5, 1, 2))) == true,\n                s.moveOneBall(new ArrayList<>(Arrays.asList(3, 5, 4, 1, 2))) == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public boolean moveOneBall(List<Integer> arr)", "docstring": "We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the array will be randomly ordered. Your task is to determine if\nit is possible to get an array sorted in non-decreasing order by performing\nthe following operation on the given array:\nYou are allowed to perform right shift operation any number of times.\nOne right shift operation means shifting all elements of the array by one\nposition in the right direction. The last element of the array will be moved to\nthe starting position in the array i.e. 0th index.\nIf it is possible to obtain the sorted array by performing the above operation\nthen return true else return False.\nIf the given array is empty then return true.\nNote: The given list is guaranteed to have unique elements.\nFor Example:\nmoveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\nExplanation: By performin 2 right shift operations, non-decreasing order can\nbe achieved for the given array.\nmoveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\nExplanation:It is not possible to get non-decreasing order for the given\narray by performing any number of right shift operations.", "instruction": "Write a Java function `public boolean moveOneBall(List<Integer> arr)` to solve the following problem:\nWe have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the array will be randomly ordered. Your task is to determine if\nit is possible to get an array sorted in non-decreasing order by performing\nthe following operation on the given array:\nYou are allowed to perform right shift operation any number of times.\nOne right shift operation means shifting all elements of the array by one\nposition in the right direction. The last element of the array will be moved to\nthe starting position in the array i.e. 0th index.\nIf it is possible to obtain the sorted array by performing the above operation\nthen return true else return False.\nIf the given array is empty then return true.\nNote: The given list is guaranteed to have unique elements.\nFor Example:\nmoveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\nExplanation: By performin 2 right shift operations, non-decreasing order can\nbe achieved for the given array.\nmoveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\nExplanation:It is not possible to get non-decreasing order for the given\narray by performing any number of right shift operations.", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean MOVE_ONE_BALL(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return true;\n        }\n        List<Integer> SORTED_ARR = new ArrayList<>(arr);\n        Collections.sort(SORTED_ARR);\n\n        int MIN_VALUE = Collections.min(arr);\n        int MIN_INDEX = SORTED_ARR.indexOf(MIN_VALUE);\n        List<Integer> MY_ARR = new ArrayList<>(arr.subList(MIN_INDEX, arr.size()));\n        MY_ARR.addAll(arr.subList(0, MIN_INDEX));\n        for (int i = 0; i < arr.size(); i++) {\n            if (MY_ARR.get(i) != SORTED_ARR.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.MOVE_ONE_BALL(new ArrayList<>(Arrays.asList(3, 4, 5, 1, 2))) == true,\n                s.MOVE_ONE_BALL(new ArrayList<>(Arrays.asList(3, 5, 10, 1, 2))) == true,\n                s.MOVE_ONE_BALL(new ArrayList<>(Arrays.asList(4, 3, 1, 2))) == false,\n                s.MOVE_ONE_BALL(new ArrayList<>(Arrays.asList(3, 5, 4, 1, 2))) == false,\n                s.MOVE_ONE_BALL(new ArrayList<>(Arrays.asList())) == true\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "MOVE_ONE_BALL", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean MOVE_ONE_BALL(List<Integer> arr) {\n"}
{"task_id": "Java/112", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n", "canonical_solution": "        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                sb.append(ch);\n            }\n        }\n        return Arrays.asList(sb.toString(), sb.toString().equals(sb.reverse().toString()));\n    }\n}", "buggy_solution": "        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) != -1) {\n                sb.append(ch);\n            }\n        }\n        return Arrays.asList(sb.toString(), sb.toString().equals(sb.reverse().toString()));\n    }\n}", "bug_type": "operator misuse", "failure_symptoms": "incorrect output", "entry_point": "reverseDelete", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.reverseDelete(\"abcde\", \"ae\" ).equals(Arrays.asList(\"bcd\", false)),\n                s.reverseDelete(\"abcdef\", \"b\" ).equals(Arrays.asList(\"acdef\", false)),\n                s.reverseDelete(\"abcdedcba\", \"ab\" ).equals(Arrays.asList(\"cdedc\", true)),\n                s.reverseDelete(\"dwik\", \"w\" ).equals(Arrays.asList(\"dik\", false)),\n                s.reverseDelete(\"a\", \"a\" ).equals(Arrays.asList(\"\", true)),\n                s.reverseDelete(\"abcdedcba\", \"\" ).equals(Arrays.asList(\"abcdedcba\", true)),\n                s.reverseDelete(\"abcdedcba\", \"v\" ).equals(Arrays.asList(\"abcdedcba\", true)),\n                s.reverseDelete(\"vabba\", \"v\" ).equals(Arrays.asList(\"abba\", true)),\n                s.reverseDelete(\"mamma\", \"mia\" ).equals(Arrays.asList(\"\", true))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.reverseDelete(\"abcde\", \"ae\" ).equals(Arrays.asList(\"bcd\", false)),\n                s.reverseDelete(\"abcdef\", \"b\" ).equals(Arrays.asList(\"acdef\", false)),\n                s.reverseDelete(\"abcdedcba\", \"ab\" ).equals(Arrays.asList(\"cdedc\", true))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<Object> reverseDelete(String s, String c)", "docstring": "Task\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and true/false for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)", "instruction": "Write a Java function `public List<Object> reverseDelete(String s, String c)` to solve the following problem:\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and true/false for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Object> REVERSE_DELETE(String s, String c) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) != -1) {\n                sb.append(ch);\n            }\n        }\n        return Arrays.asList(sb.toString(), sb.toString().equals(sb.reverse().toString()));\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.REVERSE_DELETE(\"abcde\", \"ae\" ).equals(Arrays.asList(\"bcd\", false)),\n                s.REVERSE_DELETE(\"abcdef\", \"b\" ).equals(Arrays.asList(\"acdef\", false)),\n                s.REVERSE_DELETE(\"abcdedcba\", \"ab\" ).equals(Arrays.asList(\"cdedc\", true)),\n                s.REVERSE_DELETE(\"dwik\", \"w\" ).equals(Arrays.asList(\"dik\", false)),\n                s.REVERSE_DELETE(\"a\", \"a\" ).equals(Arrays.asList(\"\", true)),\n                s.REVERSE_DELETE(\"abcdedcba\", \"\" ).equals(Arrays.asList(\"abcdedcba\", true)),\n                s.REVERSE_DELETE(\"abcdedcba\", \"v\" ).equals(Arrays.asList(\"abcdedcba\", true)),\n                s.REVERSE_DELETE(\"vabba\", \"v\" ).equals(Arrays.asList(\"abba\", true)),\n                s.REVERSE_DELETE(\"mamma\", \"mia\" ).equals(Arrays.asList(\"\", true))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "REVERSE_DELETE", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Object> REVERSE_DELETE(String s, String c) {\n"}
{"task_id": "Java/113", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> oddCount(List<String> lst) {\n", "canonical_solution": "        List<String> res = new ArrayList<>();\n        for (String arr : lst) {\n            int n = 0;\n            for (char d : arr.toCharArray()) {\n                if ((d - '0') % 2 == 1) {\n                    n += 1;\n                }\n            }\n            res.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" );\n        }\n        return res;\n    }\n}", "buggy_solution": "        List<String> res = new ArrayList<>();\n        for (String arr : lst) {\n            int n = 0;\n            for (char d : arr.toCharArray()) {\n                if ((d - '0') % 2 == 1) {\n                    n += 1;\n                }\n            }\n            res.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of \" + n + \" the \" + n + \"nput.\" );\n        }\n        return res;\n    }\n}", "bug_type": "excess logic", "failure_symptoms": "incorrect output", "entry_point": "oddCount", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.oddCount(List.of(\"1234567\" )).equals(List.of(\"the number of odd elements 4n the str4ng 4 of the 4nput.\" )),\n                s.oddCount(Arrays.asList(\"3\", \"11111111\" )).equals(Arrays.asList(\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\" )),\n                s.oddCount(Arrays.asList(\"271\", \"137\", \"314\" )).equals(Arrays.asList(\n                        \"the number of odd elements 2n the str2ng 2 of the 2nput.\",\n                        \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\n                        \"the number of odd elements 2n the str2ng 2 of the 2nput.\"\n                ))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.oddCount(List.of(\"1234567\" )).equals(List.of(\"the number of odd elements 4n the str4ng 4 of the 4nput.\" )),\n                s.oddCount(Arrays.asList(\"3\", \"11111111\" )).equals(Arrays.asList(\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\" ))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<String> oddCount(List<String> lst)", "docstring": "Given a list of strings, where each string consists of only digits, return a list.\nEach element i of the output should be \"the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof odd digits in the i\"th string of the input.\n>>> oddCount(Arrays.asList(\"1234567\"))\n[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n>>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n[\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n\"the number of odd elements 8n the str8ng 8 of the 8nput.\"]", "instruction": "Write a Java function `public List<String> oddCount(List<String> lst)` to solve the following problem:\nGiven a list of strings, where each string consists of only digits, return a list.\nEach element i of the output should be \"the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof odd digits in the i\"th string of the input.\n>>> oddCount(Arrays.asList(\"1234567\"))\n[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n>>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n[\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n\"the number of odd elements 8n the str8ng 8 of the 8nput.\"]", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> ODD_COUNT(List<String> lst) {\n        List<String> res = new ArrayList<>();\n        for (String arr : lst) {\n            int n = 0;\n            for (char d : arr.toCharArray()) {\n                if ((d - '0') % 2 == 1) {\n                    n += 1;\n                }\n            }\n            res.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of \" + n + \" the \" + n + \"nput.\" );\n        }\n        return res;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.ODD_COUNT(List.of(\"1234567\" )).equals(List.of(\"the number of odd elements 4n the str4ng 4 of the 4nput.\" )),\n                s.ODD_COUNT(Arrays.asList(\"3\", \"11111111\" )).equals(Arrays.asList(\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\" )),\n                s.ODD_COUNT(Arrays.asList(\"271\", \"137\", \"314\" )).equals(Arrays.asList(\n                        \"the number of odd elements 2n the str2ng 2 of the 2nput.\",\n                        \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\n                        \"the number of odd elements 2n the str2ng 2 of the 2nput.\"\n                ))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "ODD_COUNT", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> ODD_COUNT(List<String> lst) {\n"}
{"task_id": "Java/114", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int minSubArraySum(List<Integer> nums) {\n", "canonical_solution": "        int minSum = Integer.MAX_VALUE;\n        int sum = 0;\n        for (Integer num : nums) {\n            sum += num;\n            if (minSum > sum) {\n                minSum = sum;\n            }\n            if (sum > 0) {\n                sum = 0;\n            }\n        }\n        return minSum;\n    }\n}", "buggy_solution": "        int minSum = Integer.MIN_VALUE;\n        int sum = 0;\n        for (Integer num : nums) {\n            sum += num;\n            if (minSum > sum) {\n                minSum = sum ;\n            }\n            if (sum > 0) {\n                sum = 0;\n            }\n        }\n        return minSum;\n    }\n}", "bug_type": "function misuse", "failure_symptoms": "incorrect output", "entry_point": "minSubarraySum", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1,\n                s.minSubArraySum(Arrays.asList(-1, -2, -3)) == -6,\n                s.minSubArraySum(Arrays.asList(-1, -2, -3, 2, -10)) == -14,\n                s.minSubArraySum(List.of(-999999999)) == -999999999,\n                s.minSubArraySum(Arrays.asList(0, 10, 20, 1000000)) == 0,\n                s.minSubArraySum(Arrays.asList(-1, -2, -3, 10, -5)) == -6,\n                s.minSubArraySum(Arrays.asList(100, -1, -2, -3, 10, -5)) == -6,\n                s.minSubArraySum(Arrays.asList(10, 11, 13, 8, 3, 4)) == 3,\n                s.minSubArraySum(Arrays.asList(100, -33, 32, -1, 0, -2)) == -33,\n                s.minSubArraySum(List.of(-10)) == -10,\n                s.minSubArraySum(List.of(7)) == 7,\n                s.minSubArraySum(Arrays.asList(1, -1)) == -1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1,\n                s.minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public int minSubArraySum(List<Integer> nums)", "docstring": "Given an array of integers nums, find the minimum sum of any non-empty sub-array\nof nums.\nExample\nminSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\nminSubArraySum(Arrays.asList(-1, -2, -3)) == -6", "instruction": "Write a Java function `public int minSubArraySum(List<Integer> nums)` to solve the following problem:\nGiven an array of integers nums, find the minimum sum of any non-empty sub-array\nof nums.\nExample\nminSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\nminSubArraySum(Arrays.asList(-1, -2, -3)) == -6", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int MIN_SUB_ARRAY_SUM(List<Integer> nums) {\n        int MIN_SUM = Integer.MIN_VALUE;\n        int sum = 0;\n        for (Integer num : nums) {\n            sum += num;\n            if (MIN_SUM > sum) {\n                MIN_SUM = sum ;\n            }\n            if (sum > 0) {\n                sum = 0;\n            }\n        }\n        return MIN_SUM;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.MIN_SUB_ARRAY_SUM(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1,\n                s.MIN_SUB_ARRAY_SUM(Arrays.asList(-1, -2, -3)) == -6,\n                s.MIN_SUB_ARRAY_SUM(Arrays.asList(-1, -2, -3, 2, -10)) == -14,\n                s.MIN_SUB_ARRAY_SUM(List.of(-999999999)) == -999999999,\n                s.MIN_SUB_ARRAY_SUM(Arrays.asList(0, 10, 20, 1000000)) == 0,\n                s.MIN_SUB_ARRAY_SUM(Arrays.asList(-1, -2, -3, 10, -5)) == -6,\n                s.MIN_SUB_ARRAY_SUM(Arrays.asList(100, -1, -2, -3, 10, -5)) == -6,\n                s.MIN_SUB_ARRAY_SUM(Arrays.asList(10, 11, 13, 8, 3, 4)) == 3,\n                s.MIN_SUB_ARRAY_SUM(Arrays.asList(100, -33, 32, -1, 0, -2)) == -33,\n                s.MIN_SUB_ARRAY_SUM(List.of(-10)) == -10,\n                s.MIN_SUB_ARRAY_SUM(List.of(7)) == 7,\n                s.MIN_SUB_ARRAY_SUM(Arrays.asList(1, -1)) == -1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "MIN_SUBARRAY_SUM", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int MIN_SUB_ARRAY_SUM(List<Integer> nums) {\n"}
{"task_id": "Java/115", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n", "canonical_solution": "        int sum = 0;\n        for (List<Integer> arr : grid) {\n            sum += Math.ceil((double) arr.stream().reduce(Integer::sum).get() / capacity);\n        }\n        return sum;\n    }\n}", "buggy_solution": "        int sum = 0;\n        for (List<Integer> arr : grid) {\n            sum += Math.floor((double) arr.stream().reduce(Integer::sum).get() / capacity);\n        }\n        return sum;\n    }\n}", "bug_type": "function misuse", "failure_symptoms": "incorrect output", "entry_point": "maxFill", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.maxFill(Arrays.asList(Arrays.asList(0, 0, 1, 0), Arrays.asList(0, 1, 0, 0), Arrays.asList(1, 1, 1, 1)), 1) == 6,\n                s.maxFill(Arrays.asList(Arrays.asList(0, 0, 1, 1), Arrays.asList(0, 0, 0, 0), Arrays.asList(1, 1, 1, 1), Arrays.asList(0, 1, 1, 1)), 2) == 5,\n                s.maxFill(Arrays.asList(Arrays.asList(0, 0, 0), Arrays.asList(0, 0, 0)), 5) == 0,\n                s.maxFill(Arrays.asList(Arrays.asList(1, 1, 1, 1), Arrays.asList(1, 1, 1, 1)), 2) == 4,\n                s.maxFill(Arrays.asList(Arrays.asList(1, 1, 1, 1), Arrays.asList(1, 1, 1, 1)), 9) == 2\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.maxFill(Arrays.asList(Arrays.asList(0, 0, 1, 0), Arrays.asList(0, 1, 0, 0), Arrays.asList(1, 1, 1, 1)), 1) == 6,\n                s.maxFill(Arrays.asList(Arrays.asList(0, 0, 1, 1), Arrays.asList(0, 0, 0, 0), Arrays.asList(1, 1, 1, 1), Arrays.asList(0, 1, 1, 1)), 2) == 5,\n                s.maxFill(Arrays.asList(Arrays.asList(0, 0, 0), Arrays.asList(0, 0, 0)), 5) == 0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public int maxFill(List<List<Integer>> grid, int capacity)", "docstring": "You are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it,\nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\nExample 1:\nInput:\ngrid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\nbucket_capacity : 1\nOutput: 6\nExample 2:\nInput:\ngrid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\nbucket_capacity : 2\nOutput: 5\nExample 3:\nInput:\ngrid : [[0,0,0], [0,0,0]]\nbucket_capacity : 5\nOutput: 0\nConstraints:\n* all wells have the same length\n* 1 <= grid.length <= 10^2\n* 1 <= grid[:,1].length <= 10^2\n* grid[i][j] -> 0 | 1\n* 1 <= capacity <= 10", "instruction": "Write a Java function `public int maxFill(List<List<Integer>> grid, int capacity)` to solve the following problem:\nYou are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it,\nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\nExample 1:\nInput:\ngrid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\nbucket_capacity : 1\nOutput: 6\nExample 2:\nInput:\ngrid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\nbucket_capacity : 2\nOutput: 5\nExample 3:\nInput:\ngrid : [[0,0,0], [0,0,0]]\nbucket_capacity : 5\nOutput: 0\nConstraints:\n* all wells have the same length\n* 1 <= grid.length <= 10^2\n* 1 <= grid[:,1].length <= 10^2\n* grid[i][j] -> 0 | 1\n* 1 <= capacity <= 10", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int MAX_FILL(List<List<Integer>> grid, int capacity) {\n        int sum = 0;\n        for (List<Integer> arr : grid) {\n            sum += Math.floor((double) arr.stream().reduce(Integer::sum).get() / capacity);\n        }\n        return sum;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.MAX_FILL(Arrays.asList(Arrays.asList(0, 0, 1, 0), Arrays.asList(0, 1, 0, 0), Arrays.asList(1, 1, 1, 1)), 1) == 6,\n                s.MAX_FILL(Arrays.asList(Arrays.asList(0, 0, 1, 1), Arrays.asList(0, 0, 0, 0), Arrays.asList(1, 1, 1, 1), Arrays.asList(0, 1, 1, 1)), 2) == 5,\n                s.MAX_FILL(Arrays.asList(Arrays.asList(0, 0, 0), Arrays.asList(0, 0, 0)), 5) == 0,\n                s.MAX_FILL(Arrays.asList(Arrays.asList(1, 1, 1, 1), Arrays.asList(1, 1, 1, 1)), 2) == 4,\n                s.MAX_FILL(Arrays.asList(Arrays.asList(1, 1, 1, 1), Arrays.asList(1, 1, 1, 1)), 9) == 2\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "MAX_FILL", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int MAX_FILL(List<List<Integer>> grid, int capacity) {\n"}
{"task_id": "Java/116", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortArray(List<Integer> arr) {\n", "canonical_solution": "                List < Integer > sortedArr = new ArrayList<>(arr);\n        sortedArr.sort(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                int cnt1 = (int) Integer.toBinaryString(Math.abs(o1)).chars().filter(ch -> ch == '1').count();\n                int cnt2 = (int) Integer.toBinaryString(Math.abs(o2)).chars().filter(ch -> ch == '1').count();\n                if (cnt1 > cnt2) {\n                    return 1;\n                } else if (cnt1 < cnt2) {\n                    return -1;\n                } else {\n                    return o1.compareTo(o2);\n                }\n            }\n        });\n        return sortedArr;\n    }\n}", "buggy_solution": "                List < Integer > sortedArr = new ArrayList<>(arr);\n        sortedArr.sort(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                int cnt1 = (int) Integer.toBinaryString(Math.abs(o1)).chars().filter(ch -> ch == '1').count();\n                int cnt2 = (int) Integer.toBinaryString(Math.abs(o2)).chars().filter(ch -> ch == '1').count();\n                if (cnt1 > cnt2) {\n                    return 1;\n                } else if (cnt1 < cnt2) {\n                    return -1;\n                } else {\n                    return o1.compareTo(o2);\n                }\n            }\n        });\n        return arr;\n    }\n}", "bug_type": "variable misuse", "failure_symptoms": "incorrect output", "entry_point": "sortArray", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sortArray(new ArrayList<>(Arrays.asList(1, 5, 2, 3, 4))).equals(Arrays.asList(1, 2, 4, 3, 5)),\n                s.sortArray(new ArrayList<>(Arrays.asList(-2, -3, -4, -5, -6))).equals(Arrays.asList(-4, -2, -6, -5, -3)),\n                s.sortArray(new ArrayList<>(Arrays.asList(1, 0, 2, 3, 4))).equals(Arrays.asList(0, 1, 2, 4, 3)),\n                s.sortArray(new ArrayList<>(List.of())).equals(List.of()),\n                s.sortArray(new ArrayList<>(Arrays.asList(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4))).equals(Arrays.asList(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)),\n                s.sortArray(new ArrayList<>(Arrays.asList(3, 6, 44, 12, 32, 5))).equals(Arrays.asList(32, 3, 5, 6, 12, 44)),\n                s.sortArray(new ArrayList<>(Arrays.asList(2, 4, 8, 16, 32))).equals(Arrays.asList(2, 4, 8, 16, 32)),\n                s.sortArray(new ArrayList<>(Arrays.asList(2, 4, 8, 16, 32))).equals(Arrays.asList(2, 4, 8, 16, 32))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sortArray(new ArrayList<>(Arrays.asList(1, 5, 2, 3, 4))).equals(Arrays.asList(1, 2, 4, 3, 5)),\n                s.sortArray(new ArrayList<>(Arrays.asList(-2, -3, -4, -5, -6))).equals(Arrays.asList(-4, -2, -6, -5, -3)),\n                s.sortArray(new ArrayList<>(Arrays.asList(1, 0, 2, 3, 4))).equals(Arrays.asList(0, 1, 2, 4, 3))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<Integer> sortArray(List<Integer> arr)", "docstring": "In this Kata, you have to sort an array of non-negative integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\n<p>\nIt must be implemented like this:\n>>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n>>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n>>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))", "instruction": "Write a Java function `public List<Integer> sortArray(List<Integer> arr)` to solve the following problem:\nIn this Kata, you have to sort an array of non-negative integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\n<p>\nIt must be implemented like this:\n>>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n>>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n>>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> SORT_ARRAY(List<Integer> arr) {\n                List < Integer > SORTED_ARR = new ArrayList<>(arr);\n        SORTED_ARR.sort(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                int cnt1 = (int) Integer.toBinaryString(Math.abs(o1)).chars().filter(ch -> ch == '1').count();\n                int cnt2 = (int) Integer.toBinaryString(Math.abs(o2)).chars().filter(ch -> ch == '1').count();\n                if (cnt1 > cnt2) {\n                    return 1;\n                } else if (cnt1 < cnt2) {\n                    return -1;\n                } else {\n                    return o1.compareTo(o2);\n                }\n            }\n        });\n        return arr;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.SORT_ARRAY(new ArrayList<>(Arrays.asList(1, 5, 2, 3, 4))).equals(Arrays.asList(1, 2, 4, 3, 5)),\n                s.SORT_ARRAY(new ArrayList<>(Arrays.asList(-2, -3, -4, -5, -6))).equals(Arrays.asList(-4, -2, -6, -5, -3)),\n                s.SORT_ARRAY(new ArrayList<>(Arrays.asList(1, 0, 2, 3, 4))).equals(Arrays.asList(0, 1, 2, 4, 3)),\n                s.SORT_ARRAY(new ArrayList<>(List.of())).equals(List.of()),\n                s.SORT_ARRAY(new ArrayList<>(Arrays.asList(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4))).equals(Arrays.asList(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)),\n                s.SORT_ARRAY(new ArrayList<>(Arrays.asList(3, 6, 44, 12, 32, 5))).equals(Arrays.asList(32, 3, 5, 6, 12, 44)),\n                s.SORT_ARRAY(new ArrayList<>(Arrays.asList(2, 4, 8, 16, 32))).equals(Arrays.asList(2, 4, 8, 16, 32)),\n                s.SORT_ARRAY(new ArrayList<>(Arrays.asList(2, 4, 8, 16, 32))).equals(Arrays.asList(2, 4, 8, 16, 32))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "SORT_ARRAY", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> SORT_ARRAY(List<Integer> arr) {\n"}
{"task_id": "Java/117", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> selectWords(String s, int n) {\n", "canonical_solution": "        List<String> result = new ArrayList<>();\n        for (String word : s.split(\" \")) {\n            int nConsonants = 0;\n            for (char c : word.toCharArray()) {\n                c = Character.toLowerCase(c);\n                if (\"aeiou\".indexOf(c) == -1) {\n                    nConsonants += 1;\n                }\n            }\n            if (nConsonants == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}", "buggy_solution": "        List<String> result = new ArrayList<>();\n        for (String word : s.split(\" \")) {\n            int nConsonants = 0;\n            for (char c : word.toCharArray()) {\n                c = Character.toLowerCase(c);\n                if (\"aeiou\".indexOf(c) != -1) {\n                    nConsonants += 1;\n                }\n            }\n            if (nConsonants == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}", "bug_type": "operator misuse", "failure_symptoms": "incorrect output", "entry_point": "selectWords", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.selectWords(\"Mary had a little lamb\", 4).equals(List.of(\"little\" )),\n                s.selectWords(\"Mary had a little lamb\", 3).equals(Arrays.asList(\"Mary\", \"lamb\")),\n                s.selectWords(\"simple white space\", 2).equals(List.of()),\n                s.selectWords(\"Hello world\", 4).equals(List.of(\"world\" )),\n                s.selectWords(\"Uncle sam\", 3).equals(List.of(\"Uncle\" )),\n                s.selectWords(\"\", 4).equals(List.of()),\n                s.selectWords(\"a b c d e f\", 1).equals(Arrays.asList(\"b\", \"c\", \"d\", \"f\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.selectWords(\"Mary had a little lamb\", 4).equals(List.of(\"little\" )),\n                s.selectWords(\"Mary had a little lamb\", 3).equals(Arrays.asList(\"Mary\", \"lamb\")),\n                s.selectWords(\"simple white space\", 2).equals(List.of()),\n                s.selectWords(\"Hello world\", 4).equals(List.of(\"world\" )),\n                s.selectWords(\"Uncle sam\", 3).equals(List.of(\"Uncle\" ))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<String> selectWords(String s, int n)", "docstring": "Given a string s and a natural number n, you have been tasked to implement\na function that returns a list of all words from string s that contain exactly\nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselectWords(\"simple white space\", 2) ==> []\nselectWords(\"Hello world\", 4) ==> [\"world\"]\nselectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]", "instruction": "Write a Java function `public List<String> selectWords(String s, int n)` to solve the following problem:\nGiven a string s and a natural number n, you have been tasked to implement\na function that returns a list of all words from string s that contain exactly\nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselectWords(\"simple white space\", 2) ==> []\nselectWords(\"Hello world\", 4) ==> [\"world\"]\nselectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> SELECT_WORDS(String s, int n) {\n        List<String> result = new ArrayList<>();\n        for (String word : s.split(\" \")) {\n            int N_CONSONANTS = 0;\n            for (char c : word.toCharArray()) {\n                c = Character.toLowerCase(c);\n                if (\"aeiou\".indexOf(c) != -1) {\n                    N_CONSONANTS += 1;\n                }\n            }\n            if (N_CONSONANTS == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.SELECT_WORDS(\"Mary had a little lamb\", 4).equals(List.of(\"little\" )),\n                s.SELECT_WORDS(\"Mary had a little lamb\", 3).equals(Arrays.asList(\"Mary\", \"lamb\")),\n                s.SELECT_WORDS(\"simple white space\", 2).equals(List.of()),\n                s.SELECT_WORDS(\"Hello world\", 4).equals(List.of(\"world\" )),\n                s.SELECT_WORDS(\"Uncle sam\", 3).equals(List.of(\"Uncle\" )),\n                s.SELECT_WORDS(\"\", 4).equals(List.of()),\n                s.SELECT_WORDS(\"a b c d e f\", 1).equals(Arrays.asList(\"b\", \"c\", \"d\", \"f\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "SELECT_WORDS", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> SELECT_WORDS(String s, int n) {\n"}
{"task_id": "Java/118", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String getClosestVowel(String word) {\n", "canonical_solution": "        if (word.length() < 3) {\n            return \"\";\n        }\n\n        String vowels = \"aeiouAEIOU\";\n        for (int i = word.length() - 2; i > 0; i--) {\n            if (vowels.indexOf(word.charAt(i)) != -1 && vowels.indexOf(word.charAt(i + 1)) == -1 && vowels.indexOf(word.charAt(i - 1)) == -1) {\n                return String.valueOf(word.charAt(i));\n            }\n        }\n        return \"\";\n    }\n}", "buggy_solution": "        if (word.length() < 3) {\n            return \" \";\n        }\n\n        String vowels = \"aeiouAEIOU\";\n        for (int i = word.length() - 2; i > 0; i--) {\n            if (vowels.indexOf(word.charAt(i)) != -1 && vowels.indexOf(word.charAt(i + 1)) == -1 && vowels.indexOf(word.charAt(i - 1)) == -1) {\n                return String.valueOf(word.charAt(i));\n            }\n        }\n        return \" \";\n    }\n}", "bug_type": "excess logic", "failure_symptoms": "incorrect output", "entry_point": "getClosestVowel", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.getClosestVowel(\"yogurt\").equals(\"u\"),\n                s.getClosestVowel(\"full\").equals(\"u\"),\n                s.getClosestVowel(\"easy\").equals(\"\"),\n                s.getClosestVowel(\"eAsy\").equals(\"\"),\n                s.getClosestVowel(\"ali\").equals(\"\"),\n                s.getClosestVowel(\"bad\").equals(\"a\"),\n                s.getClosestVowel(\"most\").equals(\"o\"),\n                s.getClosestVowel(\"ab\").equals(\"\"),\n                s.getClosestVowel(\"ba\").equals(\"\"),\n                s.getClosestVowel(\"quick\").equals(\"\"),\n                s.getClosestVowel(\"anime\").equals(\"i\"),\n                s.getClosestVowel(\"Asia\").equals(\"\"),\n                s.getClosestVowel(\"Above\").equals(\"o\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.getClosestVowel(\"yogurt\").equals(\"u\"),\n                s.getClosestVowel(\"FULL\").equals(\"U\"),\n                s.getClosestVowel(\"ab\").equals(\"\"),\n                s.getClosestVowel(\"quick\").equals(\"\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public String getClosestVowel(String word)", "docstring": "You are given a word. Your task is to find the closest vowel that stands between\ntwo consonants from the right side of the word (case sensitive).\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition.\nYou may assume that the given string contains English letter only.\nExample:\ngetClosestVowel(\"yogurt\") ==> \"u\"\ngetClosestVowel(\"FULL\") ==> \"U\"\ngetClosestVowel(\"quick\") ==> \"\"\ngetClosestVowel(\"ab\") ==> \"\"", "instruction": "Write a Java function `public String getClosestVowel(String word)` to solve the following problem:\nYou are given a word. Your task is to find the closest vowel that stands between\ntwo consonants from the right side of the word (case sensitive).\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition.\nYou may assume that the given string contains English letter only.\nExample:\ngetClosestVowel(\"yogurt\") ==> \"u\"\ngetClosestVowel(\"FULL\") ==> \"U\"\ngetClosestVowel(\"quick\") ==> \"\"\ngetClosestVowel(\"ab\") ==> \"\"", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String GET_CLOSEST_VOWEL(String word) {\n        if (word.length() < 3) {\n            return \" \";\n        }\n\n        String vowels = \"aeiouAEIOU\";\n        for (int i = word.length() - 2; i > 0; i--) {\n            if (vowels.indexOf(word.charAt(i)) != -1 && vowels.indexOf(word.charAt(i + 1)) == -1 && vowels.indexOf(word.charAt(i - 1)) == -1) {\n                return String.valueOf(word.charAt(i));\n            }\n        }\n        return \" \";\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.GET_CLOSEST_VOWEL(\"yogurt\").equals(\"u\"),\n                s.GET_CLOSEST_VOWEL(\"full\").equals(\"u\"),\n                s.GET_CLOSEST_VOWEL(\"easy\").equals(\"\"),\n                s.GET_CLOSEST_VOWEL(\"eAsy\").equals(\"\"),\n                s.GET_CLOSEST_VOWEL(\"ali\").equals(\"\"),\n                s.GET_CLOSEST_VOWEL(\"bad\").equals(\"a\"),\n                s.GET_CLOSEST_VOWEL(\"most\").equals(\"o\"),\n                s.GET_CLOSEST_VOWEL(\"ab\").equals(\"\"),\n                s.GET_CLOSEST_VOWEL(\"ba\").equals(\"\"),\n                s.GET_CLOSEST_VOWEL(\"quick\").equals(\"\"),\n                s.GET_CLOSEST_VOWEL(\"anime\").equals(\"i\"),\n                s.GET_CLOSEST_VOWEL(\"Asia\").equals(\"\"),\n                s.GET_CLOSEST_VOWEL(\"Above\").equals(\"o\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "GET_CLOSEST_VOWEL", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String GET_CLOSEST_VOWEL(String word) {\n"}
{"task_id": "Java/119", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String matchParens(List<String> lst) {\n", "canonical_solution": "        List<String> S = Arrays.asList(lst.get(0) + lst.get(1), lst.get(1) + lst.get(0));\n        for (String s : S) {\n            int val = 0;\n            for (char i : s.toCharArray()) {\n                if (i == '(') {\n                    val += 1;\n                } else {\n                    val -= 1;\n                }\n                if (val < 0) {\n                    break;\n                }\n            }\n            if (val == 0) {\n                return \"Yes\";\n            }\n        }\n        return \"No\";\n    }\n}", "buggy_solution": "        List<String> S = Arrays.asList(lst.get(0) + lst.get(1), lst.get(1) + lst.get(0));\n        for (String s : S) {\n            int val = 0;\n            for (char i : s.toCharArray()) {\n                if (i == '(') {\n                    val += 1;\n                } else {\n                    val -= 1;\n                }\n                if (val < 0) {\n                    break;\n                }\n            }\n            if (val == 0) {\n                return \"yes\";\n            }\n        }\n        return \"no\";\n    }\n}", "bug_type": "value misuse", "failure_symptoms": "incorrect output", "entry_point": "matchParens", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.matchParens(Arrays.asList(\"()(\", \")\")).equals(\"Yes\"),\n                s.matchParens(Arrays.asList(\")\", \")\")).equals(\"No\"),\n                s.matchParens(Arrays.asList(\"(()(())\", \"())())\")).equals(\"No\"),\n                s.matchParens(Arrays.asList(\")())\", \"(()()(\")).equals(\"Yes\"),\n                s.matchParens(Arrays.asList(\"(())))\", \"(()())((\")).equals(\"Yes\"),\n                s.matchParens(Arrays.asList(\"()\", \"())\")).equals(\"No\"),\n                s.matchParens(Arrays.asList(\"(()(\", \"()))()\")).equals(\"Yes\"),\n                s.matchParens(Arrays.asList(\"((((\", \"((())\")).equals(\"No\"),\n                s.matchParens(Arrays.asList(\")(()\", \"(()(\")).equals(\"No\"),\n                s.matchParens(Arrays.asList(\")(\", \")(\")).equals(\"No\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.matchParens(Arrays.asList(\"()(\", \")\")).equals(\"Yes\"),\n                s.matchParens(Arrays.asList(\")\", \")\")).equals(\"No\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public String matchParens(List<String> lst)", "docstring": "You are given a list of two strings, both strings consist of open\nparentheses \"(\" or close parentheses \")\" only.\nYour job is to check if it is possible to concatenate the two strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\nExamples:\nmatchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\nmatchParens(Arrays.asList(\")\", \")\")) == \"No\"", "instruction": "Write a Java function `public String matchParens(List<String> lst)` to solve the following problem:\nYou are given a list of two strings, both strings consist of open\nparentheses \"(\" or close parentheses \")\" only.\nYour job is to check if it is possible to concatenate the two strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\nExamples:\nmatchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\nmatchParens(Arrays.asList(\")\", \")\")) == \"No\"", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String MATCH_PARENS(List<String> lst) {\n        List<String> S = Arrays.asList(lst.get(0) + lst.get(1), lst.get(1) + lst.get(0));\n        for (String s : S) {\n            int val = 0;\n            for (char i : s.toCharArray()) {\n                if (i == '(') {\n                    val += 1;\n                } else {\n                    val -= 1;\n                }\n                if (val < 0) {\n                    break;\n                }\n            }\n            if (val == 0) {\n                return \"yes\";\n            }\n        }\n        return \"no\";\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.MATCH_PARENS(Arrays.asList(\"()(\", \")\")).equals(\"Yes\"),\n                s.MATCH_PARENS(Arrays.asList(\")\", \")\")).equals(\"No\"),\n                s.MATCH_PARENS(Arrays.asList(\"(()(())\", \"())())\")).equals(\"No\"),\n                s.MATCH_PARENS(Arrays.asList(\")())\", \"(()()(\")).equals(\"Yes\"),\n                s.MATCH_PARENS(Arrays.asList(\"(())))\", \"(()())((\")).equals(\"Yes\"),\n                s.MATCH_PARENS(Arrays.asList(\"()\", \"())\")).equals(\"No\"),\n                s.MATCH_PARENS(Arrays.asList(\"(()(\", \"()))()\")).equals(\"Yes\"),\n                s.MATCH_PARENS(Arrays.asList(\"((((\", \"((())\")).equals(\"No\"),\n                s.MATCH_PARENS(Arrays.asList(\")(()\", \"(()(\")).equals(\"No\"),\n                s.MATCH_PARENS(Arrays.asList(\")(\", \")(\")).equals(\"No\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "MATCH_PARENS", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String MATCH_PARENS(List<String> lst) {\n"}
{"task_id": "Java/120", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n", "canonical_solution": "        if (k == 0) {\n            return List.of();\n        }\n        List<Integer> arrSort = new ArrayList<>(arr);\n        Collections.sort(arrSort);\n        return arrSort.subList(arrSort.size() - k, arrSort.size());\n    }\n}", "buggy_solution": "        if (k == 0) {\n            return List.of();\n        }\n        List<Integer> arrSort = new ArrayList<>(arr);\n        Collections.sort(arrSort);\n        return arrSort.subList(arrSort.size() - k, arrSort.size()).subList(0, 1);\n    }\n}", "bug_type": "excess logic", "failure_symptoms": "incorrect output", "entry_point": "maximum", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.maximum(new ArrayList<>(Arrays.asList(-3, -4, 5)), 3).equals(Arrays.asList(-4, -3, 5)),\n                s.maximum(new ArrayList<>(Arrays.asList(4, -4, 4)), 2).equals(Arrays.asList(4, 4)),\n                s.maximum(new ArrayList<>(Arrays.asList(-3, 2, 1, 2, -1, -2, 1)), 1).equals(List.of(2)),\n                s.maximum(new ArrayList<>(Arrays.asList(123, -123, 20, 0 , 1, 2, -3)), 3).equals(Arrays.asList(2, 20, 123)),\n                s.maximum(new ArrayList<>(Arrays.asList(-123, 20, 0 , 1, 2, -3)), 4).equals(Arrays.asList(0, 1, 2, 20)),\n                s.maximum(new ArrayList<>(Arrays.asList(5, 15, 0, 3, -13, -8, 0)), 7).equals(Arrays.asList(-13, -8, 0, 0, 3, 5, 15)),\n                s.maximum(new ArrayList<>(Arrays.asList(-1, 0, 2, 5, 3, -10)), 2).equals(Arrays.asList(3, 5)),\n                s.maximum(new ArrayList<>(Arrays.asList(1, 0, 5, -7)), 1).equals(List.of(5)),\n                s.maximum(new ArrayList<>(Arrays.asList(4, -4)), 2).equals(Arrays.asList(-4, 4)),\n                s.maximum(new ArrayList<>(Arrays.asList(-10, 10)), 2).equals(Arrays.asList(-10, 10))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.maximum(new ArrayList<>(Arrays.asList(-3, -4, 5)), 3).equals(Arrays.asList(-4, -3, 5)),\n                s.maximum(new ArrayList<>(Arrays.asList(4, -4, 4)), 2).equals(Arrays.asList(4, 4)),\n                s.maximum(new ArrayList<>(Arrays.asList(-3, 2, 1, 2, -1, -2, 1)), 1).equals(List.of(2))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<Integer> maximum(List<Integer> arr, int k)", "docstring": "Given an array arr of integers and a positive integer k, return a sorted list\nof length k with the maximum k numbers in arr.\nExample 1:\nInput: arr = [-3, -4, 5], k = 3\nOutput: [-4, -3, 5]\nExample 2:\nInput: arr = [4, -4, 4], k = 2\nOutput: [4, 4]\nExample 3:\nInput: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\nOutput: [2]\nNote:\n1. The length of the array will be in the range of [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n3. 0 <= k <= len(arr)", "instruction": "Write a Java function `public List<Integer> maximum(List<Integer> arr, int k)` to solve the following problem:\nGiven an array arr of integers and a positive integer k, return a sorted list\nof length k with the maximum k numbers in arr.\nExample 1:\nInput: arr = [-3, -4, 5], k = 3\nOutput: [-4, -3, 5]\nExample 2:\nInput: arr = [4, -4, 4], k = 2\nOutput: [4, 4]\nExample 3:\nInput: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\nOutput: [2]\nNote:\n1. The length of the array will be in the range of [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n3. 0 <= k <= len(arr)", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return List.of();\n        }\n        List<Integer> ARR_SORT = new ArrayList<>(arr);\n        Collections.sort(ARR_SORT);\n        return ARR_SORT.subList(ARR_SORT.size() - k, ARR_SORT.size()).subList(0, 1);\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.maximum(new ArrayList<>(Arrays.asList(-3, -4, 5)), 3).equals(Arrays.asList(-4, -3, 5)),\n                s.maximum(new ArrayList<>(Arrays.asList(4, -4, 4)), 2).equals(Arrays.asList(4, 4)),\n                s.maximum(new ArrayList<>(Arrays.asList(-3, 2, 1, 2, -1, -2, 1)), 1).equals(List.of(2)),\n                s.maximum(new ArrayList<>(Arrays.asList(123, -123, 20, 0 , 1, 2, -3)), 3).equals(Arrays.asList(2, 20, 123)),\n                s.maximum(new ArrayList<>(Arrays.asList(-123, 20, 0 , 1, 2, -3)), 4).equals(Arrays.asList(0, 1, 2, 20)),\n                s.maximum(new ArrayList<>(Arrays.asList(5, 15, 0, 3, -13, -8, 0)), 7).equals(Arrays.asList(-13, -8, 0, 0, 3, 5, 15)),\n                s.maximum(new ArrayList<>(Arrays.asList(-1, 0, 2, 5, 3, -10)), 2).equals(Arrays.asList(3, 5)),\n                s.maximum(new ArrayList<>(Arrays.asList(1, 0, 5, -7)), 1).equals(List.of(5)),\n                s.maximum(new ArrayList<>(Arrays.asList(4, -4)), 2).equals(Arrays.asList(-4, 4)),\n                s.maximum(new ArrayList<>(Arrays.asList(-10, 10)), 2).equals(Arrays.asList(-10, 10))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "maximum", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n"}
{"task_id": "Java/122", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int addElements(List<Integer> arr, int k) {\n", "canonical_solution": "        arr = arr.subList(0, k);\n        Optional<Integer> sum = arr.stream().filter(p -> String.valueOf(Math.abs(p)).length() <= 2).reduce(Integer::sum);\n        return sum.orElse(0);\n    }\n}", "buggy_solution": "        Optional<Integer> sum = arr.stream().filter(p -> String.valueOf(Math.abs(p)).length() <= 2).reduce(Integer::sum);\n        return sum.orElse(0);\n    }\n}", "bug_type": "missing logic", "failure_symptoms": "incorrect output", "entry_point": "addElements", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.addElements(Arrays.asList(1, -2, -3, 41, 57, 76, 87, 88, 99), 3) == -4,\n                s.addElements(Arrays.asList(111, 121, 3, 4000, 5, 6), 2) == 0,\n                s.addElements(Arrays.asList(11, 21, 3, 90, 5, 6, 7, 8, 9), 4) == 125,\n                s.addElements(Arrays.asList(111, 21, 3, 4000, 5, 6, 7, 8, 9), 4) == 24,\n                s.addElements(Arrays.asList(1), 1) == 1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.addElements(Arrays.asList(111, 21, 3, 4000, 5, 6, 7, 8, 9), 4) == 24\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public int addElements(List<Integer> arr, int k)", "docstring": "Given a non-empty array of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elements of arr.\nExample:\nInput: arr = [111,21,3,4000,5,6,7,8,9], k = 4\nOutput: 24 # sum of 21 + 3\nConstraints:\n1. 1 <= len(arr) <= 100\n2. 1 <= k <= len(arr)", "instruction": "Write a Java function `public int addElements(List<Integer> arr, int k)` to solve the following problem:\nGiven a non-empty array of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elements of arr.\nExample:\nInput: arr = [111,21,3,4000,5,6,7,8,9], k = 4\nOutput: 24 # sum of 21 + 3\nConstraints:\n1. 1 <= len(arr) <= 100\n2. 1 <= k <= len(arr)", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int ADD_ELEMENTS(List<Integer> arr, int k) {\n        Optional<Integer> sum = arr.stream().filter(p -> String.valueOf(Math.abs(p)).length() <= 2).reduce(Integer::sum);\n        return sum.orElse(0);\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.ADD_ELEMENTS(Arrays.asList(1, -2, -3, 41, 57, 76, 87, 88, 99), 3) == -4,\n                s.ADD_ELEMENTS(Arrays.asList(111, 121, 3, 4000, 5, 6), 2) == 0,\n                s.ADD_ELEMENTS(Arrays.asList(11, 21, 3, 90, 5, 6, 7, 8, 9), 4) == 125,\n                s.ADD_ELEMENTS(Arrays.asList(111, 21, 3, 4000, 5, 6, 7, 8, 9), 4) == 24,\n                s.ADD_ELEMENTS(Arrays.asList(1), 1) == 1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "ADD_ELEMENTS", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int ADD_ELEMENTS(List<Integer> arr, int k) {\n"}
{"task_id": "Java/123", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> getOddCollatz(int n) {\n", "canonical_solution": "        List<Integer> oddCollatz = new ArrayList<>();\n        if (n % 2 == 1) {\n            oddCollatz.add(n);\n        }\n        while (n > 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = n * 3 + 1;\n            }\n            if (n % 2 == 1) {\n                oddCollatz.add(n);\n            }\n        }\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}", "buggy_solution": "        List<Integer> oddCollatz = new ArrayList<>();\n        if (n % 2 == 1) {\n            oddCollatz.add(n);\n        }\n        while (n > 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = n * 2 + 1;\n            }\n            if (n % 2 == 1) {\n                oddCollatz.add(n);\n            }\n        }\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}", "bug_type": "value misuse", "failure_symptoms": "incorrect output", "entry_point": "getOddCollatz", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.getOddCollatz(14).equals(Arrays.asList(1, 5, 7, 11, 13, 17)),\n                s.getOddCollatz(5).equals(Arrays.asList(1, 5)),\n                s.getOddCollatz(12).equals(Arrays.asList(1, 3, 5)),\n                s.getOddCollatz(1).equals(List.of(1))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.getOddCollatz(5).equals(Arrays.asList(1, 5))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<Integer> getOddCollatz(int n)", "docstring": "Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the\nprevious term as follows: if the previous term is even, the next term is one half of\nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\nNote:\n1. Collatz(1) is [1].\n2. returned list sorted in increasing order.\nFor example:\ngetOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.", "instruction": "Write a Java function `public List<Integer> getOddCollatz(int n)` to solve the following problem:\nGiven a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the\nprevious term as follows: if the previous term is even, the next term is one half of\nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\nNote:\n1. Collatz(1) is [1].\n2. returned list sorted in increasing order.\nFor example:\ngetOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> GET_ODD_COLLATZ(int n) {\n        List<Integer> ODD_COLLATZ = new ArrayList<>();\n        if (n % 2 == 1) {\n            ODD_COLLATZ.add(n);\n        }\n        while (n > 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = n * 2 + 1;\n            }\n            if (n % 2 == 1) {\n                ODD_COLLATZ.add(n);\n            }\n        }\n        Collections.sort(ODD_COLLATZ);\n        return ODD_COLLATZ;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.GET_ODD_COLLATZ(14).equals(Arrays.asList(1, 5, 7, 11, 13, 17)),\n                s.GET_ODD_COLLATZ(5).equals(Arrays.asList(1, 5)),\n                s.GET_ODD_COLLATZ(12).equals(Arrays.asList(1, 3, 5)),\n                s.GET_ODD_COLLATZ(1).equals(List.of(1))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "GET_ODD_COLLATZ", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> GET_ODD_COLLATZ(int n) {\n"}
{"task_id": "Java/124", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean validDate(String date) {\n", "canonical_solution": "        try {\n            date = date.strip();\n            String[] dates = date.split(\"-\" );\n            String m = dates[0];\n            while (!m.isEmpty() && m.charAt(0) == '0') {\n                m = m.substring(1);\n            }\n            String d = dates[1];\n            while (!d.isEmpty() && d.charAt(0) == '0') {\n                d = d.substring(1);\n            }\n            String y = dates[2];\n            while (!y.isEmpty() && y.charAt(0) == '0') {\n                y = y.substring(1);\n            }\n            int month = Integer.parseInt(m), day = Integer.parseInt(d), year = Integer.parseInt(y);\n            if (month < 1 || month > 12) {\n                return false;\n            }\n            if (Arrays.asList(1, 3, 5, 7, 8, 10, 12).contains(month) && (day < 1 || day > 31)) {\n                return false;\n            }\n            if (Arrays.asList(4, 6, 9, 11).contains(month) && (day < 1 || day > 30)) {\n                return false;\n            }\n            if (month == 2 && (day < 1 || day > 29)) {\n                return false;\n            }\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n}", "buggy_solution": "        try {\n            date = date.strip();\n            String[] dates = date.split(\"-\" );\n            String m = dates[1];\n            while (!m.isEmpty() && m.charAt(0) == '0') {\n                m = m.substring(1);\n            }\n            String d = dates[0];\n            while (!d.isEmpty() && d.charAt(0) == '0') {\n                d = d.substring(1);\n            }\n            String y = dates[2];\n            while (!y.isEmpty() && y.charAt(0) == '0') {\n                y = y.substring(1);\n            }\n            int month = Integer.parseInt(m), day = Integer.parseInt(d), year = Integer.parseInt(y);\n            if (month < 1 || month > 12) {\n                return false;\n            }\n            if (Arrays.asList(1, 3, 5, 7, 8, 10, 12).contains(month) && (day < 1 || day > 31)) {\n                return false;\n            }\n            if (Arrays.asList(4, 6, 9, 11).contains(month) && (day < 1 || day > 30)) {\n                return false;\n            }\n            if (month == 2 && (day < 1 || day > 29)) {\n                return false;\n            }\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n}", "bug_type": "variable misuse", "failure_symptoms": "incorrect output", "entry_point": "validDate", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.validDate(\"03-11-2000\" ) == true,\n                s.validDate(\"15-01-2012\" ) == false,\n                s.validDate(\"04-0-2040\" ) == false,\n                s.validDate(\"06-04-2020\" ) == true,\n                s.validDate(\"01-01-2007\" ) == true,\n                s.validDate(\"03-32-2011\" ) == false,\n                s.validDate(\"\" ) == false,\n                s.validDate(\"04-31-3000\" ) == false,\n                s.validDate(\"06-06-2005\" ) == true,\n                s.validDate(\"21-31-2000\" ) == false,\n                s.validDate(\"04-12-2003\" ) == true,\n                s.validDate(\"04122003\" ) == false,\n                s.validDate(\"20030412\" ) == false,\n                s.validDate(\"2003-04\" ) == false,\n                s.validDate(\"2003-04-12\" ) == false,\n                s.validDate(\"04-2003\" ) == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.validDate(\"03-11-2000\" ) == true,\n                s.validDate(\"15-01-2012\" ) == false,\n                s.validDate(\"04-0-2040\" ) == false,\n                s.validDate(\"06-04-2020\" ) == true,\n                s.validDate(\"06/04/2020\" ) == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public boolean validDate(String date)", "docstring": "You have to write a function which validates a given date string and\nreturns true if the date is valid otherwise false.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\nfor example:\nvalidDate(\"03-11-2000\") => true\nvalidDate(\"15-01-2012\") => false\nvalidDate(\"04-0-2040\") => false\nvalidDate(\"06-04-2020\") => true\nvalidDate(\"06/04/2020\") => false", "instruction": "Write a Java function `public boolean validDate(String date)` to solve the following problem:\nYou have to write a function which validates a given date string and\nreturns true if the date is valid otherwise false.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\nfor example:\nvalidDate(\"03-11-2000\") => true\nvalidDate(\"15-01-2012\") => false\nvalidDate(\"04-0-2040\") => false\nvalidDate(\"06-04-2020\") => true\nvalidDate(\"06/04/2020\") => false", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean VALID_DATE(String date) {\n        try {\n            date = date.strip();\n            String[] dates = date.split(\"-\" );\n            String m = dates[1];\n            while (!m.isEmpty() && m.charAt(0) == '0') {\n                m = m.substring(1);\n            }\n            String d = dates[0];\n            while (!d.isEmpty() && d.charAt(0) == '0') {\n                d = d.substring(1);\n            }\n            String y = dates[2];\n            while (!y.isEmpty() && y.charAt(0) == '0') {\n                y = y.substring(1);\n            }\n            int month = Integer.parseInt(m), day = Integer.parseInt(d), year = Integer.parseInt(y);\n            if (month < 1 || month > 12) {\n                return false;\n            }\n            if (Arrays.asList(1, 3, 5, 7, 8, 10, 12).contains(month) && (day < 1 || day > 31)) {\n                return false;\n            }\n            if (Arrays.asList(4, 6, 9, 11).contains(month) && (day < 1 || day > 30)) {\n                return false;\n            }\n            if (month == 2 && (day < 1 || day > 29)) {\n                return false;\n            }\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.VALID_DATE(\"03-11-2000\" ) == true,\n                s.VALID_DATE(\"15-01-2012\" ) == false,\n                s.VALID_DATE(\"04-0-2040\" ) == false,\n                s.VALID_DATE(\"06-04-2020\" ) == true,\n                s.VALID_DATE(\"01-01-2007\" ) == true,\n                s.VALID_DATE(\"03-32-2011\" ) == false,\n                s.VALID_DATE(\"\" ) == false,\n                s.VALID_DATE(\"04-31-3000\" ) == false,\n                s.VALID_DATE(\"06-06-2005\" ) == true,\n                s.VALID_DATE(\"21-31-2000\" ) == false,\n                s.VALID_DATE(\"04-12-2003\" ) == true,\n                s.VALID_DATE(\"04122003\" ) == false,\n                s.VALID_DATE(\"20030412\" ) == false,\n                s.VALID_DATE(\"2003-04\" ) == false,\n                s.VALID_DATE(\"2003-04-12\" ) == false,\n                s.VALID_DATE(\"04-2003\" ) == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "VALID_DATE", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean VALID_DATE(String date) {\n"}
{"task_id": "Java/125", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object splitWords(String txt) {\n", "canonical_solution": "        if (txt.contains(\" \" )) {\n            return Arrays.asList(txt.split(\" \" ));\n        } else if (txt.contains(\",\" )) {\n            return Arrays.asList(txt.split(\"[,\\\\s]\" ));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 == 1) {\n                    count += 1;\n                }\n            }\n            return count;\n        }\n    }\n}", "buggy_solution": "        if (txt.contains(\" \" )) {\n            return Arrays.asList(txt.split(\",\" ));\n        } else if (txt.contains(\",\" )) {\n            return Arrays.asList(txt.split(\"[,\\\\s]\" ));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 == 1) {\n                    count += 1;\n                }\n            }\n            return count;\n        }\n    }\n}", "bug_type": "value misuse", "failure_symptoms": "incorrect output", "entry_point": "splitWords", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.splitWords(\"Hello world!\" ), Arrays.asList(\"Hello\", \"world!\" )),\n                Objects.equals(s.splitWords(\"Hello,world!\" ), Arrays.asList(\"Hello\", \"world!\" )),\n                Objects.equals(s.splitWords(\"Hello world,!\" ), Arrays.asList(\"Hello\", \"world,!\" )),\n                Objects.equals(s.splitWords(\"Hello,Hello,world !\" ), Arrays.asList(\"Hello,Hello,world\", \"!\" )),\n                Objects.equals(s.splitWords(\"abcdef\" ), 3),\n                Objects.equals(s.splitWords(\"aaabb\" ), 2),\n                Objects.equals(s.splitWords(\"aaaBb\" ), 1),\n                Objects.equals(s.splitWords(\"\" ), 0)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.splitWords(\"Hello world!\" ), Arrays.asList(\"Hello\", \"world!\" )),\n                Objects.equals(s.splitWords(\"Hello,world!\" ), Arrays.asList(\"Hello\", \"world!\" )),\n                Objects.equals(s.splitWords(\"abcdef\" ), 3)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public Object splitWords(String txt)", "docstring": "Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\nshould split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\nsplitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\nsplitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\nsplitWords(\"abcdef\") == 3", "instruction": "Write a Java function `public Object splitWords(String txt)` to solve the following problem:\nGiven a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\nshould split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\nsplitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\nsplitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\nsplitWords(\"abcdef\") == 3", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object SPLIT_WORDS(String txt) {\n        if (txt.contains(\" \" )) {\n            return Arrays.asList(txt.split(\",\" ));\n        } else if (txt.contains(\",\" )) {\n            return Arrays.asList(txt.split(\"[,\\\\s]\" ));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 == 1) {\n                    count += 1;\n                }\n            }\n            return count;\n        }\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.SPLIT_WORDS(\"Hello world!\" ), Arrays.asList(\"Hello\", \"world!\" )),\n                Objects.equals(s.SPLIT_WORDS(\"Hello,world!\" ), Arrays.asList(\"Hello\", \"world!\" )),\n                Objects.equals(s.SPLIT_WORDS(\"Hello world,!\" ), Arrays.asList(\"Hello\", \"world,!\" )),\n                Objects.equals(s.SPLIT_WORDS(\"Hello,Hello,world !\" ), Arrays.asList(\"Hello,Hello,world\", \"!\" )),\n                Objects.equals(s.SPLIT_WORDS(\"abcdef\" ), 3),\n                Objects.equals(s.SPLIT_WORDS(\"aaabb\" ), 2),\n                Objects.equals(s.SPLIT_WORDS(\"aaaBb\" ), 1),\n                Objects.equals(s.SPLIT_WORDS(\"\" ), 0)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "SPLIT_WORDS", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object SPLIT_WORDS(String txt) {\n"}
{"task_id": "Java/126", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isSorted(List<Integer> lst) {\n", "canonical_solution": "        List<Integer> sortedLst = new ArrayList<>(lst);\n        Collections.sort(sortedLst);\n        if (!lst.equals(sortedLst)) {\n            return false;\n        }\n        for (int i = 0; i < lst.size() - 2; i++) {\n            if (lst.get(i) == lst.get(i + 1) && lst.get(i) == lst.get(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "buggy_solution": "        List<Integer> sortedLst = new ArrayList<>(lst);\n        Collections.sort(sortedLst);\n        if (!lst.equals(sortedLst)) {\n            return false;\n        }\n        for (int i = 0; i < lst.size() - 2; i++) {\n            if (lst.get(i) == lst.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "bug_type": "missing logic", "failure_symptoms": "incorrect output", "entry_point": "isSorted", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.isSorted(new ArrayList<>(List.of(5))) == true,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5))) == true,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 3, 2, 4, 5))) == false,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6))) == true,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7))) == true,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 3, 2, 4, 5, 6, 7))) == false,\n                s.isSorted(new ArrayList<>(List.of())) == true,\n                s.isSorted(new ArrayList<>(List.of(1))) == true,\n                s.isSorted(new ArrayList<>(Arrays.asList(3, 2, 1))) == false,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 2, 2, 2, 3, 4))) == false,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 2, 3, 3, 3, 4))) == false,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 2, 2, 3, 3, 4))) == true,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 2, 3, 4))) == true\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.isSorted(new ArrayList<>(List.of(5))) == true,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5))) == true,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 3, 2, 4, 5))) == false,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6))) == true,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7))) == true,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 3, 2, 4, 5, 6, 7))) == false,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 2, 2, 2, 3, 4))) == false,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 2, 2, 3, 3, 4))) == true\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public boolean isSorted(List<Integer> lst)", "docstring": "Given a list of numbers, return whether or not they are sorted\nin ascending order. If list has more than 1 duplicate of the same\nnumber, return false. Assume no negative numbers and only integers.\nExamples\nisSorted(Arrays.asList(5)) -> true\nisSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\nisSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\nisSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\nisSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\nisSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\nisSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\nisSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false", "instruction": "Write a Java function `public boolean isSorted(List<Integer> lst)` to solve the following problem:\nGiven a list of numbers, return whether or not they are sorted\nin ascending order. If list has more than 1 duplicate of the same\nnumber, return false. Assume no negative numbers and only integers.\nExamples\nisSorted(Arrays.asList(5)) -> true\nisSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\nisSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\nisSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\nisSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\nisSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\nisSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\nisSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean IS_SORTED(List<Integer> lst) {\n        List<Integer> SORTED_LST = new ArrayList<>(lst);\n        Collections.sort(SORTED_LST);\n        if (!lst.equals(SORTED_LST)) {\n            return false;\n        }\n        for (int i = 0; i < lst.size() - 2; i++) {\n            if (lst.get(i) == lst.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.IS_SORTED(new ArrayList<>(List.of(5))) == true,\n                s.IS_SORTED(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5))) == true,\n                s.IS_SORTED(new ArrayList<>(Arrays.asList(1, 3, 2, 4, 5))) == false,\n                s.IS_SORTED(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6))) == true,\n                s.IS_SORTED(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7))) == true,\n                s.IS_SORTED(new ArrayList<>(Arrays.asList(1, 3, 2, 4, 5, 6, 7))) == false,\n                s.IS_SORTED(new ArrayList<>(List.of())) == true,\n                s.IS_SORTED(new ArrayList<>(List.of(1))) == true,\n                s.IS_SORTED(new ArrayList<>(Arrays.asList(3, 2, 1))) == false,\n                s.IS_SORTED(new ArrayList<>(Arrays.asList(1, 2, 2, 2, 3, 4))) == false,\n                s.IS_SORTED(new ArrayList<>(Arrays.asList(1, 2, 3, 3, 3, 4))) == false,\n                s.IS_SORTED(new ArrayList<>(Arrays.asList(1, 2, 2, 3, 3, 4))) == true,\n                s.IS_SORTED(new ArrayList<>(Arrays.asList(1, 2, 3, 4))) == true\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "IS_SORTED", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean IS_SORTED(List<Integer> lst) {\n"}
{"task_id": "Java/128", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n", "canonical_solution": "        if (arr.size() == 0) {\n            return Optional.empty();\n        }\n        if (arr.contains(0)) {\n            return Optional.of(0);\n        }\n        int prod = (int) (-2 * (arr.stream().filter(p -> p < 0).count() % 2) + 1);\n        return Optional.of(prod * (arr.stream().map(Math::abs).reduce(Integer::sum)).get());\n    }\n}", "buggy_solution": "        if (arr.size() == 0) {\n            return Optional.empty();\n        }\n        if (arr.contains(0)) {\n            return Optional.of(0);\n        }\n        int prod = (int) (-2 * (arr.stream().filter(p -> p < 0).count() % 2) + 1 * 2);\n        return Optional.of(prod * (arr.stream().map(Math::abs).reduce(Integer::sum)).get());\n    }\n}", "bug_type": "excess logic", "failure_symptoms": "incorrect output", "entry_point": "prodSigns", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.prodSigns(Arrays.asList(1, 2, 2, -4)).get() == -9,\n                s.prodSigns(Arrays.asList(0, 1)).get() == 0,\n                s.prodSigns(Arrays.asList(1, 1, 1, 2, 3, -1, 1)).get() == -10,\n                s.prodSigns(List.of()).isEmpty(),\n                s.prodSigns(Arrays.asList(2, 4,1, 2, -1, -1, 9)).get() == 20,\n                s.prodSigns(Arrays.asList(-1, 1, -1, 1)).get() == 4,\n                s.prodSigns(Arrays.asList(-1, 1, 1, 1)).get() == -4,\n                s.prodSigns(Arrays.asList(-1, 1, 1, 0)).get() == 0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.prodSigns(Arrays.asList(1, 2, 2, -4)).get() == -9,\n                s.prodSigns(Arrays.asList(0, 1)).get() == 0,\n                s.prodSigns(List.of()).isEmpty()\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public Optional<Integer> prodSigns(List<Integer> arr)", "docstring": "You are given an array arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the array, represented by 1, -1 or 0.\nNote: return None for empty arr.\nExample:\n>>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n>>> prodSigns(Arrays.asList(0, 1)) == 0\n>>> prodSigns(Arrays.asList()) == None", "instruction": "Write a Java function `public Optional<Integer> prodSigns(List<Integer> arr)` to solve the following problem:\nYou are given an array arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the array, represented by 1, -1 or 0.\nNote: return None for empty arr.\nExample:\n>>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n>>> prodSigns(Arrays.asList(0, 1)) == 0\n>>> prodSigns(Arrays.asList()) == None", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> PROD_SIGNS(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return Optional.empty();\n        }\n        if (arr.contains(0)) {\n            return Optional.of(0);\n        }\n        int prod = (int) (-2 * (arr.stream().filter(p -> p < 0).count() % 2) + 1 * 2);\n        return Optional.of(prod * (arr.stream().map(Math::abs).reduce(Integer::sum)).get());\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.PROD_SIGNS(Arrays.asList(1, 2, 2, -4)).get() == -9,\n                s.PROD_SIGNS(Arrays.asList(0, 1)).get() == 0,\n                s.PROD_SIGNS(Arrays.asList(1, 1, 1, 2, 3, -1, 1)).get() == -10,\n                s.PROD_SIGNS(List.of()).isEmpty(),\n                s.PROD_SIGNS(Arrays.asList(2, 4,1, 2, -1, -1, 9)).get() == 20,\n                s.PROD_SIGNS(Arrays.asList(-1, 1, -1, 1)).get() == 4,\n                s.PROD_SIGNS(Arrays.asList(-1, 1, 1, 1)).get() == -4,\n                s.PROD_SIGNS(Arrays.asList(-1, 1, 1, 0)).get() == 0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "PROD_SIGNS", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> PROD_SIGNS(List<Integer> arr) {\n"}
{"task_id": "Java/129", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n", "canonical_solution": "        int n = grid.size();\n        int val = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    List<Integer> temp = new ArrayList<>();\n                    if (i != 0) {\n                        temp.add(grid.get(i - 1).get(j));\n                    }\n                    if (j != 0) {\n                        temp.add(grid.get(i).get(j - 1));\n                    }\n                    if (i != n - 1) {\n                        temp.add(grid.get(i + 1).get(j));\n                    }\n                    if (j != n - 1) {\n                        temp.add(grid.get(i).get(j + 1));\n                    }\n                    val = Collections.min(temp);\n                }\n            }\n        }\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            if (i % 2 == 0) {\n                ans.add(1);\n            } else {\n                ans.add(val);\n            }\n        }\n        return ans;\n    }\n}", "buggy_solution": "        int n = grid.size();\n        int val = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    List<Integer> temp = new ArrayList<>();\n                    if (i != 0) {\n                        temp.add(grid.get(i).get(j));\n                    }\n                    if (j != 0) {\n                        temp.add(grid.get(i).get(j));\n                    }\n                    if (i != n - 1) {\n                        temp.add(grid.get(i).get(j));\n                    }\n                    if (j != n - 1) {\n                        temp.add(grid.get(i).get(j));\n                    }\n                    val = Collections.min(temp);\n                }\n            }\n        }\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            if (i == 0) {\n                ans.add(1);\n            } else {\n                ans.add(val);\n            }\n        }\n        return ans;\n    }\n}", "bug_type": "value misuse", "failure_symptoms": "incorrect output", "entry_point": "minPath", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.minPath(Arrays.asList(Arrays.asList(1, 2, 3), Arrays.asList(4, 5, 6), Arrays.asList(7, 8, 9)), 3).equals(Arrays.asList(1, 2, 1)),\n                s.minPath(Arrays.asList(Arrays.asList(5, 9, 3), Arrays.asList(4, 1, 6), Arrays.asList(7, 8, 2)), 1).equals(List.of(1)),\n                s.minPath(Arrays.asList(Arrays.asList(1, 2, 3, 4), Arrays.asList(5, 6, 7, 8), Arrays.asList(9, 10, 11, 12), Arrays.asList(13, 14, 15, 16)), 4).equals(Arrays.asList(1, 2, 1, 2)),\n                s.minPath(Arrays.asList(Arrays.asList(6, 4, 13, 10), Arrays.asList(5, 7, 12, 1), Arrays.asList(3, 16, 11, 15), Arrays.asList(8, 14, 9, 2)), 7).equals(Arrays.asList(1, 10, 1, 10, 1, 10, 1)),\n                s.minPath(Arrays.asList(Arrays.asList(8, 14, 9, 2), Arrays.asList(6, 4, 13, 15), Arrays.asList(5, 7, 1, 12), Arrays.asList(3, 10, 11, 16)), 5).equals(Arrays.asList(1, 7, 1, 7, 1)),\n                s.minPath(Arrays.asList(Arrays.asList(11, 8, 7, 2), Arrays.asList(5, 16, 14, 4), Arrays.asList(9, 3, 15, 6), Arrays.asList(12, 13, 10, 1)), 9).equals(Arrays.asList(1, 6, 1, 6, 1, 6, 1, 6, 1)),\n                s.minPath(Arrays.asList(Arrays.asList(12, 13, 10, 1), Arrays.asList(9, 3, 15, 6), Arrays.asList(5, 16, 14, 4), Arrays.asList(11, 8, 7, 2)), 12).equals(Arrays.asList(1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6)),\n                s.minPath(Arrays.asList(Arrays.asList(2, 7, 4), Arrays.asList(3, 1, 5), Arrays.asList(6, 8, 9)), 8).equals(Arrays.asList(1, 3, 1, 3, 1, 3, 1, 3)),\n                s.minPath(Arrays.asList(Arrays.asList(6, 1, 5), Arrays.asList(3, 8, 9), Arrays.asList(2, 7, 4)), 8).equals(Arrays.asList(1, 5, 1, 5, 1, 5, 1, 5)),\n                s.minPath(Arrays.asList(Arrays.asList(1, 2), Arrays.asList(3, 4)), 10).equals(Arrays.asList(1, 2, 1, 2, 1, 2, 1, 2, 1, 2)),\n                s.minPath(Arrays.asList(Arrays.asList(1, 3), Arrays.asList(3, 2)), 10).equals(Arrays.asList(1, 3, 1, 3, 1, 3, 1, 3, 1, 3))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.minPath(Arrays.asList(Arrays.asList(1, 2, 3), Arrays.asList(4, 5, 6), Arrays.asList(7, 8, 9)), 3).equals(Arrays.asList(1, 2, 1)),\n                s.minPath(Arrays.asList(Arrays.asList(5, 9, 3), Arrays.asList(4, 1, 6), Arrays.asList(7, 8, 2)), 1).equals(List.of(1))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<Integer> minPath(List<List<Integer>> grid, int k)", "docstring": "Given a grid with N rows and N columns (N >= 2) and a positive integer k,\neach cell of the grid contains a value. Every integer in the range [1, N * N]\ninclusive appears exactly once on the cells of the grid.\nYou have to find the minimum path of length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered lists of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered list of the values on the cells that the minimum path go through.\nExamples:\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\nOutput: [1, 2, 1]\nInput: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\nOutput: [1]", "instruction": "Write a Java function `public List<Integer> minPath(List<List<Integer>> grid, int k)` to solve the following problem:\nGiven a grid with N rows and N columns (N >= 2) and a positive integer k,\neach cell of the grid contains a value. Every integer in the range [1, N * N]\ninclusive appears exactly once on the cells of the grid.\nYou have to find the minimum path of length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered lists of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered list of the values on the cells that the minimum path go through.\nExamples:\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\nOutput: [1, 2, 1]\nInput: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\nOutput: [1]", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> MIN_PATH(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int val = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    List<Integer> temp = new ArrayList<>();\n                    if (i != 0) {\n                        temp.add(grid.get(i).get(j));\n                    }\n                    if (j != 0) {\n                        temp.add(grid.get(i).get(j));\n                    }\n                    if (i != n - 1) {\n                        temp.add(grid.get(i).get(j));\n                    }\n                    if (j != n - 1) {\n                        temp.add(grid.get(i).get(j));\n                    }\n                    val = Collections.min(temp);\n                }\n            }\n        }\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            if (i == 0) {\n                ans.add(1);\n            } else {\n                ans.add(val);\n            }\n        }\n        return ans;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.MIN_PATH(Arrays.asList(Arrays.asList(1, 2, 3), Arrays.asList(4, 5, 6), Arrays.asList(7, 8, 9)), 3).equals(Arrays.asList(1, 2, 1)),\n                s.MIN_PATH(Arrays.asList(Arrays.asList(5, 9, 3), Arrays.asList(4, 1, 6), Arrays.asList(7, 8, 2)), 1).equals(List.of(1)),\n                s.MIN_PATH(Arrays.asList(Arrays.asList(1, 2, 3, 4), Arrays.asList(5, 6, 7, 8), Arrays.asList(9, 10, 11, 12), Arrays.asList(13, 14, 15, 16)), 4).equals(Arrays.asList(1, 2, 1, 2)),\n                s.MIN_PATH(Arrays.asList(Arrays.asList(6, 4, 13, 10), Arrays.asList(5, 7, 12, 1), Arrays.asList(3, 16, 11, 15), Arrays.asList(8, 14, 9, 2)), 7).equals(Arrays.asList(1, 10, 1, 10, 1, 10, 1)),\n                s.MIN_PATH(Arrays.asList(Arrays.asList(8, 14, 9, 2), Arrays.asList(6, 4, 13, 15), Arrays.asList(5, 7, 1, 12), Arrays.asList(3, 10, 11, 16)), 5).equals(Arrays.asList(1, 7, 1, 7, 1)),\n                s.MIN_PATH(Arrays.asList(Arrays.asList(11, 8, 7, 2), Arrays.asList(5, 16, 14, 4), Arrays.asList(9, 3, 15, 6), Arrays.asList(12, 13, 10, 1)), 9).equals(Arrays.asList(1, 6, 1, 6, 1, 6, 1, 6, 1)),\n                s.MIN_PATH(Arrays.asList(Arrays.asList(12, 13, 10, 1), Arrays.asList(9, 3, 15, 6), Arrays.asList(5, 16, 14, 4), Arrays.asList(11, 8, 7, 2)), 12).equals(Arrays.asList(1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6)),\n                s.MIN_PATH(Arrays.asList(Arrays.asList(2, 7, 4), Arrays.asList(3, 1, 5), Arrays.asList(6, 8, 9)), 8).equals(Arrays.asList(1, 3, 1, 3, 1, 3, 1, 3)),\n                s.MIN_PATH(Arrays.asList(Arrays.asList(6, 1, 5), Arrays.asList(3, 8, 9), Arrays.asList(2, 7, 4)), 8).equals(Arrays.asList(1, 5, 1, 5, 1, 5, 1, 5)),\n                s.MIN_PATH(Arrays.asList(Arrays.asList(1, 2), Arrays.asList(3, 4)), 10).equals(Arrays.asList(1, 2, 1, 2, 1, 2, 1, 2, 1, 2)),\n                s.MIN_PATH(Arrays.asList(Arrays.asList(1, 3), Arrays.asList(3, 2)), 10).equals(Arrays.asList(1, 3, 1, 3, 1, 3, 1, 3, 1, 3))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "MIN_PATH", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> MIN_PATH(List<List<Integer>> grid, int k) {\n"}
{"task_id": "Java/130", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> tri(int n) {\n", "canonical_solution": "        if (n == 0) {\n            return List.of(1);\n        }\n        List<Integer> myTri = new ArrayList<>(Arrays.asList(1, 3));\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                myTri.add(i / 2 + 1);\n            } else {\n                myTri.add(myTri.get(myTri.size() - 1) + myTri.get(myTri.size() - 2) + (i + 3) / 2);\n            }\n        }\n        return myTri;\n    }\n}", "buggy_solution": "        if (n == 0) {\n            return List.of(1);\n        }\n        List<Integer> myTri = new ArrayList<>(Arrays.asList(1, 3));\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                myTri.add(i / 2 + 1);\n            } else {\n                myTri.add(myTri.get(myTri.size() - 1) + myTri.get(myTri.size() - 2) + i + (i + 3) / 2);\n            }\n        }\n        return myTri;\n    }\n}", "bug_type": "excess logic", "failure_symptoms": "incorrect output", "entry_point": "tri", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.tri(3).equals(Arrays.asList(1, 3, 2, 8)),\n                s.tri(4).equals(Arrays.asList(1, 3, 2, 8, 3)),\n                s.tri(5).equals(Arrays.asList(1, 3, 2, 8, 3, 15)),\n                s.tri(6).equals(Arrays.asList(1, 3, 2, 8, 3, 15, 4)),\n                s.tri(7).equals(Arrays.asList(1, 3, 2, 8, 3, 15, 4, 24)),\n                s.tri(8).equals(Arrays.asList(1, 3, 2, 8, 3, 15, 4, 24, 5)),\n                s.tri(9).equals(Arrays.asList(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)),\n                s.tri(20).equals(Arrays.asList(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)),\n                s.tri(0).equals(List.of(1)),\n                s.tri(1).equals(Arrays.asList(1, 3))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.tri(3).equals(Arrays.asList(1, 3, 2, 8))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<Integer> tri(int n)", "docstring": "Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n= 2 + 3 + 3 = 8\nYou are given a non-negative integer number n, you have to a return a list of the\nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = [1, 3, 2, 8]", "instruction": "Write a Java function `public List<Integer> tri(int n)` to solve the following problem:\nEveryone knows Fibonacci sequence, it was studied deeply by mathematicians in\nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n= 2 + 3 + 3 = 8\nYou are given a non-negative integer number n, you have to a return a list of the\nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = [1, 3, 2, 8]", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> tri(int n) {\n        if (n == 0) {\n            return List.of(1);\n        }\n        List<Integer> MY_TRI = new ArrayList<>(Arrays.asList(1, 3));\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                MY_TRI.add(i / 2 + 1);\n            } else {\n                MY_TRI.add(MY_TRI.get(MY_TRI.size() - 1) + MY_TRI.get(MY_TRI.size() - 2) + i + (i + 3) / 2);\n            }\n        }\n        return MY_TRI;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.tri(3).equals(Arrays.asList(1, 3, 2, 8)),\n                s.tri(4).equals(Arrays.asList(1, 3, 2, 8, 3)),\n                s.tri(5).equals(Arrays.asList(1, 3, 2, 8, 3, 15)),\n                s.tri(6).equals(Arrays.asList(1, 3, 2, 8, 3, 15, 4)),\n                s.tri(7).equals(Arrays.asList(1, 3, 2, 8, 3, 15, 4, 24)),\n                s.tri(8).equals(Arrays.asList(1, 3, 2, 8, 3, 15, 4, 24, 5)),\n                s.tri(9).equals(Arrays.asList(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)),\n                s.tri(20).equals(Arrays.asList(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)),\n                s.tri(0).equals(List.of(1)),\n                s.tri(1).equals(Arrays.asList(1, 3))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "tri", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> tri(int n) {\n"}
{"task_id": "Java/131", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digits(int n) {\n", "canonical_solution": "        int product = 1, oddCount = 0;\n        for (char digit : String.valueOf(n).toCharArray()) {\n            int intDigit = digit - '0';\n            if (intDigit % 2 == 1) {\n                product *= intDigit;\n                oddCount += 1;\n            }\n        }\n        if (oddCount == 0) {\n            return 0;\n        } else {\n            return product;\n        }\n    }\n}", "buggy_solution": "        int product = 1, oddCount = 0;\n        for (char digit : String.valueOf(n).toCharArray()) {\n            int intDigit = digit - '0';\n            if (intDigit % 2 == 1) {\n                product *= product*intDigit;\n                oddCount += 1;\n            }\n        }\n        if (oddCount == 0) {\n            return 0;\n        } else {\n            return product;\n        }\n    }\n}", "bug_type": "excess logic", "failure_symptoms": "incorrect output", "entry_point": "digits", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.digits(5) == 5,\n                s.digits(54) == 5,\n                s.digits(120) == 1,\n                s.digits(5014) == 5,\n                s.digits(98765) == 315,\n                s.digits(5576543) == 2625\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.digits(1) == 1,\n                s.digits(4) == 0,\n                s.digits(235) == 15\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public int digits(int n)", "docstring": "Given a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15", "instruction": "Write a Java function `public int digits(int n)` to solve the following problem:\nGiven a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digits(int n) {\n        int product = 1, ODD_COUNT = 0;\n        for (char digit : String.valueOf(n).toCharArray()) {\n            int INT_DIGIT = digit - '0';\n            if (INT_DIGIT % 2 == 1) {\n                product *= product*INT_DIGIT;\n                ODD_COUNT += 1;\n            }\n        }\n        if (ODD_COUNT == 0) {\n            return 0;\n        } else {\n            return product;\n        }\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.digits(5) == 5,\n                s.digits(54) == 5,\n                s.digits(120) == 1,\n                s.digits(5014) == 5,\n                s.digits(98765) == 315,\n                s.digits(5576543) == 2625\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "digits", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digits(int n) {\n"}
{"task_id": "Java/132", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isNested(String string) {\n", "canonical_solution": "        List<Integer> openingBracketIndex = new ArrayList<>(), closingBracketIndex = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '[') {\n                openingBracketIndex.add(i);\n            } else {\n                closingBracketIndex.add(i);\n            }\n        }\n        Collections.reverse(closingBracketIndex);\n        int i = 0, l = closingBracketIndex.size();\n        for (int idx : openingBracketIndex) {\n            if (i < l && idx < closingBracketIndex.get(i)) {\n                i += 1;\n            }\n        }\n        return i >= 2;\n    }\n}", "buggy_solution": "        List<Integer> openingBracketIndex = new ArrayList<>(), closingBracketIndex = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '(') {\n                openingBracketIndex.add(i);\n            } else {\n                closingBracketIndex.add(i);\n            }\n        }\n        Collections.reverse(closingBracketIndex);\n        int i = 0, l = closingBracketIndex.size();\n        for (int idx : openingBracketIndex) {\n            if (i < l && idx < closingBracketIndex.get(i)) {\n                i += 1;\n            }\n        }\n        return i >= 2;\n    }\n}", "bug_type": "value misuse", "failure_symptoms": "incorrect output", "entry_point": "isNested", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.isNested(\"[[]]\" ),\n                !s.isNested(\"[]]]]]]][[[[[]\" ),\n                !s.isNested(\"[][]\" ),\n                !s.isNested(\"[]\" ),\n                s.isNested(\"[[[[]]]]\" ),\n                !s.isNested(\"[]]]]]]]]]]\" ),\n                s.isNested(\"[][][[]]\" ),\n                !s.isNested(\"[[]\" ),\n                !s.isNested(\"[]]\" ),\n                s.isNested(\"[[]][[\" ),\n                s.isNested(\"[[][]]\" ),\n                !s.isNested(\"\" ),\n                !s.isNested(\"[[[[[[[[\" ),\n                !s.isNested(\"]]]]]]]]\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.isNested(\"[[]]\" ),\n                !s.isNested(\"[]]]]]]][[[[[]\" ),\n                !s.isNested(\"[][]\" ),\n                !s.isNested(\"[]\" ),\n                s.isNested(\"[[]][[\" ),\n                s.isNested(\"[[][]]\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public boolean isNested(String string)", "docstring": "Create a function that takes a string as input which contains only square brackets.\nThe function should return true if and only if there is a valid subsequence of brackets\nwhere at least one bracket in the subsequence is nested.\nisNested(\"[[]]\") -> true\nisNested(\"[]]]]]]][[[[[]\") -> false\nisNested(\"[][]\") -> false\nisNested(\"[]\") -> false\nisNested(\"[[][]]\") -> true\nisNested(\"[[]][[\") -> true", "instruction": "Write a Java function `public boolean isNested(String string)` to solve the following problem:\nCreate a function that takes a string as input which contains only square brackets.\nThe function should return true if and only if there is a valid subsequence of brackets\nwhere at least one bracket in the subsequence is nested.\nisNested(\"[[]]\") -> true\nisNested(\"[]]]]]]][[[[[]\") -> false\nisNested(\"[][]\") -> false\nisNested(\"[]\") -> false\nisNested(\"[[][]]\") -> true\nisNested(\"[[]][[\") -> true", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean IS_NESTED(String string) {\n        List<Integer> OPENING_BRACKET_INDEX = new ArrayList<>(), CLOSING_BRACKET_INDEX = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '(') {\n                OPENING_BRACKET_INDEX.add(i);\n            } else {\n                CLOSING_BRACKET_INDEX.add(i);\n            }\n        }\n        Collections.reverse(CLOSING_BRACKET_INDEX);\n        int i = 0, l = CLOSING_BRACKET_INDEX.size();\n        for (int idx : OPENING_BRACKET_INDEX) {\n            if (i < l && idx < CLOSING_BRACKET_INDEX.get(i)) {\n                i += 1;\n            }\n        }\n        return i >= 2;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.IS_NESTED(\"[[]]\" ),\n                !s.IS_NESTED(\"[]]]]]]][[[[[]\" ),\n                !s.IS_NESTED(\"[][]\" ),\n                !s.IS_NESTED(\"[]\" ),\n                s.IS_NESTED(\"[[[[]]]]\" ),\n                !s.IS_NESTED(\"[]]]]]]]]]]\" ),\n                s.IS_NESTED(\"[][][[]]\" ),\n                !s.IS_NESTED(\"[[]\" ),\n                !s.IS_NESTED(\"[]]\" ),\n                s.IS_NESTED(\"[[]][[\" ),\n                s.IS_NESTED(\"[[][]]\" ),\n                !s.IS_NESTED(\"\" ),\n                !s.IS_NESTED(\"[[[[[[[[\" ),\n                !s.IS_NESTED(\"]]]]]]]]\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "IS_NESTED", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean IS_NESTED(String string) {\n"}
{"task_id": "Java/133", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sumSquares(List<Double> lst) {\n", "canonical_solution": "        return lst.stream().map(p -> (int) Math.ceil(p)).map(p -> p * p).reduce(Integer::sum).get();\n    }\n}", "buggy_solution": "        return lst.stream().map(p -> (int) Math.ceil(p)).map(p -> p * 2).reduce(Integer::sum).get();\n    }\n}", "bug_type": "operator misuse", "failure_symptoms": "incorrect output", "entry_point": "sumSquares", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sumSquares(Arrays.asList(1., 2., 3.)) == 14,\n                s.sumSquares(Arrays.asList(1.0, 2., 3.)) == 14,\n                s.sumSquares(Arrays.asList(1., 3., 5., 7.)) == 84,\n                s.sumSquares(Arrays.asList(1.4, 4.2, 0.)) == 29,\n                s.sumSquares(Arrays.asList(-2.4, 1., 1.)) == 6,\n                s.sumSquares(Arrays.asList(100., 1., 15., 2.)) == 10230,\n                s.sumSquares(Arrays.asList(10000., 10000.)) == 200000000,\n                s.sumSquares(Arrays.asList(-1.4, 4.6, 6.3)) == 75,\n                s.sumSquares(Arrays.asList(-1.4, 17.9, 18.9, 19.9)) == 1086,\n                s.sumSquares(List.of(0.)) == 0,\n                s.sumSquares(List.of(-1.)) == 1,\n                s.sumSquares(Arrays.asList(-1., 1., 0.)) == 2\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sumSquares(Arrays.asList(1., 2., 3.)) == 14,\n                s.sumSquares(Arrays.asList(1., 4., 9.)) == 98,\n                s.sumSquares(Arrays.asList(1., 3., 5., 7.)) == 84,\n                s.sumSquares(Arrays.asList(1.4, 4.2, 0.)) == 29,\n                s.sumSquares(Arrays.asList(-2.4, 1., 1.)) == 6\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public int sumSquares(List<Double> lst)", "docstring": "You are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6", "instruction": "Write a Java function `public int sumSquares(List<Double> lst)` to solve the following problem:\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int SUM_SQUARES(List<Double> lst) {\n        return lst.stream().map(p -> (int) Math.ceil(p)).map(p -> p * 2).reduce(Integer::sum).get();\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.SUM_SQUARES(Arrays.asList(1., 2., 3.)) == 14,\n                s.SUM_SQUARES(Arrays.asList(1.0, 2., 3.)) == 14,\n                s.SUM_SQUARES(Arrays.asList(1., 3., 5., 7.)) == 84,\n                s.SUM_SQUARES(Arrays.asList(1.4, 4.2, 0.)) == 29,\n                s.SUM_SQUARES(Arrays.asList(-2.4, 1., 1.)) == 6,\n                s.SUM_SQUARES(Arrays.asList(100., 1., 15., 2.)) == 10230,\n                s.SUM_SQUARES(Arrays.asList(10000., 10000.)) == 200000000,\n                s.SUM_SQUARES(Arrays.asList(-1.4, 4.6, 6.3)) == 75,\n                s.SUM_SQUARES(Arrays.asList(-1.4, 17.9, 18.9, 19.9)) == 1086,\n                s.SUM_SQUARES(List.of(0.)) == 0,\n                s.SUM_SQUARES(List.of(-1.)) == 1,\n                s.SUM_SQUARES(Arrays.asList(-1., 1., 0.)) == 2\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "SUM_SQUARES", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int SUM_SQUARES(List<Double> lst) {\n"}
{"task_id": "Java/134", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean checkIfLastCharIsALetter(String txt) {\n", "canonical_solution": "        String[] words = txt.split(\" \", -1);\n        String check = words[words.length - 1];\n        return check.length() == 1 && Character.isLetter(check.charAt(0));\n    }\n}", "buggy_solution": "        String[] words = txt.split(\" \", -1);\n        String check = words[words.length - 1];\n        return check.length() == 1 || Character.isLetter(check.charAt(0));\n    }\n}", "bug_type": "function misuse", "failure_symptoms": "incorrect output", "entry_point": "checkIfLastCharIsALetter", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.checkIfLastCharIsALetter(\"apple\" ) == false,\n                s.checkIfLastCharIsALetter(\"apple pi e\" ) == true,\n                s.checkIfLastCharIsALetter(\"eeeee\" ) == false,\n                s.checkIfLastCharIsALetter(\"A\" ) == true,\n                s.checkIfLastCharIsALetter(\"Pumpkin pie \" ) == false,\n                s.checkIfLastCharIsALetter(\"Pumpkin pie 1\" ) == false,\n                s.checkIfLastCharIsALetter(\"\" ) == false,\n                s.checkIfLastCharIsALetter(\"eeeee e \" ) == false,\n                s.checkIfLastCharIsALetter(\"apple pie\" ) == false,\n                s.checkIfLastCharIsALetter(\"apple pi e \" ) == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.checkIfLastCharIsALetter(\"apple pi e\" ) == true,\n                s.checkIfLastCharIsALetter(\"\" ) == false,\n                s.checkIfLastCharIsALetter(\"apple pie\" ) == false,\n                s.checkIfLastCharIsALetter(\"apple pi e \" ) == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public boolean checkIfLastCharIsALetter(String txt)", "docstring": "Create a function that returns true if the last character\nof a given string is an alphabetical character and is not\na part of a word, and false otherwise.\nNote: \"word\" is a group of characters separated by space.\nExamples:\ncheckIfLastCharIsALetter(\"apple pie\") -> false\ncheckIfLastCharIsALetter(\"apple pi e\") -> true\ncheckIfLastCharIsALetter(\"apple pi e \") -> false\ncheckIfLastCharIsALetter(\"\") -> false", "instruction": "Write a Java function `public boolean checkIfLastCharIsALetter(String txt)` to solve the following problem:\nCreate a function that returns true if the last character\nof a given string is an alphabetical character and is not\na part of a word, and false otherwise.\nNote: \"word\" is a group of characters separated by space.\nExamples:\ncheckIfLastCharIsALetter(\"apple pie\") -> false\ncheckIfLastCharIsALetter(\"apple pi e\") -> true\ncheckIfLastCharIsALetter(\"apple pi e \") -> false\ncheckIfLastCharIsALetter(\"\") -> false", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean CHECK_IF_LAST_CHAR_IS_A_LETTER(String txt) {\n        String[] words = txt.split(\" \", -1);\n        String check = words[words.length - 1];\n        return check.length() == 1 || Character.isLetter(check.charAt(0));\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.CHECK_IF_LAST_CHAR_IS_A_LETTER(\"apple\" ) == false,\n                s.CHECK_IF_LAST_CHAR_IS_A_LETTER(\"apple pi e\" ) == true,\n                s.CHECK_IF_LAST_CHAR_IS_A_LETTER(\"eeeee\" ) == false,\n                s.CHECK_IF_LAST_CHAR_IS_A_LETTER(\"A\" ) == true,\n                s.CHECK_IF_LAST_CHAR_IS_A_LETTER(\"Pumpkin pie \" ) == false,\n                s.CHECK_IF_LAST_CHAR_IS_A_LETTER(\"Pumpkin pie 1\" ) == false,\n                s.CHECK_IF_LAST_CHAR_IS_A_LETTER(\"\" ) == false,\n                s.CHECK_IF_LAST_CHAR_IS_A_LETTER(\"eeeee e \" ) == false,\n                s.CHECK_IF_LAST_CHAR_IS_A_LETTER(\"apple pie\" ) == false,\n                s.CHECK_IF_LAST_CHAR_IS_A_LETTER(\"apple pi e \" ) == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "CHECK_IF_LAST_CHAR_IS_A_LETTER", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean CHECK_IF_LAST_CHAR_IS_A_LETTER(String txt) {\n"}
{"task_id": "Java/135", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int canArrange(List<Integer> arr) {\n", "canonical_solution": "        int ind = -1, i = 1;\n        while (i < arr.size()) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                ind = i;\n            }\n            i += 1;\n        }\n        return ind;\n    }\n}", "buggy_solution": "        int ind = -1, i = 1;\n        while (i < arr.size()) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                ind = i;\n            }\n            i += 1;\n            ind -= 1;\n        }\n        return ind;\n    }\n}", "bug_type": "excess logic", "failure_symptoms": "incorrect output", "entry_point": "canArrange", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.canArrange(Arrays.asList(1, 2, 4, 3, 5)) == 3,\n                s.canArrange(Arrays.asList(1, 2, 4, 5)) == -1,\n                s.canArrange(Arrays.asList(1, 4, 2, 5, 6, 7, 8, 9, 10)) == 2,\n                s.canArrange(Arrays.asList(4, 8, 5, 7, 3)) == 4,\n                s.canArrange(List.of()) == -1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.canArrange(Arrays.asList(1, 2, 4, 3, 5)) == 3,\n                s.canArrange(Arrays.asList(1, 2, 3)) == -1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public int canArrange(List<Integer> arr)", "docstring": "Create a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given array will not contain\nduplicate values.\nExamples:\ncanArrange(Arrays.asList(1,2,4,3,5)) = 3\ncanArrange(Arrays.asList(1,2,3)) = -1", "instruction": "Write a Java function `public int canArrange(List<Integer> arr)` to solve the following problem:\nCreate a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given array will not contain\nduplicate values.\nExamples:\ncanArrange(Arrays.asList(1,2,4,3,5)) = 3\ncanArrange(Arrays.asList(1,2,3)) = -1", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int CAN_ARRANGE(List<Integer> arr) {\n        int ind = -1, i = 1;\n        while (i < arr.size()) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                ind = i;\n            }\n            i += 1;\n            ind -= 1;\n        }\n        return ind;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.CAN_ARRANGE(Arrays.asList(1, 2, 4, 3, 5)) == 3,\n                s.CAN_ARRANGE(Arrays.asList(1, 2, 4, 5)) == -1,\n                s.CAN_ARRANGE(Arrays.asList(1, 4, 2, 5, 6, 7, 8, 9, 10)) == 2,\n                s.CAN_ARRANGE(Arrays.asList(4, 8, 5, 7, 3)) == 4,\n                s.CAN_ARRANGE(List.of()) == -1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "CAN_ARRANGE", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int CAN_ARRANGE(List<Integer> arr) {\n"}
{"task_id": "Java/136", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n", "canonical_solution": "        List<Integer> smallest = lst.stream().filter(p -> p < 0).toList();\n        List<Integer> largest = lst.stream().filter(p -> p > 0).toList();\n        Optional<Integer> s = Optional.empty();\n        if (smallest.size() > 0) {\n            s = Optional.of(Collections.max(smallest));\n        }\n        Optional<Integer> l = Optional.empty();\n        if (largest.size() > 0) {\n            l = Optional.of(Collections.min(largest));\n        }\n        return Arrays.asList(s, l);\n    }\n}", "buggy_solution": "        List<Integer> smallest = lst.stream().filter(p -> p < 0).toList();\n        List<Integer> largest = lst.stream().filter(p -> p > 0).toList();\n        Optional<Integer> s = Optional.empty();\n        if (smallest.size() > 0) {\n            s = Optional.of(Collections.max(smallest));\n        }\n        Optional<Integer> l = Optional.empty();\n        if (largest.size() > 0) {\n            l = Optional.of(Collections.min(largest));\n            s = Optional.of(Collections.min(largest));\n        }\n        return Arrays.asList(s, l);\n    }\n}", "bug_type": "excess logic", "failure_symptoms": "incorrect output", "entry_point": "largestSmallestIntegers", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)).equals(Arrays.asList(Optional.empty(), Optional.of(1))),\n                s.largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7, 0)).equals(Arrays.asList(Optional.empty(), Optional.of(1))),\n                s.largestSmallestIntegers(Arrays.asList(1, 3, 2, 4, 5, 6, -2)).equals(Arrays.asList(Optional.of(-2), Optional.of(1))),\n                s.largestSmallestIntegers(Arrays.asList(4, 5, 3, 6, 2, 7, -7)).equals(Arrays.asList(Optional.of(-7), Optional.of(2))),\n                s.largestSmallestIntegers(Arrays.asList(7, 3, 8, 4, 9, 2, 5, -9)).equals(Arrays.asList(Optional.of(-9), Optional.of(2))),\n                s.largestSmallestIntegers(List.of()).equals(Arrays.asList(Optional.empty(), Optional.empty())),\n                s.largestSmallestIntegers(List.of(0)).equals(Arrays.asList(Optional.empty(), Optional.empty())),\n                s.largestSmallestIntegers(Arrays.asList(-1, -3, -5, -6)).equals(Arrays.asList(Optional.of(-1), Optional.empty())),\n                s.largestSmallestIntegers(Arrays.asList(-1, -3, -5, -6, 0)).equals(Arrays.asList(Optional.of(-1), Optional.empty())),\n                s.largestSmallestIntegers(Arrays.asList(-6, -4, -4, -3, 1)).equals(Arrays.asList(Optional.of(-3), Optional.of(1))),\n                s.largestSmallestIntegers(Arrays.asList(-6, -4, -4, -3, -100, 1)).equals(Arrays.asList(Optional.of(-3), Optional.of(1)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)).equals(Arrays.asList(Optional.empty(), Optional.of(1))),\n                s.largestSmallestIntegers(List.of()).equals(Arrays.asList(Optional.empty(), Optional.empty())),\n                s.largestSmallestIntegers(List.of(0)).equals(Arrays.asList(Optional.empty(), Optional.empty()))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst)", "docstring": "Create a function that returns a tuple (a, b), where 'a' is\nthe largest of negative integers, and 'b' is the smallest\nof positive integers in a list.\nIf there is no negative or positive integers, return them as None.\nExamples:\nlargestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\nlargestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\nlargestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())", "instruction": "Write a Java function `public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst)` to solve the following problem:\nCreate a function that returns a tuple (a, b), where 'a' is\nthe largest of negative integers, and 'b' is the smallest\nof positive integers in a list.\nIf there is no negative or positive integers, return them as None.\nExamples:\nlargestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\nlargestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\nlargestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Optional<Integer>> LARGEST_SMALLEST_INTEGERS(List<Integer> lst){\n        List<Integer> smallest = lst.stream().filter(p -> p < 0).toList();\n        List<Integer> largest = lst.stream().filter(p -> p > 0).toList();\n        Optional<Integer> s = Optional.empty();\n        if (smallest.size() > 0) {\n            s = Optional.of(Collections.max(smallest));\n        }\n        Optional<Integer> l = Optional.empty();\n        if (largest.size() > 0) {\n            l = Optional.of(Collections.min(largest));\n            s = Optional.of(Collections.min(largest));\n        }\n        return Arrays.asList(s, l);\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.LARGEST_SMALLEST_INTEGERS(Arrays.asList(2, 4, 1, 3, 5, 7)).equals(Arrays.asList(Optional.empty(), Optional.of(1))),\n                s.LARGEST_SMALLEST_INTEGERS(Arrays.asList(2, 4, 1, 3, 5, 7, 0)).equals(Arrays.asList(Optional.empty(), Optional.of(1))),\n                s.LARGEST_SMALLEST_INTEGERS(Arrays.asList(1, 3, 2, 4, 5, 6, -2)).equals(Arrays.asList(Optional.of(-2), Optional.of(1))),\n                s.LARGEST_SMALLEST_INTEGERS(Arrays.asList(4, 5, 3, 6, 2, 7, -7)).equals(Arrays.asList(Optional.of(-7), Optional.of(2))),\n                s.LARGEST_SMALLEST_INTEGERS(Arrays.asList(7, 3, 8, 4, 9, 2, 5, -9)).equals(Arrays.asList(Optional.of(-9), Optional.of(2))),\n                s.LARGEST_SMALLEST_INTEGERS(List.of()).equals(Arrays.asList(Optional.empty(), Optional.empty())),\n                s.LARGEST_SMALLEST_INTEGERS(List.of(0)).equals(Arrays.asList(Optional.empty(), Optional.empty())),\n                s.LARGEST_SMALLEST_INTEGERS(Arrays.asList(-1, -3, -5, -6)).equals(Arrays.asList(Optional.of(-1), Optional.empty())),\n                s.LARGEST_SMALLEST_INTEGERS(Arrays.asList(-1, -3, -5, -6, 0)).equals(Arrays.asList(Optional.of(-1), Optional.empty())),\n                s.LARGEST_SMALLEST_INTEGERS(Arrays.asList(-6, -4, -4, -3, 1)).equals(Arrays.asList(Optional.of(-3), Optional.of(1))),\n                s.LARGEST_SMALLEST_INTEGERS(Arrays.asList(-6, -4, -4, -3, -100, 1)).equals(Arrays.asList(Optional.of(-3), Optional.of(1)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "LARGEST_SMALLEST_INTEGERS", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Optional<Integer>> LARGEST_SMALLEST_INTEGERS(List<Integer> lst){\n"}
{"task_id": "Java/137", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Object> compareOne(Object a, Object b) {\n", "canonical_solution": "        double tempA = 0, tempB = 0;\n        if (a instanceof Integer) {\n            tempA = (Integer) a * 1.0;\n        } else if (a instanceof Double) {\n            tempA = (double) a;\n        } else if (a instanceof String) {\n            tempA = Double.parseDouble(((String) a).replace(',', '.'));\n        }\n        if (b instanceof Integer) {\n            tempB = (Integer) b * 1.0;\n        } else if (b instanceof Double) {\n            tempB = (double) b;\n        } else if (b instanceof String) {\n            tempB = Double.parseDouble(((String) b).replace(',', '.'));\n        }\n        if (tempA == tempB) {\n            return Optional.empty();\n        } else if (tempA > tempB) {\n            return Optional.of(a);\n        } else {\n            return Optional.of(b);\n        }\n    }\n}", "buggy_solution": "        double tempA = 0, tempB = 0;\n        if (a instanceof Integer) {\n            tempA = (Integer) a * 1.0;\n        } else if (a instanceof Double) {\n            tempA = (double) a;\n        } else if (a instanceof String) {\n            tempA = Double.parseDouble(((String) a).replace(',', '.').replace('.', ','));\n        }\n        if (b instanceof Integer) {\n            tempB = (Integer) b * 1.0;\n        } else if (b instanceof Double) {\n            tempB = (double) b;\n        } else if (b instanceof String) {\n            tempB = Double.parseDouble(((String) b).replace(',', '.'));\n        }\n        if (tempA == tempB) {\n            return Optional.empty();\n        } else if (tempA > tempB) {\n            return Optional.of(a);\n        } else {\n            return Optional.of(b);\n        }\n    }\n}", "bug_type": "excess logic", "failure_symptoms": "incorrect output", "entry_point": "compareOne", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                (int) s.compareOne(1, 2).get() == 2,\n                (double) s.compareOne(1, 2.5).get() == 2.5,\n                (int) s.compareOne(2, 3).get() == 3,\n                (int) s.compareOne(5, 6).get() == 6,\n                (String) s.compareOne(1, \"2,3\").get() == \"2,3\",\n                (String) s.compareOne(\"5,1\", \"6\").get() == \"6\",\n                (String) s.compareOne(\"1\", \"2\").get() == \"2\",\n                s.compareOne(\"1\", 1).isEmpty()\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                (double) s.compareOne(1, 2.5).get() == 2.5,\n                (String) s.compareOne(1, \"2,3\").get() == \"2,3\",\n                (String) s.compareOne(\"5,1\", \"6\").get() == \"6\",\n               s.compareOne(\"1\", 1).isEmpty()\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public Optional<Object> compareOne(Object a, Object b)", "docstring": "Create a function that takes integers, floats, or strings representing\nreal numbers, and returns the larger variable in its given variable type.\nReturn None if the values are equal.\nNote: If a real number is represented as a string, the floating point might be . or ,\ncompareOne(1, 2.5) -> Optional.of(2.5)\ncompareOne(1, \"2,3\") -> Optional.of(\"2,3\")\ncompareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\ncompareOne(\"1\", 1) -> Optional.empty()", "instruction": "Write a Java function `public Optional<Object> compareOne(Object a, Object b)` to solve the following problem:\nCreate a function that takes integers, floats, or strings representing\nreal numbers, and returns the larger variable in its given variable type.\nReturn None if the values are equal.\nNote: If a real number is represented as a string, the floating point might be . or ,\ncompareOne(1, 2.5) -> Optional.of(2.5)\ncompareOne(1, \"2,3\") -> Optional.of(\"2,3\")\ncompareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\ncompareOne(\"1\", 1) -> Optional.empty()", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Object> COMPARE_ONE(Object a, Object b) {\n        double tempA = 0, tempB = 0;\n        if (a instanceof Integer) {\n            tempA = (Integer) a * 1.0;\n        } else if (a instanceof Double) {\n            tempA = (double) a;\n        } else if (a instanceof String) {\n            tempA = Double.parseDouble(((String) a).replace(',', '.').replace('.', ','));\n        }\n        if (b instanceof Integer) {\n            tempB = (Integer) b * 1.0;\n        } else if (b instanceof Double) {\n            tempB = (double) b;\n        } else if (b instanceof String) {\n            tempB = Double.parseDouble(((String) b).replace(',', '.'));\n        }\n        if (tempA == tempB) {\n            return Optional.empty();\n        } else if (tempA > tempB) {\n            return Optional.of(a);\n        } else {\n            return Optional.of(b);\n        }\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                (int) s.COMPARE_ONE(1, 2).get() == 2,\n                (double) s.COMPARE_ONE(1, 2.5).get() == 2.5,\n                (int) s.COMPARE_ONE(2, 3).get() == 3,\n                (int) s.COMPARE_ONE(5, 6).get() == 6,\n                (String) s.COMPARE_ONE(1, \"2,3\").get() == \"2,3\",\n                (String) s.COMPARE_ONE(\"5,1\", \"6\").get() == \"6\",\n                (String) s.COMPARE_ONE(\"1\", \"2\").get() == \"2\",\n                s.COMPARE_ONE(\"1\", 1).isEmpty()\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "COMPARE_ONE", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Object> COMPARE_ONE(Object a, Object b) {\n"}
{"task_id": "Java/138", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isEqualToSumEven(int n) {\n", "canonical_solution": "        return n % 2 == 0 && n >= 8;\n    }\n}", "buggy_solution": "        return n % 2 == 0 && n >= 8 && n <= 8;\n    }\n}", "bug_type": "excess logic", "failure_symptoms": "incorrect output", "entry_point": "isEqualToSumEven", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.isEqualToSumEven(4) == false,\n                s.isEqualToSumEven(6) == false,\n                s.isEqualToSumEven(8) == true,\n                s.isEqualToSumEven(10) == true,\n                s.isEqualToSumEven(11) == false,\n                s.isEqualToSumEven(12) == true,\n                s.isEqualToSumEven(13) == false,\n                s.isEqualToSumEven(16) == true\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.isEqualToSumEven(4) == false,\n                s.isEqualToSumEven(6) == false,\n                s.isEqualToSumEven(8) == true\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public boolean isEqualToSumEven(int n)", "docstring": "Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nisEqualToSumEven(4) == false\nisEqualToSumEven(6) == false\nisEqualToSumEven(8) == true", "instruction": "Write a Java function `public boolean isEqualToSumEven(int n)` to solve the following problem:\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nisEqualToSumEven(4) == false\nisEqualToSumEven(6) == false\nisEqualToSumEven(8) == true", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean IS_EQUAL_TO_SUM_EVEN(int n) {\n        return n % 2 == 0 && n >= 8 && n <= 8;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.IS_EQUAL_TO_SUM_EVEN(4) == false,\n                s.IS_EQUAL_TO_SUM_EVEN(6) == false,\n                s.IS_EQUAL_TO_SUM_EVEN(8) == true,\n                s.IS_EQUAL_TO_SUM_EVEN(10) == true,\n                s.IS_EQUAL_TO_SUM_EVEN(11) == false,\n                s.IS_EQUAL_TO_SUM_EVEN(12) == true,\n                s.IS_EQUAL_TO_SUM_EVEN(13) == false,\n                s.IS_EQUAL_TO_SUM_EVEN(16) == true\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "IS_EQUAL_TO_SUM_EVEN", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean IS_EQUAL_TO_SUM_EVEN(int n) {\n"}
{"task_id": "Java/139", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public long specialFactorial(int n) {\n", "canonical_solution": "        long factI = 1, specialFact = 1;\n        for (int i = 1; i <= n; i++) {\n            factI *= i;\n            specialFact *= factI;\n        }\n        return specialFact;\n    }\n}", "buggy_solution": "        long factI = 1, specialFact = 1;\n        for (int i = 1; i <= n; i++) {\n            i *= n;\n            factI *= i;\n            specialFact *= factI;\n        }\n        return specialFact;\n    }\n}", "bug_type": "excess logic", "failure_symptoms": "incorrect output", "entry_point": "specialFactorial", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.specialFactorial(4) == 288,\n                s.specialFactorial(5) == 34560,\n                s.specialFactorial(7) == 125411328000L,\n                s.specialFactorial(1) == 1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.specialFactorial(4) == 288\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public long specialFactorial(int n)", "docstring": "The Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> specialFactorial(4)\n288\nThe function will receive an integer as input and should return the special\nfactorial of this integer.", "instruction": "Write a Java function `public long specialFactorial(int n)` to solve the following problem:\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> specialFactorial(4)\n288\nThe function will receive an integer as input and should return the special\nfactorial of this integer.", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public long SPECIAL_FACTORIAL(int n) {\n        long factI = 1, SPECIAL_FACT = 1;\n        for (int i = 1; i <= n; i++) {\n            i *= n;\n            factI *= i;\n            SPECIAL_FACT *= factI;\n        }\n        return SPECIAL_FACT;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.SPECIAL_FACTORIAL(4) == 288,\n                s.SPECIAL_FACTORIAL(5) == 34560,\n                s.SPECIAL_FACTORIAL(7) == 125411328000L,\n                s.SPECIAL_FACTORIAL(1) == 1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "SPECIAL_FACTORIAL", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public long SPECIAL_FACTORIAL(int n) {\n"}
{"task_id": "Java/140", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String fixSpaces(String text) {\n", "canonical_solution": "        StringBuilder sb = new StringBuilder();\n        int start = 0, end = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                end += 1;\n            } else {\n                if (end - start > 2) {\n                    sb.append('-');\n                } else if (end - start > 0) {\n                    sb.append(\"_\".repeat(end - start));\n                }\n                sb.append(text.charAt(i));\n                start = i + 1;\n                end = i + 1;\n            }\n        }\n        if (end - start > 2) {\n            sb.append('-');\n        } else if (end - start > 0) {\n            sb.append(\"_\".repeat(end - start));\n        }\n        return sb.toString();\n    }\n}", "buggy_solution": "        StringBuilder sb = new StringBuilder();\n        int start = 0, end = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                end += 1;\n            } else {\n                if (end - start > 2) {\n                    sb.append('-');\n                } else if (end - start > 0) {\n                    sb.append(\"_\".repeat(end - start));\n                }\n                sb.append(text.charAt(i));\n                start = i + 1;\n                end = i + 1;\n            }\n        }\n        if (end - start > 2) {\n            sb.append('-');\n        } else if (end - start > 0) {\n            sb.append(\"__\".repeat(end - start));\n        }\n        return sb.toString();\n    }\n}", "bug_type": "excess logic", "failure_symptoms": "incorrect output", "entry_point": "fixSpaces", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.fixSpaces(\"Example\" ), \"Example\" ),\n                Objects.equals(s.fixSpaces(\"Mudasir Hanif \" ), \"Mudasir_Hanif_\" ),\n                Objects.equals(s.fixSpaces(\"Yellow Yellow  Dirty  Fellow\" ), \"Yellow_Yellow__Dirty__Fellow\" ),\n                Objects.equals(s.fixSpaces(\"Exa   mple\" ), \"Exa-mple\" ),\n                Objects.equals(s.fixSpaces(\"   Exa 1 2 2 mple\" ), \"-Exa_1_2_2_mple\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.fixSpaces(\"Example\" ), \"Example\" ),\n                Objects.equals(s.fixSpaces(\"Example 1\" ), \"Example_1\" ),\n                Objects.equals(s.fixSpaces(\" Example 2\" ), \"_Example_2\" ),\n                Objects.equals(s.fixSpaces(\" Example   3\" ), \"_Example-3\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public String fixSpaces(String text)", "docstring": "Given a string text, replace all spaces in it with underscores,\nand if a string has more than 2 consecutive spaces,\nthen replace all consecutive spaces with -\nfixSpaces(\"Example\") == \"Example\"\nfixSpaces(\"Example 1\") == \"Example_1\"\nfixSpaces(\" Example 2\") == \"_Example_2\"\nfixSpaces(\" Example   3\") == \"_Example-3\"", "instruction": "Write a Java function `public String fixSpaces(String text)` to solve the following problem:\nGiven a string text, replace all spaces in it with underscores,\nand if a string has more than 2 consecutive spaces,\nthen replace all consecutive spaces with -\nfixSpaces(\"Example\") == \"Example\"\nfixSpaces(\"Example 1\") == \"Example_1\"\nfixSpaces(\" Example 2\") == \"_Example_2\"\nfixSpaces(\" Example   3\") == \"_Example-3\"", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String FIX_SPACES(String text) {\n        StringBuilder sb = new StringBuilder();\n        int start = 0, end = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                end += 1;\n            } else {\n                if (end - start > 2) {\n                    sb.append('-');\n                } else if (end - start > 0) {\n                    sb.append(\"_\".repeat(end - start));\n                }\n                sb.append(text.charAt(i));\n                start = i + 1;\n                end = i + 1;\n            }\n        }\n        if (end - start > 2) {\n            sb.append('-');\n        } else if (end - start > 0) {\n            sb.append(\"__\".repeat(end - start));\n        }\n        return sb.toString();\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.FIX_SPACES(\"Example\" ), \"Example\" ),\n                Objects.equals(s.FIX_SPACES(\"Mudasir Hanif \" ), \"Mudasir_Hanif_\" ),\n                Objects.equals(s.FIX_SPACES(\"Yellow Yellow  Dirty  Fellow\" ), \"Yellow_Yellow__Dirty__Fellow\" ),\n                Objects.equals(s.FIX_SPACES(\"Exa   mple\" ), \"Exa-mple\" ),\n                Objects.equals(s.FIX_SPACES(\"   Exa 1 2 2 mple\" ), \"-Exa_1_2_2_mple\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "FIX_SPACES", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String FIX_SPACES(String text) {\n"}
{"task_id": "Java/141", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String filenameCheck(String fileName) {\n", "canonical_solution": "        List<String> suf = Arrays.asList(\"txt\", \"exe\", \"dll\");\n        String[] lst = fileName.split(\"\\\\.\" );\n        if (lst.length != 2 || !suf.contains(lst[1]) || lst[0].isEmpty() || !Character.isLetter(lst[0].charAt(0))) {\n            return \"No\";\n        }\n        int t = (int) lst[0].chars().map(x -> (char) x).filter(Character::isDigit).count();\n        if (t > 3) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}", "buggy_solution": "        List<String> suf = Arrays.asList(\"txt\", \"exe\", \"dll\");\n        String[] lst = fileName.split(\"\\\\.\" );\n        if (lst.length != 2 || lst[0].isEmpty() || !Character.isLetter(lst[0].charAt(0))) {\n            return \"No\";\n        }\n        int t = (int) lst[0].chars().map(x -> (char) x).filter(Character::isDigit).count();\n        if (t > 3) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}", "bug_type": "missing logic", "failure_symptoms": "incorrect output", "entry_point": "filenameCheck", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.filenameCheck(\"example.txt\" ), \"Yes\" ),\n                Objects.equals(s.filenameCheck(\"1example.dll\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"s1sdf3.asd\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"K.dll\" ), \"Yes\" ),\n                Objects.equals(s.filenameCheck(\"MY16FILE3.exe\" ), \"Yes\" ),\n                Objects.equals(s.filenameCheck(\"His12FILE94.exe\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"_Y.txt\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"?aREYA.exe\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"/this_is_valid.dll\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"this_is_valid.wow\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"this_is_valid.txt\" ), \"Yes\" ),\n                Objects.equals(s.filenameCheck(\"this_is_valid.txtexe\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"#this2_i4s_5valid.ten\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"@this1_is6_valid.exe\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"this_is_12valid.6exe4.txt\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"all.exe.txt\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"I563_No.exe\" ), \"Yes\" ),\n                Objects.equals(s.filenameCheck(\"Is3youfault.txt\" ), \"Yes\" ),\n                Objects.equals(s.filenameCheck(\"no_one#knows.dll\" ), \"Yes\" ),\n                Objects.equals(s.filenameCheck(\"1I563_Yes3.exe\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"I563_Yes3.txtt\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"final..txt\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"final132\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"_f4indsartal132.\" ), \"No\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.filenameCheck(\"example.txt\" ), \"Yes\" ),\n                Objects.equals(s.filenameCheck(\"1example.dll\" ), \"No\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public String filenameCheck(String file_name)", "docstring": "Create a function which takes a string representing a file's name, and returns\n\"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\nA file's name is considered to be valid if and only if all the following conditions\nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot '.'\n- The substring before the dot should not be empty, and it starts with a letter from\nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\nExamples:\nfile_name_check(\"example.txt\") # => \"Yes\"\nfile_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)", "instruction": "Write a Java function `public String filenameCheck(String file_name)` to solve the following problem:\nCreate a function which takes a string representing a file's name, and returns\n\"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\nA file's name is considered to be valid if and only if all the following conditions\nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot '.'\n- The substring before the dot should not be empty, and it starts with a letter from\nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\nExamples:\nfile_name_check(\"example.txt\") # => \"Yes\"\nfile_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String FILENAME_CHECK(String fileName) {\n        List<String> suf = Arrays.asList(\"txt\", \"exe\", \"dll\");\n        String[] lst = fileName.split(\"\\\\.\" );\n        if (lst.length != 2 || lst[0].isEmpty() || !Character.isLetter(lst[0].charAt(0))) {\n            return \"No\";\n        }\n        int t = (int) lst[0].chars().map(x -> (char) x).filter(Character::isDigit).count();\n        if (t > 3) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.FILENAME_CHECK(\"example.txt\" ), \"Yes\" ),\n                Objects.equals(s.FILENAME_CHECK(\"1example.dll\" ), \"No\" ),\n                Objects.equals(s.FILENAME_CHECK(\"s1sdf3.asd\" ), \"No\" ),\n                Objects.equals(s.FILENAME_CHECK(\"K.dll\" ), \"Yes\" ),\n                Objects.equals(s.FILENAME_CHECK(\"MY16FILE3.exe\" ), \"Yes\" ),\n                Objects.equals(s.FILENAME_CHECK(\"His12FILE94.exe\" ), \"No\" ),\n                Objects.equals(s.FILENAME_CHECK(\"_Y.txt\" ), \"No\" ),\n                Objects.equals(s.FILENAME_CHECK(\"?aREYA.exe\" ), \"No\" ),\n                Objects.equals(s.FILENAME_CHECK(\"/this_is_valid.dll\" ), \"No\" ),\n                Objects.equals(s.FILENAME_CHECK(\"this_is_valid.wow\" ), \"No\" ),\n                Objects.equals(s.FILENAME_CHECK(\"this_is_valid.txt\" ), \"Yes\" ),\n                Objects.equals(s.FILENAME_CHECK(\"this_is_valid.txtexe\" ), \"No\" ),\n                Objects.equals(s.FILENAME_CHECK(\"#this2_i4s_5valid.ten\" ), \"No\" ),\n                Objects.equals(s.FILENAME_CHECK(\"@this1_is6_valid.exe\" ), \"No\" ),\n                Objects.equals(s.FILENAME_CHECK(\"this_is_12valid.6exe4.txt\" ), \"No\" ),\n                Objects.equals(s.FILENAME_CHECK(\"all.exe.txt\" ), \"No\" ),\n                Objects.equals(s.FILENAME_CHECK(\"I563_No.exe\" ), \"Yes\" ),\n                Objects.equals(s.FILENAME_CHECK(\"Is3youfault.txt\" ), \"Yes\" ),\n                Objects.equals(s.FILENAME_CHECK(\"no_one#knows.dll\" ), \"Yes\" ),\n                Objects.equals(s.FILENAME_CHECK(\"1I563_Yes3.exe\" ), \"No\" ),\n                Objects.equals(s.FILENAME_CHECK(\"I563_Yes3.txtt\" ), \"No\" ),\n                Objects.equals(s.FILENAME_CHECK(\"final..txt\" ), \"No\" ),\n                Objects.equals(s.FILENAME_CHECK(\"final132\" ), \"No\" ),\n                Objects.equals(s.FILENAME_CHECK(\"_f4indsartal132.\" ), \"No\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "FILENAME_CHECK", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String FILENAME_CHECK(String fileName) {\n"}
{"task_id": "Java/142", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sumSquares(List<Integer> lst) {\n", "canonical_solution": "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                result.add(lst.get(i) * lst.get(i));\n            } else if (i % 4 == 0) {\n                result.add((int) Math.pow(lst.get(i), 3));\n            } else {\n                result.add(lst.get(i));\n            }\n        }\n        return result.stream().reduce(Integer::sum).orElse(0);\n    }\n}", "buggy_solution": "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                result.add(lst.get(i) * lst.get(i));\n            } else {\n                result.add(lst.get(i));\n            }\n        }\n        return result.stream().reduce(Integer::sum).orElse(0);\n    }\n}", "bug_type": "missing logic", "failure_symptoms": "incorrect output", "entry_point": "sumSquares", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sumSquares(Arrays.asList(1,2,3)) == 6,\n                s.sumSquares(Arrays.asList(1,4,9)) == 14,\n                s.sumSquares(List.of()) == 0,\n                s.sumSquares(Arrays.asList(1,1,1,1,1,1,1,1,1)) == 9,\n                s.sumSquares(Arrays.asList(-1,-1,-1,-1,-1,-1,-1,-1,-1)) == -3,\n                s.sumSquares(List.of(0)) == 0,\n                s.sumSquares(Arrays.asList(-1,-5,2,-1,-5)) == -126,\n                s.sumSquares(Arrays.asList(-56,-99,1,0,-2)) == 3030,\n                s.sumSquares(Arrays.asList(-1,0,0,0,0,0,0,0,-1)) == 0,\n                s.sumSquares(Arrays.asList(-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37)) == -14196,\n                s.sumSquares(Arrays.asList(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10)) == -1448\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sumSquares(Arrays.asList(1,2,3)) == 6,\n                s.sumSquares(List.of()) == 0,\n                s.sumSquares(Arrays.asList(-1,-5,2,-1,-5)) == -126\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public int sumSquares(List<Integer> lst)", "docstring": "This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\nchange the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\nExamples:\nFor lst = [1,2,3] the output should be 6\nFor lst = []  the output should be 0\nFor lst = [-1,-5,2,-1,-5]  the output should be -126", "instruction": "Write a Java function `public int sumSquares(List<Integer> lst)` to solve the following problem:\nThis function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\nchange the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\nExamples:\nFor lst = [1,2,3] the output should be 6\nFor lst = []  the output should be 0\nFor lst = [-1,-5,2,-1,-5]  the output should be -126", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int SUM_SQUARES(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                result.add(lst.get(i) * lst.get(i));\n            } else {\n                result.add(lst.get(i));\n            }\n        }\n        return result.stream().reduce(Integer::sum).orElse(0);\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.SUM_SQUARES(Arrays.asList(1,2,3)) == 6,\n                s.SUM_SQUARES(Arrays.asList(1,4,9)) == 14,\n                s.SUM_SQUARES(List.of()) == 0,\n                s.SUM_SQUARES(Arrays.asList(1,1,1,1,1,1,1,1,1)) == 9,\n                s.SUM_SQUARES(Arrays.asList(-1,-1,-1,-1,-1,-1,-1,-1,-1)) == -3,\n                s.SUM_SQUARES(List.of(0)) == 0,\n                s.SUM_SQUARES(Arrays.asList(-1,-5,2,-1,-5)) == -126,\n                s.SUM_SQUARES(Arrays.asList(-56,-99,1,0,-2)) == 3030,\n                s.SUM_SQUARES(Arrays.asList(-1,0,0,0,0,0,0,0,-1)) == 0,\n                s.SUM_SQUARES(Arrays.asList(-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37)) == -14196,\n                s.SUM_SQUARES(Arrays.asList(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10)) == -1448\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "SUM_SQUARES", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int SUM_SQUARES(List<Integer> lst) {\n"}
{"task_id": "Java/143", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String wordsInSentence(String sentence) {\n", "canonical_solution": "        List<String> newLst = new ArrayList<>();\n        for (String word : sentence.split(\" \" )) {\n            boolean flg = true;\n            if (word.length() == 1) {\n                continue;\n            }\n            for (int i = 2; i < word.length(); i++) {\n                if (word.length() % i == 0) {\n                    flg = false;\n                    break;\n                }\n            }\n            if (flg) {\n                newLst.add(word);\n            }\n        }\n        return String.join(\" \", newLst);\n    }\n}", "buggy_solution": "        List<String> newLst = new ArrayList<>();\n        for (String word : sentence.split(\" \" )) {\n            boolean flg = true;\n            for (int i = 2; i < word.length(); i++) {\n                if (word.length() % i == 0) {\n                    flg = false;\n                    break;\n                }\n            }\n            if (flg) {\n                newLst.add(word);\n            }\n        }\n        return String.join(\" \", newLst);\n    }\n}", "bug_type": "missing logic", "failure_symptoms": "incorrect output", "entry_point": "wordsInSentence", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.wordsInSentence(\"This is a test\" ), \"is\" ),\n                Objects.equals(s.wordsInSentence(\"lets go for swimming\" ), \"go for\" ),\n                Objects.equals(s.wordsInSentence(\"there is no place available here\" ), \"there is no place\" ),\n                Objects.equals(s.wordsInSentence(\"Hi I am Hussein\" ), \"Hi am Hussein\" ),\n                Objects.equals(s.wordsInSentence(\"go for it\" ), \"go for it\" ),\n                Objects.equals(s.wordsInSentence(\"here\" ), \"\" ),\n                Objects.equals(s.wordsInSentence(\"here is\" ), \"is\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.wordsInSentence(\"This is a test\" ), \"is\" ),\n                Objects.equals(s.wordsInSentence(\"lets go for swimming\" ), \"go for\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public String wordsInSentence(String sentence)", "docstring": "You are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\nExample 1:\nInput: sentence = \"This is a test\"\nOutput: \"is\"\nExample 2:\nInput: sentence = \"lets go for swimming\"\nOutput: \"go for\"\nConstraints:\n* 1 <= len(sentence) <= 100\n* sentence contains only letters", "instruction": "Write a Java function `public String wordsInSentence(String sentence)` to solve the following problem:\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\nExample 1:\nInput: sentence = \"This is a test\"\nOutput: \"is\"\nExample 2:\nInput: sentence = \"lets go for swimming\"\nOutput: \"go for\"\nConstraints:\n* 1 <= len(sentence) <= 100\n* sentence contains only letters", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String WORDS_IN_SENTENCE(String sentence) {\n        List<String> NEW_LST = new ArrayList<>();\n        for (String word : sentence.split(\" \" )) {\n            boolean flg = true;\n            for (int i = 2; i < word.length(); i++) {\n                if (word.length() % i == 0) {\n                    flg = false;\n                    break;\n                }\n            }\n            if (flg) {\n                NEW_LST.add(word);\n            }\n        }\n        return String.join(\" \", NEW_LST);\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.WORDS_IN_SENTENCE(\"This is a test\" ), \"is\" ),\n                Objects.equals(s.WORDS_IN_SENTENCE(\"lets go for swimming\" ), \"go for\" ),\n                Objects.equals(s.WORDS_IN_SENTENCE(\"there is no place available here\" ), \"there is no place\" ),\n                Objects.equals(s.WORDS_IN_SENTENCE(\"Hi I am Hussein\" ), \"Hi am Hussein\" ),\n                Objects.equals(s.WORDS_IN_SENTENCE(\"go for it\" ), \"go for it\" ),\n                Objects.equals(s.WORDS_IN_SENTENCE(\"here\" ), \"\" ),\n                Objects.equals(s.WORDS_IN_SENTENCE(\"here is\" ), \"is\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "WORDS_IN_SENTENCE", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String WORDS_IN_SENTENCE(String sentence) {\n"}
{"task_id": "Java/145", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n", "canonical_solution": "        List<Integer> result = new ArrayList<>(nums);\n        result.sort((o1, o2) -> {\n            int sum1 = 0;\n            int sum2 = 0;\n\n            for (int i = 0; i < String.valueOf(o1).length(); i++) {\n                if (i != 0 || o1 >= 0) {\n                    sum1 += (String.valueOf(o1).charAt(i) - '0' );\n                    if (i == 1 && o1 < 0) {\n                        sum1 = -sum1;\n                    }\n                }\n            }\n            for (int i = 0; i < String.valueOf(o2).length(); i++) {\n                if (i != 0 || o2 >= 0) {\n                    sum2 += (String.valueOf(o2).charAt(i) - '0' );\n                    if (i == 1 && o2 < 0) {\n                        sum2 = -sum2;\n                    }\n                }\n            }\n            return Integer.compare(sum1, sum2);\n        });\n        return result;\n    }\n}", "buggy_solution": "        List<Integer> result = new ArrayList<>(nums);\n        result.sort((o1, o2) -> {\n            int sum1 = 0;\n            int sum2 = 0;\n\n            for (int i = 0; i < String.valueOf(o1).length(); i++) {\n                if (i != 0 || o1 >= 0) {\n                    sum1 += (String.valueOf(o1).charAt(i) - '0' );\n                    if (i == 1 && o1 < 0) {\n                        sum1 = -sum1;\n                    }\n                }\n            }\n            for (int i = 0; i < String.valueOf(o2).length(); i++) {\n                if (i != 0 || o2 >= 0) {\n                    sum2 += (String.valueOf(o2).charAt(i) - '0' );\n                    if (i == 1 && o2 < 0) {\n                        sum2 = -sum2 + sum1;\n                    }\n                }\n            }\n            return Integer.compare(sum1, sum2);\n        });\n        return result;\n    }\n}", "bug_type": "excess logic", "failure_symptoms": "incorrect output", "entry_point": "orderByPoints", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.orderByPoints(new ArrayList<>(Arrays.asList(1, 11, -1, -11, -12))).equals(Arrays.asList(-1, -11, 1, -12, 11)),\n                s.orderByPoints(new ArrayList<>(Arrays.asList(1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46))).equals(Arrays.asList(0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457)),\n                s.orderByPoints(new ArrayList<>(List.of())).equals(List.of()),\n                s.orderByPoints(new ArrayList<>(Arrays.asList(1, -11, -32, 43, 54, -98, 2, -3))).equals(Arrays.asList(-3, -32, -98, -11, 1, 2, 43, 54)),\n                s.orderByPoints(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).equals(Arrays.asList(1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9)),\n                s.orderByPoints(new ArrayList<>(Arrays.asList(0, 6, 6, -76, -21, 23, 4))).equals(Arrays.asList(-76, -21, 0, 4, 23, 6, 6))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.orderByPoints(new ArrayList<>(Arrays.asList(1, 11, -1, -11, -12))).equals(Arrays.asList(-1, -11, 1, -12, 11)),\n                s.orderByPoints(new ArrayList<>(List.of())).equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<Integer> orderByPoints(List<Integer> nums)", "docstring": "Write a function which sorts the given list of integers\nin ascending order according to the sum of their digits.\nNote: if there are several items with similar sum of their digits,\norder them based on their index in original list.\nFor example:\n>>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n>>> orderByPoints(Arrays.asList()) == []", "instruction": "Write a Java function `public List<Integer> orderByPoints(List<Integer> nums)` to solve the following problem:\nWrite a function which sorts the given list of integers\nin ascending order according to the sum of their digits.\nNote: if there are several items with similar sum of their digits,\norder them based on their index in original list.\nFor example:\n>>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n>>> orderByPoints(Arrays.asList()) == []", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> ORDER_BY_POINTS(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>(nums);\n        result.sort((o1, o2) -> {\n            int sum1 = 0;\n            int sum2 = 0;\n\n            for (int i = 0; i < String.valueOf(o1).length(); i++) {\n                if (i != 0 || o1 >= 0) {\n                    sum1 += (String.valueOf(o1).charAt(i) - '0' );\n                    if (i == 1 && o1 < 0) {\n                        sum1 = -sum1;\n                    }\n                }\n            }\n            for (int i = 0; i < String.valueOf(o2).length(); i++) {\n                if (i != 0 || o2 >= 0) {\n                    sum2 += (String.valueOf(o2).charAt(i) - '0' );\n                    if (i == 1 && o2 < 0) {\n                        sum2 = -sum2 + sum1;\n                    }\n                }\n            }\n            return Integer.compare(sum1, sum2);\n        });\n        return result;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.ORDER_BY_POINTS(new ArrayList<>(Arrays.asList(1, 11, -1, -11, -12))).equals(Arrays.asList(-1, -11, 1, -12, 11)),\n                s.ORDER_BY_POINTS(new ArrayList<>(Arrays.asList(1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46))).equals(Arrays.asList(0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457)),\n                s.ORDER_BY_POINTS(new ArrayList<>(List.of())).equals(List.of()),\n                s.ORDER_BY_POINTS(new ArrayList<>(Arrays.asList(1, -11, -32, 43, 54, -98, 2, -3))).equals(Arrays.asList(-3, -32, -98, -11, 1, 2, 43, 54)),\n                s.ORDER_BY_POINTS(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).equals(Arrays.asList(1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9)),\n                s.ORDER_BY_POINTS(new ArrayList<>(Arrays.asList(0, 6, 6, -76, -21, 23, 4))).equals(Arrays.asList(-76, -21, 0, 4, 23, 6, 6))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "ORDER_BY_POINTS", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> ORDER_BY_POINTS(List<Integer> nums) {\n"}
{"task_id": "Java/146", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int specialFilter(List<Integer> nums) {\n", "canonical_solution": "        int count = 0;\n        for (int num : nums) {\n            if (num > 10) {\n                String oddDigits = \"13579\";\n                String numberAsString = String.valueOf(num);\n                if (oddDigits.indexOf(numberAsString.charAt(0)) != -1 && oddDigits.indexOf(numberAsString.charAt(numberAsString.length() - 1)) != -1) {\n                    count += 1;\n                }\n            }\n        }\n        return count;\n    }\n}", "buggy_solution": "        int count = 0;\n        for (int num : nums) {\n            if (num > 10) {\n                String oddDigits = \"123579\";\n                String numberAsString = String.valueOf(num);\n                if (oddDigits.indexOf(numberAsString.charAt(0)) != -1 && oddDigits.indexOf(numberAsString.charAt(numberAsString.length() - 1)) != -1) {\n                    count += 1;\n                }\n            }\n        }\n        return count;\n    }\n}", "bug_type": "excess logic", "failure_symptoms": "incorrect output", "entry_point": "specialFilter", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.specialFilter(Arrays.asList(5, -2, 1, -5)) == 0,\n                s.specialFilter(Arrays.asList(15, -73, 14, -15)) == 1,\n                s.specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) == 2,\n                s.specialFilter(Arrays.asList(43, -12, 93, 125, 121, 109)) == 4,\n                s.specialFilter(Arrays.asList(71, -2, -33, 75, 21, 19)) == 3,\n                s.specialFilter(List.of(1)) == 0,\n                s.specialFilter(List.of()) == 0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.specialFilter(Arrays.asList(15, -73, 14, -15)) == 1,\n                s.specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) == 2\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public int specialFilter(List<Integer> nums)", "docstring": "Write a function that takes an array of numbers as input and returns\nthe number of elements in the array that are greater than 10 and both\nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter(Arrays.asList(15, -73, 14, -15)) => 1\nspecialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2", "instruction": "Write a Java function `public int specialFilter(List<Integer> nums)` to solve the following problem:\nWrite a function that takes an array of numbers as input and returns\nthe number of elements in the array that are greater than 10 and both\nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter(Arrays.asList(15, -73, 14, -15)) => 1\nspecialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int SPECIAL_FILTER(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10) {\n                String ODD_DIGITS = \"123579\";\n                String NUMBER_AS_STRING = String.valueOf(num);\n                if (ODD_DIGITS.indexOf(NUMBER_AS_STRING.charAt(0)) != -1 && ODD_DIGITS.indexOf(NUMBER_AS_STRING.charAt(NUMBER_AS_STRING.length() - 1)) != -1) {\n                    count += 1;\n                }\n            }\n        }\n        return count;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.SPECIAL_FILTER(Arrays.asList(5, -2, 1, -5)) == 0,\n                s.SPECIAL_FILTER(Arrays.asList(15, -73, 14, -15)) == 1,\n                s.SPECIAL_FILTER(Arrays.asList(33, -2, -3, 45, 21, 109)) == 2,\n                s.SPECIAL_FILTER(Arrays.asList(43, -12, 93, 125, 121, 109)) == 4,\n                s.SPECIAL_FILTER(Arrays.asList(71, -2, -33, 75, 21, 19)) == 3,\n                s.SPECIAL_FILTER(List.of(1)) == 0,\n                s.SPECIAL_FILTER(List.of()) == 0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "SPECIAL_FILTER", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int SPECIAL_FILTER(List<Integer> nums) {\n"}
{"task_id": "Java/147", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int getMaxTriples(int n) {\n", "canonical_solution": "        List<Integer> A = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            A.add(i * i - i + 1);\n        }\n        int count = 0;\n        for (int i = 0; i < A.size(); i++) {\n            for (int j = i + 1; j < A.size(); j++) {\n                for (int k = j + 1; k < A.size(); k++) {\n                    if ((A.get(i) + A.get(j) + A.get(k)) % 3 == 0) {\n                        count += 1;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "buggy_solution": "        List<Integer> A = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            A.add(i * i);\n        }\n        int count = 0;\n        for (int i = 0; i < A.size(); i++) {\n            for (int j = i + 1; j < A.size(); j++) {\n                for (int k = j + 1; k < A.size(); k++) {\n                    if ((A.get(i) + A.get(j) + A.get(k)) % 3 == 0) {\n                        count += 1;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "bug_type": "missing logic", "failure_symptoms": "incorrect output", "entry_point": "getMaxTriples", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.getMaxTriples(5) == 1,\n                s.getMaxTriples(6) == 4,\n                s.getMaxTriples(10) == 36,\n                s.getMaxTriples(100) == 53361\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.getMaxTriples(5) == 1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public int getMaxTriples(int n)", "docstring": "You are given a positive integer n. You have to create an integer array a of length n.\nFor each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\nReturn the number of triples (a[i], a[j], a[k]) of a where i < j < k,\nand a[i] + a[j] + a[k] is a multiple of 3.\nExample :\nInput: n = 5\nOutput: 1\nExplanation:\na = [1, 3, 7, 13, 21]\nThe only valid triple is (1, 7, 13).", "instruction": "Write a Java function `public int getMaxTriples(int n)` to solve the following problem:\nYou are given a positive integer n. You have to create an integer array a of length n.\nFor each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\nReturn the number of triples (a[i], a[j], a[k]) of a where i < j < k,\nand a[i] + a[j] + a[k] is a multiple of 3.\nExample :\nInput: n = 5\nOutput: 1\nExplanation:\na = [1, 3, 7, 13, 21]\nThe only valid triple is (1, 7, 13).", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int GET_MAX_TRIPLES(int n) {\n        List<Integer> A = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            A.add(i * i);\n        }\n        int count = 0;\n        for (int i = 0; i < A.size(); i++) {\n            for (int j = i + 1; j < A.size(); j++) {\n                for (int k = j + 1; k < A.size(); k++) {\n                    if ((A.get(i) + A.get(j) + A.get(k)) % 3 == 0) {\n                        count += 1;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.GET_MAX_TRIPLES(5) == 1,\n                s.GET_MAX_TRIPLES(6) == 4,\n                s.GET_MAX_TRIPLES(10) == 36,\n                s.GET_MAX_TRIPLES(100) == 53361\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "GET_MAX_TRIPLES", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int GET_MAX_TRIPLES(int n) {\n"}
{"task_id": "Java/148", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> bf(String planet1, String planet2) {\n", "canonical_solution": "        List<String> planetNames = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        if (!planetNames.contains(planet1) || !planetNames.contains(planet2) || planet1.equals(planet2)) {\n            return List.of();\n        }\n        int planet1Index = planetNames.indexOf(planet1);\n        int planet2Index = planetNames.indexOf(planet2);\n        if (planet1Index < planet2Index) {\n            return planetNames.subList(planet1Index + 1, planet2Index);\n        } else {\n            return planetNames.subList(planet2Index + 1, planet1Index);\n        }\n    }\n}", "buggy_solution": "        List<String> planetNames = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupyter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        if (!planetNames.contains(planet1) || !planetNames.contains(planet2) || planet1.equals(planet2)) {\n            return List.of();\n        }\n        int planet1Index = planetNames.indexOf(planet1);\n        int planet2Index = planetNames.indexOf(planet2);\n        if (planet1Index < planet2Index) {\n            return planetNames.subList(planet1Index + 1, planet2Index);\n        } else {\n            return planetNames.subList(planet2Index + 1, planet1Index);\n        }\n    }\n}", "bug_type": "value misuse", "failure_symptoms": "incorrect output", "entry_point": "bf", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.bf(\"Jupiter\", \"Neptune\").equals(Arrays.asList(\"Saturn\", \"Uranus\")),\n                s.bf(\"Earth\", \"Mercury\").equals(List.of(\"Venus\")),\n                s.bf(\"Mercury\", \"Uranus\").equals(Arrays.asList(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")),\n                s.bf(\"Neptune\", \"Venus\").equals(Arrays.asList(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")),\n                s.bf(\"Earth\", \"Earth\").equals(List.of()),\n                s.bf(\"Mars\", \"Earth\").equals(List.of()),\n                s.bf(\"Jupiter\", \"Makemake\").equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.bf(\"Jupiter\", \"Neptune\").equals(Arrays.asList(\"Saturn\", \"Uranus\")),\n                s.bf(\"Earth\", \"Mercury\").equals(List.of(\"Venus\")),\n                s.bf(\"Mercury\", \"Uranus\").equals(Arrays.asList(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<String> bf(String planet1, String planet2)", "docstring": "There are eight planets in our solar system: the closerst to the Sun\nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2.\nThe function should return a tuple containing all planets whose orbits are\nlocated between the orbit of planet1 and the orbit of planet2, sorted by\nthe proximity to the sun.\nThe function should return an empty tuple if planet1 or planet2\nare not correct planet names.\nExamples\nbf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\nbf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\nbf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]", "instruction": "Write a Java function `public List<String> bf(String planet1, String planet2)` to solve the following problem:\nThere are eight planets in our solar system: the closerst to the Sun\nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2.\nThe function should return a tuple containing all planets whose orbits are\nlocated between the orbit of planet1 and the orbit of planet2, sorted by\nthe proximity to the sun.\nThe function should return an empty tuple if planet1 or planet2\nare not correct planet names.\nExamples\nbf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\nbf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\nbf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> bf(String planet1, String planet2) {\n        List<String> PLANET_NAMES = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupyter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        if (!PLANET_NAMES.contains(planet1) || !PLANET_NAMES.contains(planet2) || planet1.equals(planet2)) {\n            return List.of();\n        }\n        int planet1Index = PLANET_NAMES.indexOf(planet1);\n        int planet2Index = PLANET_NAMES.indexOf(planet2);\n        if (planet1Index < planet2Index) {\n            return PLANET_NAMES.subList(planet1Index + 1, planet2Index);\n        } else {\n            return PLANET_NAMES.subList(planet2Index + 1, planet1Index);\n        }\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.bf(\"Jupiter\", \"Neptune\").equals(Arrays.asList(\"Saturn\", \"Uranus\")),\n                s.bf(\"Earth\", \"Mercury\").equals(List.of(\"Venus\")),\n                s.bf(\"Mercury\", \"Uranus\").equals(Arrays.asList(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")),\n                s.bf(\"Neptune\", \"Venus\").equals(Arrays.asList(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")),\n                s.bf(\"Earth\", \"Earth\").equals(List.of()),\n                s.bf(\"Mars\", \"Earth\").equals(List.of()),\n                s.bf(\"Jupiter\", \"Makemake\").equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "bf", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> bf(String planet1, String planet2) {\n"}
{"task_id": "Java/149", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> listSort(List<String> lst) {\n", "canonical_solution": "        List<String> lstSorted = new ArrayList<>(lst);\n        Collections.sort(lstSorted);\n        List<String> newLst = new ArrayList<>();\n        for (String i : lstSorted) {\n            if (i.length() % 2 == 0) {\n                newLst.add(i);\n            }\n        }\n        newLst.sort(Comparator.comparingInt(String::length));\n        return newLst;\n    }\n}", "buggy_solution": "        List<String> lstSorted = new ArrayList<>(lst);\n        Collections.sort(lstSorted);\n        List<String> newLst = new ArrayList<>();\n        for (String i : lstSorted) {\n            if (i.length() % 2 == 0) {\n                newLst.add(i);\n            }\n        }\n        return newLst;\n    }\n}", "bug_type": "missing logic", "failure_symptoms": "incorrect output", "entry_point": "listSort", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.listSort(new ArrayList<>(Arrays.asList(\"aa\", \"a\", \"aaa\"))).equals(List.of(\"aa\")),\n                s.listSort(new ArrayList<>(Arrays.asList(\"school\", \"AI\", \"asdf\", \"b\"))).equals(Arrays.asList(\"AI\", \"asdf\", \"school\")),\n                s.listSort(new ArrayList<>(Arrays.asList(\"d\", \"b\", \"c\", \"a\"))).equals(List.of()),\n                s.listSort(new ArrayList<>(Arrays.asList(\"d\", \"dcba\", \"abcd\", \"a\"))).equals(Arrays.asList(\"abcd\", \"dcba\")),\n                s.listSort(new ArrayList<>(Arrays.asList(\"AI\", \"ai\", \"au\"))).equals(Arrays.asList(\"AI\", \"ai\", \"au\")),\n                s.listSort(new ArrayList<>(Arrays.asList(\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"))).equals(List.of()),\n                s.listSort(new ArrayList<>(Arrays.asList(\"aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals(Arrays.asList(\"cc\", \"dd\", \"aaaa\", \"bbbb\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.listSort(new ArrayList<>(Arrays.asList(\"aa\", \"a\", \"aaa\"))).equals(List.of(\"aa\")),\n                s.listSort(new ArrayList<>(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\"))).equals(Arrays.asList(\"ab\", \"cd\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<String> listSort(List<String> lst)", "docstring": "Write a function that accepts a list of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted list with a sorted order,\nThe list is always a list of strings and never an array of numbers,\nand it may contain duplicates.\nThe order of the list should be ascending by length of each word, and you\nshould return the list sorted by that rule.\nIf two words have the same length, sort the list alphabetically.\nThe function should return a list of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\nassert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]", "instruction": "Write a Java function `public List<String> listSort(List<String> lst)` to solve the following problem:\nWrite a function that accepts a list of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted list with a sorted order,\nThe list is always a list of strings and never an array of numbers,\nand it may contain duplicates.\nThe order of the list should be ascending by length of each word, and you\nshould return the list sorted by that rule.\nIf two words have the same length, sort the list alphabetically.\nThe function should return a list of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\nassert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> LIST_SORT(List<String> lst) {\n        List<String> LST_SORTED = new ArrayList<>(lst);\n        Collections.sort(LST_SORTED);\n        List<String> NEW_LST = new ArrayList<>();\n        for (String i : LST_SORTED) {\n            if (i.length() % 2 == 0) {\n                NEW_LST.add(i);\n            }\n        }\n        return NEW_LST;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.LIST_SORT(new ArrayList<>(Arrays.asList(\"aa\", \"a\", \"aaa\"))).equals(List.of(\"aa\")),\n                s.LIST_SORT(new ArrayList<>(Arrays.asList(\"school\", \"AI\", \"asdf\", \"b\"))).equals(Arrays.asList(\"AI\", \"asdf\", \"school\")),\n                s.LIST_SORT(new ArrayList<>(Arrays.asList(\"d\", \"b\", \"c\", \"a\"))).equals(List.of()),\n                s.LIST_SORT(new ArrayList<>(Arrays.asList(\"d\", \"dcba\", \"abcd\", \"a\"))).equals(Arrays.asList(\"abcd\", \"dcba\")),\n                s.LIST_SORT(new ArrayList<>(Arrays.asList(\"AI\", \"ai\", \"au\"))).equals(Arrays.asList(\"AI\", \"ai\", \"au\")),\n                s.LIST_SORT(new ArrayList<>(Arrays.asList(\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"))).equals(List.of()),\n                s.LIST_SORT(new ArrayList<>(Arrays.asList(\"aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals(Arrays.asList(\"cc\", \"dd\", \"aaaa\", \"bbbb\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "LIST_SORT", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> LIST_SORT(List<String> lst) {\n"}
{"task_id": "Java/150", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int xOrY(int n, int x, int y) {\n", "canonical_solution": "        if (n == 1) {\n            return y;\n        }\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}", "buggy_solution": "        if (n == 1) {\n            return y;\n        }\n        for (int i = 2; i < n; i++) {\n            if (n % i - 1 == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}", "bug_type": "excess logic", "failure_symptoms": "incorrect output", "entry_point": "xOrY", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.xOrY(7, 34, 12) == 34,\n                s.xOrY(15, 8, 5) == 5,\n                s.xOrY(3, 33, 5212) == 33,\n                s.xOrY(1259, 3, 52) == 3,\n                s.xOrY(7919, -1, 12) == -1,\n                s.xOrY(3609, 1245, 583) == 583,\n                s.xOrY(91, 56, 129) == 129,\n                s.xOrY(6, 34, 1234) == 1234,\n                s.xOrY(1, 2, 0) == 0,\n                s.xOrY(2, 2, 0) == 2\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.xOrY(7, 34, 12) == 34,\n                s.xOrY(15, 8, 5) == 5\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public int xOrY(int n, int x, int y)", "docstring": "A simple program which should return the value of x if n is\na prime number and should return the value of y otherwise.\nExamples:\nfor xOrY(7, 34, 12) == 34\nfor xOrY(15, 8, 5) == 5", "instruction": "Write a Java function `public int xOrY(int n, int x, int y)` to solve the following problem:\nA simple program which should return the value of x if n is\na prime number and should return the value of y otherwise.\nExamples:\nfor xOrY(7, 34, 12) == 34\nfor xOrY(15, 8, 5) == 5", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int X_OR_Y(int n, int x, int y) {\n        if (n == 1) {\n            return y;\n        }\n        for (int i = 2; i < n; i++) {\n            if (n % i - 1 == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.X_OR_Y(7, 34, 12) == 34,\n                s.X_OR_Y(15, 8, 5) == 5,\n                s.X_OR_Y(3, 33, 5212) == 33,\n                s.X_OR_Y(1259, 3, 52) == 3,\n                s.X_OR_Y(7919, -1, 12) == -1,\n                s.X_OR_Y(3609, 1245, 583) == 583,\n                s.X_OR_Y(91, 56, 129) == 129,\n                s.X_OR_Y(6, 34, 1234) == 1234,\n                s.X_OR_Y(1, 2, 0) == 0,\n                s.X_OR_Y(2, 2, 0) == 2\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "X_OR_Y", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int X_OR_Y(int n, int x, int y) {\n"}
{"task_id": "Java/151", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int doubleTheDifference(List<Object> lst) {\n", "canonical_solution": "        return lst.stream().filter(i -> i instanceof Integer p && p > 0 && p % 2 != 0).map(i -> (Integer) i * (Integer) i).reduce(Integer::sum).orElse(0);\n    }\n}", "buggy_solution": "        return lst.stream().filter(i -> i instanceof Integer p && p > 0).map(i -> (Integer) i * (Integer) i).reduce(Integer::sum).orElse(0);\n    }\n}", "bug_type": "missing logic", "failure_symptoms": "incorrect output", "entry_point": "doubleTheDifference", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.doubleTheDifference(List.of()) == 0,\n                s.doubleTheDifference(Arrays.asList(5, 4)) == 25,\n                s.doubleTheDifference(Arrays.asList(0.1, 0.2, 0.3)) == 0,\n                s.doubleTheDifference(Arrays.asList(-10, -20, -30)) == 0,\n                s.doubleTheDifference(Arrays.asList(-1, -2, 8)) == 0,\n                s.doubleTheDifference(Arrays.asList(0.2, 3, 5)) == 34\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n        List<Object> lst = new ArrayList<>();\n        for (int i = -99; i < 100; i += 2) {\n            lst.add(i);\n        }\n        int odd_sum = lst.stream().filter(i -> i instanceof Integer p && p % 2 != 0 && p > 0).map(i -> (Integer) i * (Integer) i).reduce(Integer::sum).orElse(0);\n        assert s.doubleTheDifference(lst) == odd_sum;\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.doubleTheDifference(Arrays.asList(1,3,2,0)) == 10,\n                s.doubleTheDifference(Arrays.asList(-1,-2,0)) == 0,\n                s.doubleTheDifference(Arrays.asList(9,-2)) == 81,\n                s.doubleTheDifference(Arrays.asList(0)) == 0\n        );\n    }\n}\n", "signature": "public int doubleTheDifference(List<Object> lst)", "docstring": "Given a list of numbers, return the sum of squares of the numbers\nin the list that are odd. Ignore numbers that are negative or not integers.\ndoubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\ndoubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\ndoubleTheDifference(Arrays.asList(9, -2)) == 81\ndoubleTheDifference(Arrays.asList(0)) == 0\nIf the input list is empty, return 0.", "instruction": "Write a Java function `public int doubleTheDifference(List<Object> lst)` to solve the following problem:\nGiven a list of numbers, return the sum of squares of the numbers\nin the list that are odd. Ignore numbers that are negative or not integers.\ndoubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\ndoubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\ndoubleTheDifference(Arrays.asList(9, -2)) == 81\ndoubleTheDifference(Arrays.asList(0)) == 0\nIf the input list is empty, return 0.", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int DOUBLE_THE_DIFFERENCE(List<Object> lst) {\n        return lst.stream().filter(i -> i instanceof Integer p && p > 0).map(i -> (Integer) i * (Integer) i).reduce(Integer::sum).orElse(0);\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.DOUBLE_THE_DIFFERENCE(List.of()) == 0,\n                s.DOUBLE_THE_DIFFERENCE(Arrays.asList(5, 4)) == 25,\n                s.DOUBLE_THE_DIFFERENCE(Arrays.asList(0.1, 0.2, 0.3)) == 0,\n                s.DOUBLE_THE_DIFFERENCE(Arrays.asList(-10, -20, -30)) == 0,\n                s.DOUBLE_THE_DIFFERENCE(Arrays.asList(-1, -2, 8)) == 0,\n                s.DOUBLE_THE_DIFFERENCE(Arrays.asList(0.2, 3, 5)) == 34\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n        List<Object> lst = new ArrayList<>();\n        for (int i = -99; i < 100; i += 2) {\n            lst.add(i);\n        }\n        int odd_sum = lst.stream().filter(i -> i instanceof Integer p && p % 2 != 0 && p > 0).map(i -> (Integer) i * (Integer) i).reduce(Integer::sum).orElse(0);\n        assert s.DOUBLE_THE_DIFFERENCE(lst) == odd_sum;\n    }\n}", "modified_entry_point": "DOUBLE_THE_DIFFERENCE", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int DOUBLE_THE_DIFFERENCE(List<Object> lst) {\n"}
{"task_id": "Java/153", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String StrongestExtension(String className, List<String> extensions) {\n", "canonical_solution": "        String strong = extensions.get(0);\n        int myVal = (int) (strong.chars().filter(Character::isUpperCase).count() - strong.chars().filter(Character::isLowerCase).count());\n        for (String s : extensions) {\n            int val = (int) (s.chars().filter(Character::isUpperCase).count() - s.chars().filter(Character::isLowerCase).count());\n            if (val > myVal) {\n                strong = s;\n                myVal = val;\n            }\n        }\n        return className + \".\" + strong;\n    }\n}", "buggy_solution": "        String strong = extensions.get(0);\n        int myVal = (int) (strong.chars().filter(Character::isUpperCase).count() - strong.chars().filter(Character::isLowerCase).count());\n        for (String s : extensions) {\n            int val = (int) (s.chars().filter(Character::isUpperCase).count() - s.chars().filter(Character::isLowerCase).count());\n            if (val > myVal) {\n                strong = s;\n                myVal = val;\n            }\n        }\n        return className + strong;\n    }\n}", "bug_type": "missing logic", "failure_symptoms": "incorrect output", "entry_point": "StrongestExtension", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.StrongestExtension(\"Watashi\", Arrays.asList(\"tEN\", \"niNE\", \"eIGHt8OKe\")), \"Watashi.eIGHt8OKe\"),\n                Objects.equals(s.StrongestExtension(\"Boku123\", Arrays.asList(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")), \"Boku123.YEs.WeCaNe\"),\n                Objects.equals(s.StrongestExtension(\"__YESIMHERE\", Arrays.asList(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")), \"__YESIMHERE.NuLl__\"),\n                Objects.equals(s.StrongestExtension(\"K\", Arrays.asList(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")), \"K.TAR\"),\n                Objects.equals(s.StrongestExtension(\"__HAHA\", Arrays.asList(\"Tab\", \"123\", \"781345\", \"-_-\")), \"__HAHA.123\"),\n                Objects.equals(s.StrongestExtension(\"YameRore\", Arrays.asList(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")), \"YameRore.okIWILL123\"),\n                Objects.equals(s.StrongestExtension(\"finNNalLLly\", Arrays.asList(\"Die\", \"NowW\", \"Wow\", \"WoW\")), \"finNNalLLly.WoW\"),\n                Objects.equals(s.StrongestExtension(\"_\", Arrays.asList(\"Bb\", \"91245\")), \"_.Bb\"),\n                Objects.equals(s.StrongestExtension(\"Sp\", Arrays.asList(\"671235\", \"Bb\")), \"Sp.671235\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.StrongestExtension(\"my_class\", Arrays.asList(\"AA\", \"Be\", \"CC\")), \"my_class.AA\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public String StrongestExtension(String class_name, List<String> extensions)", "docstring": "You will be given the name of a class (a string) and a list of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters\nin the extension's name, the strength is given by the fraction CAP - SM.\nYou should find the strongest extension and return a string in this\nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the list.\nFor example, if you are given \"Slices\" as the class and a list of the\nextensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n(its strength is -1).\nExample:\nfor StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"", "instruction": "Write a Java function `public String StrongestExtension(String class_name, List<String> extensions)` to solve the following problem:\nYou will be given the name of a class (a string) and a list of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters\nin the extension's name, the strength is given by the fraction CAP - SM.\nYou should find the strongest extension and return a string in this\nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the list.\nFor example, if you are given \"Slices\" as the class and a list of the\nextensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n(its strength is -1).\nExample:\nfor StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String StrongestExtension(String className, List<String> extensions) {\n        String strong = extensions.get(0);\n        int MY_VAL = (int) (strong.chars().filter(Character::isUpperCase).count() - strong.chars().filter(Character::isLowerCase).count());\n        for (String s : extensions) {\n            int val = (int) (s.chars().filter(Character::isUpperCase).count() - s.chars().filter(Character::isLowerCase).count());\n            if (val > MY_VAL) {\n                strong = s;\n                MY_VAL = val;\n            }\n        }\n        return className + strong;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.StrongestExtension(\"Watashi\", Arrays.asList(\"tEN\", \"niNE\", \"eIGHt8OKe\")), \"Watashi.eIGHt8OKe\"),\n                Objects.equals(s.StrongestExtension(\"Boku123\", Arrays.asList(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")), \"Boku123.YEs.WeCaNe\"),\n                Objects.equals(s.StrongestExtension(\"__YESIMHERE\", Arrays.asList(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")), \"__YESIMHERE.NuLl__\"),\n                Objects.equals(s.StrongestExtension(\"K\", Arrays.asList(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")), \"K.TAR\"),\n                Objects.equals(s.StrongestExtension(\"__HAHA\", Arrays.asList(\"Tab\", \"123\", \"781345\", \"-_-\")), \"__HAHA.123\"),\n                Objects.equals(s.StrongestExtension(\"YameRore\", Arrays.asList(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")), \"YameRore.okIWILL123\"),\n                Objects.equals(s.StrongestExtension(\"finNNalLLly\", Arrays.asList(\"Die\", \"NowW\", \"Wow\", \"WoW\")), \"finNNalLLly.WoW\"),\n                Objects.equals(s.StrongestExtension(\"_\", Arrays.asList(\"Bb\", \"91245\")), \"_.Bb\"),\n                Objects.equals(s.StrongestExtension(\"Sp\", Arrays.asList(\"671235\", \"Bb\")), \"Sp.671235\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "StrongestExtension", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String StrongestExtension(String className, List<String> extensions) {\n"}
{"task_id": "Java/154", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean cycpatternCheck(String a, String b) {\n", "canonical_solution": "        int l = b.length();\n        String pat = b + b;\n        for (int i = 0; i <= a.length() - l; i++) {\n            for (int j = 0; j <= l; j++) {\n                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "buggy_solution": "        int l = b.length();\n        String pat = b + b;\n        for (int i = 0; i <= a.length() - l; i++) {\n            for (int j = 0; j <= b.length() - l; j++) {\n                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "bug_type": "value misuse", "failure_symptoms": "incorrect output", "entry_point": "cycpatternCheck", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.cycpatternCheck(\"xyzw\", \"xyw\") == false,\n                s.cycpatternCheck(\"yello\", \"ell\") == true,\n                s.cycpatternCheck(\"whattup\", \"ptut\") == false,\n                s.cycpatternCheck(\"efef\", \"fee\") == true,\n                s.cycpatternCheck(\"abab\", \"aabb\") == false,\n                s.cycpatternCheck(\"winemtt\", \"tinem\") == true\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.cycpatternCheck(\"abcd\", \"abd\") == false,\n                s.cycpatternCheck(\"hello\", \"ell\") == true,\n                s.cycpatternCheck(\"whassup\", \"psus\") == false,\n                s.cycpatternCheck(\"abab\", \"baa\") == true,\n                s.cycpatternCheck(\"efef\", \"eeff\") == false,\n                s.cycpatternCheck(\"himenss\", \"simen\") == true\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public boolean cycpatternCheck(String a, String b)", "docstring": "You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\ncycpatternCheck(\"abcd\",\"abd\") => false\ncycpatternCheck(\"hello\",\"ell\") => true\ncycpatternCheck(\"whassup\",\"psus\") => false\ncycpatternCheck(\"abab\",\"baa\") => true\ncycpatternCheck(\"efef\",\"eeff\") => false\ncycpatternCheck(\"himenss\",\"simen\") => true", "instruction": "Write a Java function `public boolean cycpatternCheck(String a, String b)` to solve the following problem:\nYou are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\ncycpatternCheck(\"abcd\",\"abd\") => false\ncycpatternCheck(\"hello\",\"ell\") => true\ncycpatternCheck(\"whassup\",\"psus\") => false\ncycpatternCheck(\"abab\",\"baa\") => true\ncycpatternCheck(\"efef\",\"eeff\") => false\ncycpatternCheck(\"himenss\",\"simen\") => true", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean CYCPATTERN_CHECK(String a, String b) {\n        int l = b.length();\n        String pat = b + b;\n        for (int i = 0; i <= a.length() - l; i++) {\n            for (int j = 0; j <= b.length() - l; j++) {\n                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.CYCPATTERN_CHECK(\"xyzw\", \"xyw\") == false,\n                s.CYCPATTERN_CHECK(\"yello\", \"ell\") == true,\n                s.CYCPATTERN_CHECK(\"whattup\", \"ptut\") == false,\n                s.CYCPATTERN_CHECK(\"efef\", \"fee\") == true,\n                s.CYCPATTERN_CHECK(\"abab\", \"aabb\") == false,\n                s.CYCPATTERN_CHECK(\"winemtt\", \"tinem\") == true\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "CYCPATTERN_CHECK", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean CYCPATTERN_CHECK(String a, String b) {\n"}
{"task_id": "Java/155", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> evenOddCount(int num) {\n", "canonical_solution": "        int evenCount = 0, oddCount = 0;\n        for (char i : String.valueOf(Math.abs(num)).toCharArray()) {\n            if ((i - '0') % 2 == 0) {\n                evenCount += 1;\n            } else {\n                oddCount += 1;\n            }\n        }\n        return Arrays.asList(evenCount, oddCount);\n    }\n}", "buggy_solution": "        int evenCount = 0, oddCount = 0;\n        for (char i : String.valueOf(Math.abs(num)).toCharArray()) {\n            if (i % 2 == 0) {\n                evenCount += 1;\n            }\n        }\n        return Arrays.asList(evenCount, oddCount);\n    }\n}", "bug_type": "missing logic", "failure_symptoms": "incorrect output", "entry_point": "evenOddCount", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.evenOddCount(7).equals(Arrays.asList(0, 1)),\n                s.evenOddCount(-78).equals(Arrays.asList(1, 1)),\n                s.evenOddCount(3452).equals(Arrays.asList(2, 2)),\n                s.evenOddCount(346211).equals(Arrays.asList(3, 3)),\n                s.evenOddCount(-345821).equals(Arrays.asList(3, 3)),\n                s.evenOddCount(-2).equals(Arrays.asList(1, 0)),\n                s.evenOddCount(-45347).equals(Arrays.asList(2, 3)),\n                s.evenOddCount(0).equals(Arrays.asList(1, 0))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.evenOddCount(-12).equals(Arrays.asList(1, 1)),\n                s.evenOddCount(123).equals(Arrays.asList(1, 2))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<Integer> evenOddCount(int num)", "docstring": "Given an integer. return a tuple that has the number of even and odd digits respectively.\nExample:\nevenOddCount(-12) ==> (1, 1)\nevenOddCount(123) ==> (1, 2)", "instruction": "Write a Java function `public List<Integer> evenOddCount(int num)` to solve the following problem:\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\nExample:\nevenOddCount(-12) ==> (1, 1)\nevenOddCount(123) ==> (1, 2)", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> EVEN_ODD_COUNT(int num) {\n        int EVEN_COUNT = 0, ODD_COUNT = 0;\n        for (char i : String.valueOf(Math.abs(num)).toCharArray()) {\n            if (i % 2 == 0) {\n                EVEN_COUNT += 1;\n            }\n        }\n        return Arrays.asList(EVEN_COUNT, ODD_COUNT);\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.EVEN_ODD_COUNT(7).equals(Arrays.asList(0, 1)),\n                s.EVEN_ODD_COUNT(-78).equals(Arrays.asList(1, 1)),\n                s.EVEN_ODD_COUNT(3452).equals(Arrays.asList(2, 2)),\n                s.EVEN_ODD_COUNT(346211).equals(Arrays.asList(3, 3)),\n                s.EVEN_ODD_COUNT(-345821).equals(Arrays.asList(3, 3)),\n                s.EVEN_ODD_COUNT(-2).equals(Arrays.asList(1, 0)),\n                s.EVEN_ODD_COUNT(-45347).equals(Arrays.asList(2, 3)),\n                s.EVEN_ODD_COUNT(0).equals(Arrays.asList(1, 0))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "EVEN_ODD_COUNT", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> EVEN_ODD_COUNT(int num) {\n"}
{"task_id": "Java/156", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String intToMiniRoman(int number) {\n", "canonical_solution": "        List<Integer> num = Arrays.asList(1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000);\n        List<String> sym = Arrays.asList(\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\");\n        int i = 12;\n        String res = \"\";\n        while (number > 0) {\n            int div = number / num.get(i);\n            number %= num.get(i);\n            while (div != 0) {\n                res += sym.get(i);\n                div -= 1;\n            }\n            i -= 1;\n        }\n        return res.toLowerCase();\n    }\n}", "buggy_solution": "        List<Integer> num = Arrays.asList(1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000);\n        List<String> sym = Arrays.asList(\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\");\n        int i = 12;\n        String res = \"\";\n        while (number > 0) {\n            int div = number / num.get(i);\n            while (div != 0) {\n                res += sym.get(i);\n                div -= 1;\n            }\n            i -= 1;\n        }\n        return res.toLowerCase();\n    }\n}", "bug_type": "missing logic", "failure_symptoms": "infinite loop", "entry_point": "intToMiniRoman", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.intToMiniRoman(19), \"xix\"),\n                Objects.equals(s.intToMiniRoman(152), \"clii\"),\n                Objects.equals(s.intToMiniRoman(251), \"ccli\"),\n                Objects.equals(s.intToMiniRoman(426), \"cdxxvi\"),\n                Objects.equals(s.intToMiniRoman(500), \"d\"),\n                Objects.equals(s.intToMiniRoman(1), \"i\"),\n                Objects.equals(s.intToMiniRoman(4), \"iv\"),\n                Objects.equals(s.intToMiniRoman(43), \"xliii\"),\n                Objects.equals(s.intToMiniRoman(90), \"xc\"),\n                Objects.equals(s.intToMiniRoman(94), \"xciv\"),\n                Objects.equals(s.intToMiniRoman(532), \"dxxxii\"),\n                Objects.equals(s.intToMiniRoman(900), \"cm\"),\n                Objects.equals(s.intToMiniRoman(994), \"cmxciv\"),\n                Objects.equals(s.intToMiniRoman(1000), \"m\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.intToMiniRoman(19), \"xix\"),\n                Objects.equals(s.intToMiniRoman(152), \"clii\"),\n                Objects.equals(s.intToMiniRoman(426), \"cdxxvi\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public String intToMiniRoman(int number)", "docstring": "Given a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> intToMiniRoman(19) == \"xix\"\n>>> intToMiniRoman(152) == \"clii\"\n>>> intToMiniRoman(426) == \"cdxxvi\"", "instruction": "Write a Java function `public String intToMiniRoman(int number)` to solve the following problem:\nGiven a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> intToMiniRoman(19) == \"xix\"\n>>> intToMiniRoman(152) == \"clii\"\n>>> intToMiniRoman(426) == \"cdxxvi\"", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String INT_TO_MINI_ROMAN(int number) {\n        List<Integer> num = Arrays.asList(1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000);\n        List<String> sym = Arrays.asList(\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\");\n        int i = 12;\n        String res = \"\";\n        while (number > 0) {\n            int div = number / num.get(i);\n            while (div != 0) {\n                res += sym.get(i);\n                div -= 1;\n            }\n            i -= 1;\n        }\n        return res.toLowerCase();\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.INT_TO_MINI_ROMAN(19), \"xix\"),\n                Objects.equals(s.INT_TO_MINI_ROMAN(152), \"clii\"),\n                Objects.equals(s.INT_TO_MINI_ROMAN(251), \"ccli\"),\n                Objects.equals(s.INT_TO_MINI_ROMAN(426), \"cdxxvi\"),\n                Objects.equals(s.INT_TO_MINI_ROMAN(500), \"d\"),\n                Objects.equals(s.INT_TO_MINI_ROMAN(1), \"i\"),\n                Objects.equals(s.INT_TO_MINI_ROMAN(4), \"iv\"),\n                Objects.equals(s.INT_TO_MINI_ROMAN(43), \"xliii\"),\n                Objects.equals(s.INT_TO_MINI_ROMAN(90), \"xc\"),\n                Objects.equals(s.INT_TO_MINI_ROMAN(94), \"xciv\"),\n                Objects.equals(s.INT_TO_MINI_ROMAN(532), \"dxxxii\"),\n                Objects.equals(s.INT_TO_MINI_ROMAN(900), \"cm\"),\n                Objects.equals(s.INT_TO_MINI_ROMAN(994), \"cmxciv\"),\n                Objects.equals(s.INT_TO_MINI_ROMAN(1000), \"m\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "INT_TO_MINI_ROMAN", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String INT_TO_MINI_ROMAN(int number) {\n"}
{"task_id": "Java/157", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean rightAngleTriangle(int a, int b, int c) {\n", "canonical_solution": "        return a * a == b * b + c * c || b * b == a * a + c * c || c * c == a * a + b * b;\n    }\n}", "buggy_solution": "        return c * c == a * a + b * b;\n    }\n}", "bug_type": "missing logic", "failure_symptoms": "incorrect output", "entry_point": "rightAngleTriangle", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.rightAngleTriangle(3, 4, 5) == true,\n                s.rightAngleTriangle(1, 2, 3) == false,\n                s.rightAngleTriangle(10, 6, 8) == true,\n                s.rightAngleTriangle(2, 2, 2) == false,\n                s.rightAngleTriangle(7, 24, 25) == true,\n                s.rightAngleTriangle(10, 5, 7) == false,\n                s.rightAngleTriangle(5, 12, 13) == true,\n                s.rightAngleTriangle(15, 8, 17) == true,\n                s.rightAngleTriangle(48, 55, 73) == true,\n                s.rightAngleTriangle(1, 1, 1) == false,\n                s.rightAngleTriangle(2, 2, 10) == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.rightAngleTriangle(3, 4, 5) == true,\n                s.rightAngleTriangle(1, 2, 3) == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public boolean rightAngleTriangle(int a, int b, int c)", "docstring": "Given the lengths of the three sides of a triangle. Return true if the three\nsides form a right-angled triangle, false otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or\n90 degree.\nExample:\nrightAngleTriangle(3, 4, 5) == true\nrightAngleTriangle(1, 2, 3) == false", "instruction": "Write a Java function `public boolean rightAngleTriangle(int a, int b, int c)` to solve the following problem:\nGiven the lengths of the three sides of a triangle. Return true if the three\nsides form a right-angled triangle, false otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or\n90 degree.\nExample:\nrightAngleTriangle(3, 4, 5) == true\nrightAngleTriangle(1, 2, 3) == false", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean RIGHT_ANGLE_TRIANGLE(int a, int b, int c) {\n        return c * c == a * a + b * b;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.RIGHT_ANGLE_TRIANGLE(3, 4, 5) == true,\n                s.RIGHT_ANGLE_TRIANGLE(1, 2, 3) == false,\n                s.RIGHT_ANGLE_TRIANGLE(10, 6, 8) == true,\n                s.RIGHT_ANGLE_TRIANGLE(2, 2, 2) == false,\n                s.RIGHT_ANGLE_TRIANGLE(7, 24, 25) == true,\n                s.RIGHT_ANGLE_TRIANGLE(10, 5, 7) == false,\n                s.RIGHT_ANGLE_TRIANGLE(5, 12, 13) == true,\n                s.RIGHT_ANGLE_TRIANGLE(15, 8, 17) == true,\n                s.RIGHT_ANGLE_TRIANGLE(48, 55, 73) == true,\n                s.RIGHT_ANGLE_TRIANGLE(1, 1, 1) == false,\n                s.RIGHT_ANGLE_TRIANGLE(2, 2, 10) == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "RIGHT_ANGLE_TRIANGLE", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean RIGHT_ANGLE_TRIANGLE(int a, int b, int c) {\n"}
{"task_id": "Java/158", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String findMax(List<String> words) {\n", "canonical_solution": "        List<String> wordsSort = new ArrayList<>(words);\n        wordsSort.sort(new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                Set<Character> s1 = new HashSet<>();\n                for (char ch : o1.toCharArray()) {\n                    s1.add(ch);\n                }\n                Set<Character> s2 = new HashSet<>();\n                for (char ch : o2.toCharArray()) {\n                    s2.add(ch);\n                }\n                if (s1.size() > s2.size()) {\n                    return 1;\n                } else if (s1.size() < s2.size()) {\n                    return -1;\n                } else {\n                    return -o1.compareTo(o2);\n                }\n            }\n        });\n        return wordsSort.get(wordsSort.size() - 1);\n    }\n}", "buggy_solution": "        List<String> wordsSort = new ArrayList<>(words);\n        wordsSort.sort(new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                Set<Character> s1 = new HashSet<>();\n                for (char ch : o1.toCharArray()) {\n                    s1.add(ch);\n                }\n                Set<Character> s2 = new HashSet<>();\n                for (char ch : o2.toCharArray()) {\n                    s2.add(ch);\n                }\n                if (s1.size() > s2.size()) {\n                    return 1;\n                } else {\n                    return -o1.compareTo(o2);\n                }\n            }\n        });\n        return wordsSort.get(wordsSort.size() - 1);\n    }\n}", "bug_type": "missing logic", "failure_symptoms": "incorrect output", "entry_point": "findMax", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.findMax(new ArrayList<>(Arrays.asList(\"name\", \"of\", \"string\"))).equals(\"string\"),\n                s.findMax(new ArrayList<>(Arrays.asList(\"name\", \"enam\", \"game\"))).equals(\"enam\"),\n                s.findMax(new ArrayList<>(Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\"))).equals(\"aaaaaaa\"),\n                s.findMax(new ArrayList<>(Arrays.asList(\"abc\", \"cba\"))).equals(\"abc\"),\n                s.findMax(new ArrayList<>(Arrays.asList(\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals(\"footbott\"),\n                s.findMax(new ArrayList<>(Arrays.asList(\"we\", \"are\", \"gonna\", \"rock\"))).equals(\"gonna\"),\n                s.findMax(new ArrayList<>(Arrays.asList(\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals(\"nation\"),\n                s.findMax(new ArrayList<>(Arrays.asList(\"this\", \"is\", \"a\", \"prrk\"))).equals(\"this\"),\n                s.findMax(new ArrayList<>(List.of(\"b\"))).equals(\"b\"),\n                s.findMax(new ArrayList<>(Arrays.asList(\"play\", \"play\", \"play\"))).equals(\"play\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.findMax(new ArrayList<>(Arrays.asList(\"name\", \"of\", \"string\"))).equals(\"string\"),\n                s.findMax(new ArrayList<>(Arrays.asList(\"name\", \"enam\", \"game\"))).equals(\"enam\"),\n                s.findMax(new ArrayList<>(Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\"))).equals(\"aaaaaaa\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public String findMax(List<String> words)", "docstring": "Write a function that accepts a list of strings.\nThe list contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\nfindMax([\"name\", \"of\", \"string\"]) == \"string\"\nfindMax([\"name\", \"enam\", \"game\"]) == \"enam\"\nfindMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"", "instruction": "Write a Java function `public String findMax(List<String> words)` to solve the following problem:\nWrite a function that accepts a list of strings.\nThe list contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\nfindMax([\"name\", \"of\", \"string\"]) == \"string\"\nfindMax([\"name\", \"enam\", \"game\"]) == \"enam\"\nfindMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String FIND_MAX(List<String> words) {\n        List<String> WORDS_SORT = new ArrayList<>(words);\n        WORDS_SORT.sort(new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                Set<Character> s1 = new HashSet<>();\n                for (char ch : o1.toCharArray()) {\n                    s1.add(ch);\n                }\n                Set<Character> s2 = new HashSet<>();\n                for (char ch : o2.toCharArray()) {\n                    s2.add(ch);\n                }\n                if (s1.size() > s2.size()) {\n                    return 1;\n                } else {\n                    return -o1.compareTo(o2);\n                }\n            }\n        });\n        return WORDS_SORT.get(WORDS_SORT.size() - 1);\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.FIND_MAX(new ArrayList<>(Arrays.asList(\"name\", \"of\", \"string\"))).equals(\"string\"),\n                s.FIND_MAX(new ArrayList<>(Arrays.asList(\"name\", \"enam\", \"game\"))).equals(\"enam\"),\n                s.FIND_MAX(new ArrayList<>(Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\"))).equals(\"aaaaaaa\"),\n                s.FIND_MAX(new ArrayList<>(Arrays.asList(\"abc\", \"cba\"))).equals(\"abc\"),\n                s.FIND_MAX(new ArrayList<>(Arrays.asList(\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals(\"footbott\"),\n                s.FIND_MAX(new ArrayList<>(Arrays.asList(\"we\", \"are\", \"gonna\", \"rock\"))).equals(\"gonna\"),\n                s.FIND_MAX(new ArrayList<>(Arrays.asList(\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals(\"nation\"),\n                s.FIND_MAX(new ArrayList<>(Arrays.asList(\"this\", \"is\", \"a\", \"prrk\"))).equals(\"this\"),\n                s.FIND_MAX(new ArrayList<>(List.of(\"b\"))).equals(\"b\"),\n                s.FIND_MAX(new ArrayList<>(Arrays.asList(\"play\", \"play\", \"play\"))).equals(\"play\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "FIND_MAX", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String FIND_MAX(List<String> words) {\n"}
{"task_id": "Java/160", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n", "canonical_solution": "        List<String> ops = new ArrayList<>(operator);\n        List<Integer> nums = new ArrayList<>(operand);\n        for (int i = ops.size() - 1; i >= 0; i--) {\n            if (ops.get(i).equals(\"**\")) {\n                nums.set(i, (int) Math.round(Math.pow(nums.get(i), nums.get(i + 1))));\n                nums.remove(i + 1);\n                ops.remove(i);\n            }\n        }\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops.get(i).equals(\"*\")) {\n                nums.set(i, nums.get(i) * nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            } else if (ops.get(i).equals(\"/\")) {\n                nums.set(i, nums.get(i) / nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n        }\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops.get(i).equals(\"+\")) {\n                nums.set(i, nums.get(i) + nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            } else if (ops.get(i).equals(\"-\")) {\n                nums.set(i, nums.get(i) - nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n        }\n        return nums.get(0);\n    }\n}", "buggy_solution": "        List<String> ops = new ArrayList<>(operator);\n        List<Integer> nums = new ArrayList<>(operand);\n        for (int i = ops.size() - 1; i >= 0; i--) {\n            if (ops.get(i).equals(\"**\")) {\n                nums.set(i, (int) Math.round(Math.pow(nums.get(i + 1), nums.get(i + 1))));\n                nums.remove(i + 1);\n                ops.remove(i);\n            }\n        }\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops.get(i).equals(\"*\")) {\n                nums.set(i, nums.get(i) * nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            } else if (ops.get(i).equals(\"/\")) {\n                nums.set(i, nums.get(i) / nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n        }\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops.get(i).equals(\"+\")) {\n                nums.set(i, nums.get(i) + nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            } else if (ops.get(i).equals(\"-\")) {\n                nums.set(i, nums.get(i) - nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n        }\n        return nums.get(0);\n    }\n}", "bug_type": "excess logic", "failure_symptoms": "incorrect output", "entry_point": "doAlgebra", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.doAlgebra(new ArrayList<>(Arrays.asList(\"**\", \"*\", \"+\")), new ArrayList<>(Arrays.asList(2, 3, 4, 5))) == 37,\n                s.doAlgebra(new ArrayList<>(Arrays.asList(\"+\", \"*\", \"-\")), new ArrayList<>(Arrays.asList(2, 3, 4, 5))) == 9,\n                s.doAlgebra(new ArrayList<>(Arrays.asList(\"/\", \"*\")), new ArrayList<>(Arrays.asList(7, 3, 4))) == 8,\n                s.doAlgebra(new ArrayList<>(Arrays.asList(\"+\", \"**\", \"**\")), new ArrayList<>(Arrays.asList(7, 5, 3, 2))) == 1953132\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "", "signature": "public int doAlgebra(List<String> operator, List<Integer> operand)", "docstring": "Given two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( / )\nExponentiation ( ** )\nExample:\noperator[\"+\", \"*\", \"-\"]\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.", "instruction": "Write a Java function `public int doAlgebra(List<String> operator, List<Integer> operand)` to solve the following problem:\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( / )\nExponentiation ( ** )\nExample:\noperator[\"+\", \"*\", \"-\"]\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int DO_ALGEBRA(List<String> operator, List<Integer> operand) {\n        List<String> ops = new ArrayList<>(operator);\n        List<Integer> nums = new ArrayList<>(operand);\n        for (int i = ops.size() - 1; i >= 0; i--) {\n            if (ops.get(i).equals(\"**\")) {\n                nums.set(i, (int) Math.round(Math.pow(nums.get(i + 1), nums.get(i + 1))));\n                nums.remove(i + 1);\n                ops.remove(i);\n            }\n        }\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops.get(i).equals(\"*\")) {\n                nums.set(i, nums.get(i) * nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            } else if (ops.get(i).equals(\"/\")) {\n                nums.set(i, nums.get(i) / nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n        }\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops.get(i).equals(\"+\")) {\n                nums.set(i, nums.get(i) + nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            } else if (ops.get(i).equals(\"-\")) {\n                nums.set(i, nums.get(i) - nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n        }\n        return nums.get(0);\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.DO_ALGEBRA(new ArrayList<>(Arrays.asList(\"**\", \"*\", \"+\")), new ArrayList<>(Arrays.asList(2, 3, 4, 5))) == 37,\n                s.DO_ALGEBRA(new ArrayList<>(Arrays.asList(\"+\", \"*\", \"-\")), new ArrayList<>(Arrays.asList(2, 3, 4, 5))) == 9,\n                s.DO_ALGEBRA(new ArrayList<>(Arrays.asList(\"/\", \"*\")), new ArrayList<>(Arrays.asList(7, 3, 4))) == 8,\n                s.DO_ALGEBRA(new ArrayList<>(Arrays.asList(\"+\", \"**\", \"**\")), new ArrayList<>(Arrays.asList(7, 5, 3, 2))) == 1953132\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "DO_ALGEBRA", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int DO_ALGEBRA(List<String> operator, List<Integer> operand) {\n"}
{"task_id": "Java/161", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String solve(String s) {\n", "canonical_solution": "        boolean flag = true;\n        StringBuilder newString = new StringBuilder();\n        for (char i : s.toCharArray()) {\n            if (Character.isUpperCase(i)) {\n                newString.append(Character.toLowerCase(i));\n                flag = false;\n            } else if (Character.isLowerCase(i)) {\n                newString.append(Character.toUpperCase(i));\n                flag = false;\n            } else {\n                newString.append(i);\n            }\n        }\n        if (flag) {\n            newString.reverse();\n        }\n        return newString.toString();\n    }\n}", "buggy_solution": "        boolean flag = true;\n        StringBuilder newString = new StringBuilder();\n        for (char i : s.toCharArray()) {\n            if (Character.isUpperCase(i)) {\n                newString.append(Character.toLowerCase(i));\n            } else if (Character.isLowerCase(i)) {\n                newString.append(Character.toUpperCase(i));\n            } else {\n                newString.append(i);\n            }\n        }\n        if (flag) {\n            newString.reverse();\n        }\n        return newString.toString();\n    }\n}", "bug_type": "missing logic", "failure_symptoms": "incorrect output", "entry_point": "solve", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.solve(\"AsDf\"), \"aSdF\"),\n                Objects.equals(s.solve(\"1234\"), \"4321\"),\n                Objects.equals(s.solve(\"ab\"), \"AB\"),\n                Objects.equals(s.solve(\"#a@C\"), \"#A@c\"),\n                Objects.equals(s.solve(\"#AsdfW^45\"), \"#aSDFw^45\"),\n                Objects.equals(s.solve(\"#6@2\"), \"2@6#\"),\n                Objects.equals(s.solve(\"#$a^D\"), \"#$A^d\"),\n                Objects.equals(s.solve(\"#ccc\"), \"#CCC\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.solve(\"1234\"), \"4321\"),\n                Objects.equals(s.solve(\"ab\"), \"AB\"),\n                Objects.equals(s.solve(\"#a@C\"), \"#A@c\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public String solve(String s)", "docstring": "You are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa,\notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"", "instruction": "Write a Java function `public String solve(String s)` to solve the following problem:\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa,\notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String solve(String s) {\n        boolean flag = true;\n        StringBuilder NEW_STRING = new StringBuilder();\n        for (char i : s.toCharArray()) {\n            if (Character.isUpperCase(i)) {\n                NEW_STRING.append(Character.toLowerCase(i));\n            } else if (Character.isLowerCase(i)) {\n                NEW_STRING.append(Character.toUpperCase(i));\n            } else {\n                NEW_STRING.append(i);\n            }\n        }\n        if (flag) {\n            NEW_STRING.reverse();\n        }\n        return NEW_STRING.toString();\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.solve(\"AsDf\"), \"aSdF\"),\n                Objects.equals(s.solve(\"1234\"), \"4321\"),\n                Objects.equals(s.solve(\"ab\"), \"AB\"),\n                Objects.equals(s.solve(\"#a@C\"), \"#A@c\"),\n                Objects.equals(s.solve(\"#AsdfW^45\"), \"#aSDFw^45\"),\n                Objects.equals(s.solve(\"#6@2\"), \"2@6#\"),\n                Objects.equals(s.solve(\"#$a^D\"), \"#$A^d\"),\n                Objects.equals(s.solve(\"#ccc\"), \"#CCC\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "solve", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String solve(String s) {\n"}
{"task_id": "Java/162", "prompt": "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n", "declaration": "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n", "canonical_solution": "        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String md5 = new BigInteger(1, java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())).toString(16);\n        md5 = \"0\".repeat(32 - md5.length()) + md5;\n        return Optional.of(md5);\n    }\n}", "buggy_solution": "        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String md5 = new BigInteger(1, java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())).toString(16);\n        md5 = \"0\".repeat(16 - md5.length()) + md5;\n        return Optional.of(md5);\n    }\n}", "bug_type": "function misuse", "failure_symptoms": "incorrect output", "entry_point": "stringToMd5", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) throws NoSuchAlgorithmException {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.stringToMd5(\"Hello world\").get().equals(\"3e25960a79dbc69b674cd4ec67a72c62\"),\n                s.stringToMd5(\"\").isEmpty(),\n                s.stringToMd5(\"A B C\").get().equals(\"0ef78513b0cb8cef12743f5aeb35f888\"),\n                s.stringToMd5(\"password\").get().equals(\"5f4dcc3b5aa765d61d8327deb882cf99\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) throws NoSuchAlgorithmException {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.stringToMd5(\"Hello world\").get().equals(\"3e25960a79dbc69b674cd4ec67a72c62\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException", "docstring": "Given a string \"text\", return its md5 hash equivalent string with length being 32.\nIf \"text\" is an empty string, return Optional.empty().\n>>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"", "instruction": "Write a Java function `public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException` to solve the following problem:\nGiven a string \"text\", return its md5 hash equivalent string with length being 32.\nIf \"text\" is an empty string, return Optional.empty().\n>>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"", "modified_context": "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<String> STRING_TO_MD_5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String md5 = new BigInteger(1, java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())).toString(16);\n        md5 = \"0\".repeat(16 - md5.length()) + md5;\n        return Optional.of(md5);\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) throws NoSuchAlgorithmException {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.STRING_TO_MD_5(\"Hello world\").get().equals(\"3e25960a79dbc69b674cd4ec67a72c62\"),\n                s.STRING_TO_MD_5(\"\").isEmpty(),\n                s.STRING_TO_MD_5(\"A B C\").get().equals(\"0ef78513b0cb8cef12743f5aeb35f888\"),\n                s.STRING_TO_MD_5(\"password\").get().equals(\"5f4dcc3b5aa765d61d8327deb882cf99\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "STRING_TO_MD_5", "modified_declaration": "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<String> STRING_TO_MD_5(String text) throws NoSuchAlgorithmException {\n"}
{"task_id": "Java/163", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> generateIntegers(int a, int b) {\n", "canonical_solution": "        int lower = Math.max(2, Math.min(a, b));\n        int upper = Math.min(8, Math.max(a, b));\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = lower; i <= upper; i += 2) {\n            result.add(i);\n        }\n        return result;\n    }\n}", "buggy_solution": "        int lower = Math.max(2, Math.min(a, b));\n        int upper = Math.min(8, Math.max(a, b));\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = lower; i < upper; i += 2) {\n            result.add(i);\n        }\n        return result;\n    }\n}", "bug_type": "value misuse", "failure_symptoms": "incorrect output", "entry_point": "generateIntegers", "import": "", "test_setup": "", "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.generateIntegers(2, 10).equals(Arrays.asList(2, 4, 6, 8)),\n                s.generateIntegers(10, 2).equals(Arrays.asList(2, 4, 6, 8)),\n                s.generateIntegers(132, 2).equals(Arrays.asList(2, 4, 6, 8)),\n                s.generateIntegers(17, 89).equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.generateIntegers(2, 8).equals(Arrays.asList(2, 4, 6, 8)),\n                s.generateIntegers(8, 2).equals(Arrays.asList(2, 4, 6, 8)),\n                s.generateIntegers(10, 14).equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "signature": "public List<Integer> generateIntegers(int a, int b)", "docstring": "Given two positive integers a and b, return the even digits between a\nand b, in ascending order.\nFor example:\ngenerateIntegers(2, 8) => [2, 4, 6, 8]\ngenerateIntegers(8, 2) => [2, 4, 6, 8]\ngenerateIntegers(10, 14) => []", "instruction": "Write a Java function `public List<Integer> generateIntegers(int a, int b)` to solve the following problem:\nGiven two positive integers a and b, return the even digits between a\nand b, in ascending order.\nFor example:\ngenerateIntegers(2, 8) => [2, 4, 6, 8]\ngenerateIntegers(8, 2) => [2, 4, 6, 8]\ngenerateIntegers(10, 14) => []", "modified_context": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> GENERATE_INTEGERS(int a, int b) {\n        int lower = Math.max(2, Math.min(a, b));\n        int upper = Math.min(8, Math.max(a, b));\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = lower; i < upper; i += 2) {\n            result.add(i);\n        }\n        return result;\n    }\n}", "modified_test": "\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.GENERATE_INTEGERS(2, 10).equals(Arrays.asList(2, 4, 6, 8)),\n                s.GENERATE_INTEGERS(10, 2).equals(Arrays.asList(2, 4, 6, 8)),\n                s.GENERATE_INTEGERS(132, 2).equals(Arrays.asList(2, 4, 6, 8)),\n                s.GENERATE_INTEGERS(17, 89).equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "modified_entry_point": "GENERATE_INTEGERS", "modified_declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> GENERATE_INTEGERS(int a, int b) {\n"}
